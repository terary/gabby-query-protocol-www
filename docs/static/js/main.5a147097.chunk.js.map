{"version":3,"sources":["Application/i18n/locals.ts","Application/i18n/translations/index.ts","Application/i18n/index.ts","Application/PageContentWrapper/components/APP_UI_CONST.ts","Application/PageContentWrapper/components/AppTitleBarStyled.tsx","Application/GabbyToast/AlertContainer.tsx","Application/GabbyToast/GabbyToast.tsx","Application/AppContextProviders/ApplicationUtilitiesProvider/ApplicationUtilitiesProvider.tsx","Application/i18n/i18nBuilder.ts","Application/AppContextProviders/ApplicationUtilitiesProvider/index.ts","Application/AppContextProviders/hooks/useApplicationUtilities.ts","Application/PageContentWrapper/components/LanguageSwitcher.tsx","Application/PageContentWrapper/components/AppTitleBar.tsx","Application/Routes/NavListMain.tsx","Application/Routes/NavListSecondary.tsx","Application/PageContentWrapper/components/DrawerStyled.tsx","Application/PageContentWrapper/components/AppSideDrawer.tsx","Application/AppContextProviders/DateLocalizationProvider/index.ts","Application/AppContextProviders/DateLocalizationProvider/Provider.tsx","Application/AppContextProviders/GabbyThemeProvider/gabbyTheme.tsx","Application/AppContextProviders/GabbyThemeProvider/index.tsx","Application/AppContextProviders/GabbyThemeProvider/Provider.tsx","Application/AppContextProviders/index.tsx","Application/PageContentWrapper/PageContentWrapper.tsx","Pages/GabbyApp2.tsx","Pages/BlankPage.tsx","Pages/WorkBench/AppConfigWidgetDate.tsx","Pages/WorkBench/AppConfigWidgtLocalizationTest.tsx","Pages/WorkBench/AppConfigWidget.tsx","Pages/WorkBench/WorkBenchPage.tsx","Router/Router.tsx","Router/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["esUsDateLocale","enUsDateLocale","esMxDateLocale","esEsDateLocale","supportedLocaleDictionary","ar_ma","countryCode","countryNameLocal","countryNameEnglish","currencyCodeISO","currencySymbol","dateFnsLocale","arMaDateLocale","dateFormatMap","languageCode","languageDir","localeCode","materialThemeLocal","arEG","de_de","deDeDateLocale","deDE","en_gb","enGbDateLocale","elGR","en_us","enUS","es_es","esES","es_mx","es_us","ru_ru","ruRuDateLocale","ruRU","th_th","thThDateLocale","thTH","translations","ar","de","en","es","ru","th","SUPPORTED_LOCALE_DICTIONARY","APP_UI_CONST","drawerWidth","AppTitleBarStyled","styled","MuiAppBar","shouldForwardProp","prop","theme","open","currentLocale","dir","useApplicationUtilities","getCurrentLocale","dirMargin","marginLeft","marginRight","console","log","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","width","enteringScreen","AlertContainer","message","title","severity","Alert","sx","backgroundColor","AlertTitle","GabbyToast","error","debug","undefined","toast","info","success","warn","GabbyToastContainer","limit","closeOnClick","newestOnTop","pauseOnFocusLoss","position","hideProgressBar","ApplicationUtilitiesContext","React","createContext","initialState","initialLanguageCode","initialLanguage","i18n","use","initReactI18next","init","resources","translation","returnObjects","fallbackLng","lng","interpolation","escapeValue","i18nInit","ApplicationUtilitiesProvider","children","useTranslation","i18nT","t","useState","appState","setAppState","getAppStateItem","key","getCurrentLocaleCode","language","getLocale","locale","setCurrentLocale","changeLanguage","exportedFunctions","getAppStateItemOrAlternative","alternative","getLanguage","setAppStateItem","value","_updateState","altText","exists","Provider","useContext","getAppConfigItem","setAppConfigItem","LanguageSwitcher","useTheme","FormControl","variant","m","minWidth","Select","labelId","id","onChange","event","target","localeSettings","htmlPage","document","querySelector","setAttribute","label","color","palette","grey","borderBottom","Object","entries","map","localeKey","localeSetting","MenuItem","AppTitleBar","isOpen","titleText","toggleDrawer","RtlToolBar","Toolbar","pr","IconButton","Badge","badgeContent","Typography","component","noWrap","flexGrow","edge","onClick","display","LtrToolBar","MyNavLink","to","Icon","text","pathname","useLocation","ListItem","selected","NavLink","ListItemIcon","ListItemText","primary","NavListMain","List","DashboardIcon","LayersIcon","PeopleIcon","ShoppingCartIcon","ListSubheader","inset","button","NavListSecondary","DrawerStyled","MuiDrawer","whiteSpace","boxSizing","overflowX","spacing","breakpoints","up","AppSideDrawer","alignItems","justifyContent","px","Divider","DateLocalizationProvider","LocalizationProvider","dateAdapter","AdapterDateFns","gabbyTheme","localization","createTheme","GabbyThemeProvider","materialLocale","ThemeProvider","AppContextProviders","PageContentWrapper","setOpen","Box","CssBaseline","height","overflow","GabbyApp2","BlankPage","dummyIsValid","AppConfigWidgetDate","isValid","name","appLocale","DatePicker","mask","newValue","formatISO","date","dateWithoutTime","toISOString","split","Date","toMidnight","InputProps","renderInput","params","TextField","defaultProps","AppConfigWidgetLocalizationTest","setLocale","Autocomplete","options","keys","locales","getOptionLabel","substring","style","disableClearable","fullWidth","TablePagination","count","rowsPerPage","page","onPageChange","AppConfigWidget","e","currentTarget","type","d","WorkBenchPage","GabbyApp3","GabbyComponentsPage","Router","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5a147097.chunk.js","sourcesContent":["// cspell:disable\n\n// Locale code:\n//    languageCode_countryCode\n//    ar_eg -> Arabic Egypt\n//    en_us -> English United States\n//    en_uk -> English United Kingdom\n// https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/localization\n\nimport {\n  arEG,\n  deDE,\n  elGR,\n  enUS,\n  esES,\n  /* esMx, doesn't exist */\n  /* esUs,  doesn't exist */\n  ruRU,\n  thTH,\n} from \"@mui/material/locale\";\n\nimport arMaDateLocale from \"date-fns/locale/ar-MA\";\nimport deDeDateLocale from \"date-fns/locale/de\";\nimport enGbDateLocale from \"date-fns/locale/en-GB\";\nimport enUsDateLocale from \"date-fns/locale/en-US\";\nimport esEsDateLocale from \"date-fns/locale/es\";\n// import esMxDateLocale from \"date-fns/locale/es\";    // dont exist\n// import esUsDateLocale from \"date-fns/locale/en-US\"; // dont exist\nimport ruRuDateLocale from \"date-fns/locale/ru\";\nimport thThDateLocale from \"date-fns/locale/th\";\n\nimport type { TLocaleSettings, TSupportedLocaleDictionary } from \"./type\";\n\nconst esUsDateLocale = enUsDateLocale;\nconst esMxDateLocale = esEsDateLocale;\n\nconst SUPPORTED_LOCALE_CODES_ARRAY = [\n  \"ar_ma\",\n  \"de_de\",\n  \"en_gb\",\n  \"en_us\",\n  \"es_es\",\n  \"es_mx\",\n  \"es_us\",\n  \"ru_ru\",\n  \"th_th\",\n];\n\nconst supportedLocaleDictionary: TSupportedLocaleDictionary = {\n  ar_ma: {\n    countryCode: \"ma\",\n    countryNameLocal: \"المغرب\", // this may not be the symbol\n    countryNameEnglish: \"Morocco\",\n    currencyCodeISO: \"MAD\",\n    currencySymbol: \"درهم‎,\",\n    dateFnsLocale: arMaDateLocale,\n    dateFormatMap: \"__/__/____\", // dd/mm/yyyy\n    languageCode: \"ar\",\n    languageDir: \"rtl\",\n    localeCode: \"ar_ma\",\n    materialThemeLocal: arEG, // Egypt will have to do\n  } as TLocaleSettings,\n  de_de: {\n    countryCode: \"de\",\n    countryNameLocal: \"Deutsch\",\n    countryNameEnglish: \"German\",\n    currencySymbol: \"€\",\n    currencyCodeISO: \"US\",\n    dateFnsLocale: deDeDateLocale,\n    dateFormatMap: \"____-__-__\", // yyyy-mm-dd (google says this format, date picker said something different)\n    languageCode: \"de\",\n    languageDir: \"ltr\",\n    localeCode: \"de_de\",\n    materialThemeLocal: deDE,\n  } as TLocaleSettings,\n  en_gb: {\n    countryCode: \"uk\",\n    countryNameLocal: \"England\",\n    countryNameEnglish: \"England\",\n    currencyCodeISO: \"GBP\",\n    currencySymbol: \"£\",\n    dateFnsLocale: enGbDateLocale,\n    dateFormatMap: \"__/__/____\", // dd/mm/yyyy\n    languageCode: \"en\",\n    languageDir: \"ltr\",\n    localeCode: \"en_uk\",\n    materialThemeLocal: elGR,\n  } as TLocaleSettings,\n  en_us: {\n    countryCode: \"us\",\n    countryNameLocal: \"United States\",\n    countryNameEnglish: \"United States\",\n    currencyCodeISO: \"USD\",\n    currencySymbol: \"$\",\n    dateFnsLocale: enUsDateLocale,\n    dateFormatMap: \"__/__/____\", // mm/dd/yyyy\n    languageCode: \"en\",\n    languageDir: \"ltr\",\n    localeCode: \"en_us\",\n    materialThemeLocal: enUS,\n  } as TLocaleSettings,\n  es_es: {\n    countryCode: \"es\",\n    countryNameLocal: \"España\",\n    countryNameEnglish: \"Spain\",\n    currencyCodeISO: \"EUR\",\n    currencySymbol: \"€\",\n    dateFnsLocale: esEsDateLocale,\n    dateFormatMap: \"__-__-__\", // dd-mm-yy\n    languageCode: \"es\",\n    languageDir: \"ltr\",\n    localeCode: \"es_es\",\n    materialThemeLocal: esES,\n  } as TLocaleSettings,\n  es_mx: {\n    countryCode: \"mx\",\n    countryNameLocal: \"México\",\n    countryNameEnglish: \"Mexico\",\n    currencyCodeISO: \"MXN\",\n    currencySymbol: \"mex$\",\n    dateFnsLocale: esMxDateLocale,\n    dateFormatMap: \"__-__-__\", // dd-mm-yy\n    languageCode: \"es\",\n    languageDir: \"ltr\",\n    localeCode: \"es_mx\",\n    materialThemeLocal: esES, // no Mexico\n  } as TLocaleSettings,\n  es_us: {\n    countryCode: \"us\",\n    countryNameLocal: \"Estados Unidos\",\n    countryNameEnglish: \"United States\",\n    currencyCodeISO: \"USD\",\n    currencySymbol: \"$\",\n    dateFnsLocale: esUsDateLocale,\n    dateFormatMap: \"__/__/____\", // mm/dd/yyyy\n    languageCode: \"es\",\n    languageDir: \"ltr\",\n    localeCode: \"es_us\",\n    materialThemeLocal: esES, // no US Spanish\n  } as TLocaleSettings,\n  ru_ru: {\n    countryCode: \"ru\",\n    countryNameLocal: \"Россия\",\n    countryNameEnglish: \"Russia\",\n    currencyCodeISO: \"RUB\",\n    currencySymbol: \"₽\",\n    dateFnsLocale: ruRuDateLocale,\n    dateFormatMap: \"__.__.____\", // dd.mm.yy(yy)\n    languageCode: \"ru\",\n    languageDir: \"ltr\",\n    localeCode: \"ru_ru\",\n    materialThemeLocal: ruRU, // no US Spanish\n  } as TLocaleSettings,\n  th_th: {\n    countryCode: \"th\",\n    countryNameLocal: \"ประเทศไทย\",\n    countryNameEnglish: \"Thailand\",\n    currencyCodeISO: \"THB\",\n    currencySymbol: \"฿\",\n    dateFnsLocale: thThDateLocale,\n    dateFormatMap: \"__/__/____\", // dd/mm/yyyy\n    languageCode: \"th\",\n    languageDir: \"ltr\",\n    localeCode: \"th_th\",\n    materialThemeLocal: thTH, // no US Spanish\n  } as TLocaleSettings,\n};\n\nexport { supportedLocaleDictionary, SUPPORTED_LOCALE_CODES_ARRAY };\n","/* eslint-disable import/prefer-default-export */\n/* eslint-disable camelcase */\nimport { TSupportedTranslationDictionary } from \"../type\";\nimport ar from \"./ar.json\";\nimport ar_ma from \"./ar_MA.json\";\nimport de from \"./de.json\";\nimport en from \"./en.json\";\nimport en_gb from \"./en_gb.json\";\nimport en_us from \"./en_US.json\";\nimport es from \"./es.json\";\nimport es_es from \"./es_es.json\";\nimport es_mx from \"./es_mx.json\";\nimport es_us from \"./es_us.json\";\nimport ru from \"./ru.json\";\nimport th from \"./th.json\";\n\nexport const translations: TSupportedTranslationDictionary = {\n  ar,\n  ar_ma,\n  de,\n  de_de: de,\n  en,\n  en_gb,\n  en_us,\n  es,\n  es_es,\n  es_mx,\n  es_us,\n  ru,\n  ru_ru: ru,\n  th,\n  th_th: th,\n};\n","import { supportedLocaleDictionary, SUPPORTED_LOCALE_CODES_ARRAY } from \"./locals\";\nimport type { TLocaleSettings, TSupportedLanguages, TSupportedLocales } from \"./type\";\nimport { translations } from \"./translations\";\n\nimport { i18nBuilder } from \"./i18nBuilder\";\n\nconst i18nInit = (initialLanguageCode: TSupportedLanguages) => {\n  return i18nBuilder(translations, initialLanguageCode);\n};\nconst SUPPORTED_LOCALE_DICTIONARY = supportedLocaleDictionary;\n\nexport {\n  supportedLocaleDictionary,\n  SUPPORTED_LOCALE_DICTIONARY,\n  SUPPORTED_LOCALE_CODES_ARRAY,\n  i18nInit,\n};\nexport type { TLocaleSettings, TSupportedLocales };\n","/* eslint-disable import/prefer-default-export */\nexport const APP_UI_CONST = {\n  APP_DRAWER_WIDTH: 240,\n};\n","/* eslint-disable import/prefer-default-export */\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from \"@mui/material/AppBar\";\nimport { styled } from \"@mui/material/styles\";\nimport { APP_UI_CONST } from \"./APP_UI_CONST\";\nimport { useApplicationUtilities } from \"../..\";\nconst drawerWidth = APP_UI_CONST.APP_DRAWER_WIDTH;\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nexport const AppTitleBarStyled = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== \"open\",\n})<AppBarProps>(({ theme, open, dir }) => {\n  const currentLocale = useApplicationUtilities().getCurrentLocale();\n\n  const dirMargin =\n    currentLocale.languageDir === \"ltr\"\n      ? { marginLeft: drawerWidth }\n      : { marginRight: drawerWidth };\n  console.log(\"dir:\", currentLocale.languageDir);\n  return {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    ...(open && {\n      ...dirMargin,\n      // marginLeft: drawerWidth,\n      // marginRight: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    }),\n  };\n});\n\n// export const AppTitleBarStyled = styled(MuiAppBar, {\n//   shouldForwardProp: (prop) => prop !== \"open\",\n// })<AppBarProps>(({ theme, open, dir }) =>  ({\n//   zIndex: theme.zIndex.drawer + 1,\n//   transition: theme.transitions.create([\"width\", \"margin\"], {\n//     easing: theme.transitions.easing.sharp,\n//     duration: theme.transitions.duration.leavingScreen,\n//   }),\n//   ...(open && {\n//     // marginLeft: drawerWidth,\n//     // marginRight: drawerWidth,\n//     width: `calc(100% - ${drawerWidth}px)`,\n//     transition: theme.transitions.create([\"width\", \"margin\"], {\n//       easing: theme.transitions.easing.sharp,\n//       duration: theme.transitions.duration.enteringScreen,\n//     }),\n//   }),\n// }));\n","import Alert from \"@mui/material/Alert\";\nimport AlertTitle from \"@mui/material/AlertTitle\";\n\ntype AlertContainerProps = {\n  message: string;\n  title?: string;\n  severity: \"error\" | \"info\" | \"success\" | \"warning\";\n};\n\nconst AlertContainer = ({ message, title = \"Info\", severity }: AlertContainerProps) => {\n  return (\n    <Alert severity={severity} sx={{ backgroundColor: \"rgba(255,255,255,0.5)\" }}>\n      <AlertTitle>{title}</AlertTitle>\n      {message} — <strong>check it out!</strong>\n    </Alert>\n  );\n};\n\nexport { AlertContainer };\n","/* eslint-disable import/prefer-default-export */\n/*\n  To use this, three things need to happen.\n    1) Put the container somewhere sane\n\n      <GabbyToastContainer />\n\n    2) Import this file wherever it will be used (normal usage, but it still needs to happen)\n    3) Import the css (see below)\n\n  \n  For better instructions see the package this wraps over:\n    https://www.npmjs.com/package/material-react-toastify\n*/\n\nimport { toast, ToastContainer } from \"material-react-toastify\";\nimport \"material-react-toastify/dist/ReactToastify.css\";\nimport { AlertContainer } from \"./AlertContainer\";\n\ntype GabbyToastProps = {\n  message: string;\n  title?: string;\n};\ntype GabbyErrorToastProps = GabbyToastProps & {\n  debug?: any;\n};\n\nconst GabbyToast = {\n  error: ({ message, title = \"Error\", debug }: GabbyErrorToastProps): void => {\n    if (debug !== undefined) {\n      console.dir({ error: debug });\n    }\n    toast.error(<AlertContainer message={message} title={title} severity=\"error\" />);\n  },\n\n  info: ({ message, title = \"Info\" }: GabbyToastProps): void => {\n    toast.info(<AlertContainer message={message} title={title} severity=\"info\" />);\n  },\n\n  success: ({ message, title = \"Success\" }: GabbyToastProps): void => {\n    toast.success(<AlertContainer message={message} title={title} severity=\"success\" />);\n  },\n\n  warn: ({ message, title = \"Warning\" }: GabbyToastProps): void => {\n    toast.warn(<AlertContainer message={message} title={title} severity=\"warning\" />);\n  },\n};\n\nconst GabbyToastContainer = () => {\n  return (\n    <ToastContainer\n      limit={3}\n      closeOnClick\n      newestOnTop\n      pauseOnFocusLoss\n      position=\"top-right\"\n      hideProgressBar={false}\n    />\n  );\n};\n\nexport { GabbyToast, GabbyToastContainer };\n","import React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n/*\n  TODO - *tmc*\n  i18n does some kind of initialization that depends on\n  the translations files. For the time being this \n  needs to be like this, but should be reorganized\n  to import normally\n*/\n// import \"../i18n/i18nBuilder\";\nimport { i18nInit } from \"../../i18n\";\nimport type { TSupportedLocales, TLocaleSettings } from \"../../i18n\";\nimport { supportedLocaleDictionary } from \"../../i18n\";\nimport type { ApplicationUtilitiesType } from \"./type\";\nimport { GabbyToast, GabbyToastContainer } from \"../../GabbyToast\";\n\nexport const ApplicationUtilitiesContext =\n  React.createContext<ApplicationUtilitiesType | null>(null);\n\nconst initialState = {\n  // locale: \"en_us\",\n  // // locale: \"es_mx\",\n  // // locale: \"ru_ru\",\n  // // locale: \"ar_ma\",\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ni18nInit(\"es_mx\"); // the package - injects, we dont need to wrap it into a provider\n\nconst ApplicationUtilitiesProvider = ({ children }: Props): JSX.Element => {\n  const { t: i18nT, i18n } = useTranslation();\n\n  // so far the only preset is locale\n  const [appState, setAppState] = React.useState(initialState as { [key: string]: unknown });\n\n  const _updateState = <T,>(key: string, value: T): void => {\n    setAppState({ ...appState, ...{ [key]: value as T } });\n  };\n\n  const getAppStateItem = <T,>(key: string): T => {\n    return appState[key] as T;\n  };\n\n  const getAppStateItemOrAlternative = <T,>(key: string, alternative: T): T => {\n    return getAppStateItem(key) || alternative;\n  };\n\n  const getCurrentLocaleCode = (): TSupportedLocales => {\n    return i18n.language as TSupportedLocales;\n  };\n\n  const getCurrentLocale = () => {\n    return getLocale(getCurrentLocaleCode());\n  };\n\n  const getLocale = (locale?: TSupportedLocales): TLocaleSettings => {\n    if (locale !== undefined && supportedLocaleDictionary[locale] !== undefined) {\n      return supportedLocaleDictionary[locale];\n    }\n\n    // ideally we'll be using locale code (en_us) as language keys and locale keys\n    // but there its possibility end-user chooses language without locale 'en' or 'ar'\n    if (supportedLocaleDictionary[i18n.language as TSupportedLocales] !== undefined) {\n      return supportedLocaleDictionary[i18n.language as TSupportedLocales];\n    }\n\n    return supportedLocaleDictionary[\"en_us\"];\n  };\n\n  const setAppStateItem = <T,>(key: string, value: T): void => {\n    _updateState<T>(key, value);\n  };\n\n  const setCurrentLocale = (localeCode: TSupportedLocales): void => {\n    i18n.changeLanguage(localeCode);\n  };\n\n  const t = (key: string, altText?: string) => {\n    return i18n.exists(key) ? i18nT(key) : altText || key;\n  };\n\n  const exportedFunctions = {\n    changeLanguage: setCurrentLocale,\n    // changeLanguage: (languageCode: TSupportedLocales) => {\n    //   i18n.changeLanguage(languageCode);\n    // },\n\n    getAppStateItem,\n    getAppStateItemOrAlternative,\n    getLanguage: () => i18n.language as TSupportedLocales,\n    getCurrentLocale,\n    getCurrentLocaleCode,\n    getLocale,\n    setAppStateItem,\n    setCurrentLocale,\n    t,\n    toast: GabbyToast,\n  };\n\n  return (\n    <ApplicationUtilitiesContext.Provider value={exportedFunctions}>\n      <GabbyToastContainer />\n      {children}\n    </ApplicationUtilitiesContext.Provider>\n  );\n};\nexport default ApplicationUtilitiesProvider;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport { TSupportedLanguages, TSupportedTranslationDictionary } from \"./type\";\n// import { translations } from \"../translations/translations\";\n\nexport const i18nBuilder = (\n  translations: TSupportedTranslationDictionary,\n  initialLanguage: TSupportedLanguages\n) => {\n  i18n\n    .use(initReactI18next)\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      resources: {\n        en: {\n          translation: translations.en,\n        },\n        ar: {\n          translation: translations.ar,\n        },\n        ar_ma: {\n          translation: translations.ar_ma,\n        },\n        de: {\n          translation: translations.de,\n        },\n        en_gb: {\n          translation: translations.en_gb,\n        },\n        en_us: {\n          translation: translations.en_us,\n        },\n        es: {\n          translation: translations.es,\n        },\n        es_es: {\n          translation: translations.es_es,\n        },\n        es_mx: {\n          translation: translations.es_mx,\n        },\n        es_us: {\n          translation: translations.es_us,\n        },\n        ru: {\n          translation: translations.ru,\n        },\n        th: {\n          translation: translations.th,\n        },\n      },\n\n      returnObjects: true,\n      fallbackLng: \"en_us\",\n      debug: false,\n      lng: initialLanguage,\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n    });\n};\n","import ApplicationUtilitiesProvider, {\n  ApplicationUtilitiesContext,\n} from \"./ApplicationUtilitiesProvider\";\nimport type { ApplicationUtilitiesType } from \"./type\";\n\nexport default ApplicationUtilitiesProvider;\nexport { ApplicationUtilitiesContext };\nexport type { ApplicationUtilitiesType };\n","/* eslint-disable import/prefer-default-export */\nimport React from \"react\";\nimport { ApplicationUtilitiesContext } from \"../ApplicationUtilitiesProvider\";\nimport type { ApplicationUtilitiesType } from \"../ApplicationUtilitiesProvider\";\nimport { i18nBuilder } from \"../../i18n/i18nBuilder\";\n\nexport const useApplicationUtilities = () => {\n  const {\n    changeLanguage,\n    getAppStateItem,\n    getCurrentLocale,\n    getCurrentLocaleCode,\n    getLocale,\n    setAppStateItem,\n    setCurrentLocale,\n    t,\n  } = React.useContext(ApplicationUtilitiesContext) as ApplicationUtilitiesType;\n\n  return {\n    // changeLanguage,  //\n    getAppConfigItem: getAppStateItem,\n\n    getCurrentLocale,\n    getCurrentLocaleCode,\n    getLocale,\n    setAppConfigItem: setAppStateItem,\n    // setLanguageCode: changeLanguage,\n    setCurrentLocale,\n    t,\n  };\n};\n","import {\n  SUPPORTED_LOCALE_CODES_ARRAY,\n  SUPPORTED_LOCALE_DICTIONARY,\n  useApplicationUtilities,\n} from \"../..\";\nimport type { TSupportedLocales } from \"../..\";\nimport { useTheme, makeStyles } from \"@mui/material/styles\";\n\nimport * as React from \"react\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\n\nexport const LanguageSwitcher = () => {\n  const { setCurrentLocale, getCurrentLocaleCode, getLocale, t } = useApplicationUtilities();\n  const theme = useTheme();\n  const handleChange = (event: SelectChangeEvent) => {\n    const localeCode = event.target.value as TSupportedLocales;\n    const localeSettings = getLocale(localeCode);\n    setCurrentLocale(event.target.value as TSupportedLocales);\n\n    const htmlPage = document.querySelector(\"html\");\n    if (htmlPage !== null) {\n      htmlPage.setAttribute(\"dir\", localeSettings.languageDir);\n      htmlPage.setAttribute(\"lang\", localeSettings.languageCode);\n    }\n  };\n\n  return (\n    <div>\n      <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\n        {/* <InputLabel id=\"demo-simple-select-standard-label\">Age</InputLabel> */}\n        <Select\n          labelId=\"demo-simple-select-standard-label\"\n          id=\"demo-simple-select-standard\"\n          value={getCurrentLocaleCode()}\n          onChange={handleChange}\n          label={t(\"Language\")}\n          sx={{ color: theme.palette.grey[100], borderBottom: \"1px solid white\" }}\n        >\n          {Object.entries(SUPPORTED_LOCALE_DICTIONARY).map(([localeKey, localeSetting]) => {\n            {\n              return (\n                <MenuItem value={localeKey} key={localeKey}>\n                  {localeSetting.countryNameLocal}\n                </MenuItem>\n              );\n            }\n          })}\n        </Select>\n      </FormControl>\n      {/* <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 120 }}>\n        <InputLabel id=\"demo-simple-select-filled-label\">Age</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-filled-label\"\n          id=\"demo-simple-select-filled\"\n          value={age}\n          onChange={handleChange}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={10}>Ten</MenuItem>\n          <MenuItem value={20}>Twenty</MenuItem>\n          <MenuItem value={30}>Thirty</MenuItem>\n        </Select>\n      </FormControl> */}\n    </div>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Badge from \"@mui/material/Badge\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport NotificationsIcon from \"@mui/icons-material/Notifications\";\nimport IconButton from \"@mui/material/IconButton\";\nimport { AppTitleBarStyled } from \"./AppTitleBarStyled\";\nimport { useApplicationUtilities } from \"../../AppContextProviders/hooks\";\nimport { LanguageSwitcher } from \"./LanguageSwitcher\";\ninterface IAppBarProps {\n  isOpen: boolean;\n  titleText: string;\n  toggleDrawer: () => void;\n}\nexport const AppTitleBar = ({\n  isOpen,\n  titleText,\n  toggleDrawer,\n}: IAppBarProps): JSX.Element => {\n  const { t, getLocale, getCurrentLocale } = useApplicationUtilities();\n  const currentLocale = getCurrentLocale();\n  const RtlToolBar = () => {\n    return (\n      <Toolbar\n        sx={{\n          pr: \"24px\", // keep right padding when drawer closed\n        }}\n      >\n        <IconButton color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap sx={{ flexGrow: 1 }}>\n          {titleText} <br />\n          {t(\"app-title-bar-text\")}\n          <br />\n        </Typography>\n        <LanguageSwitcher />\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={toggleDrawer}\n          sx={{\n            marginLeft: \"36px\",\n            ...(isOpen && { display: \"none\" }),\n          }}\n        >\n          <MenuIcon />\n        </IconButton>\n      </Toolbar>\n    );\n  };\n\n  const LtrToolBar = () => {\n    return (\n      <Toolbar\n        sx={{\n          pr: \"24px\", // keep right padding when drawer closed\n        }}\n      >\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={toggleDrawer}\n          sx={{\n            marginRight: \"36px\",\n            ...(isOpen && { display: \"none\" }),\n          }}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap sx={{ flexGrow: 1 }}>\n          {titleText} <br />\n          {t(\"app-title-bar-text\")}\n          <br />\n        </Typography>\n        <LanguageSwitcher />\n        <IconButton color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n      </Toolbar>\n    );\n  };\n\n  return (\n    <AppTitleBarStyled open={isOpen} dir=\"ltr\">\n      {currentLocale.languageDir === \"ltr\" && <LtrToolBar />}\n      {currentLocale.languageDir === \"rtl\" && <RtlToolBar />}\n    </AppTitleBarStyled>\n  );\n};\n","import * as React from \"react\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport DashboardIcon from \"@mui/icons-material/Dashboard\";\nimport ShoppingCartIcon from \"@mui/icons-material/ShoppingCart\";\nimport PeopleIcon from \"@mui/icons-material/People\";\nimport BarChartIcon from \"@mui/icons-material/BarChart\";\nimport LayersIcon from \"@mui/icons-material/Layers\";\nimport { useApplicationUtilities } from \"..\";\nimport { NavLink, useLocation } from \"react-router-dom\";\n\ntype MyNavLinkProps = {\n  to: string;\n  Icon: typeof DashboardIcon;\n  text: string;\n};\n\nconst MyNavLink = ({ to, Icon, text }: MyNavLinkProps) => {\n  const { pathname } = useLocation();\n\n  const activeRoute = () => {\n    return to === pathname;\n  };\n\n  return (\n    <ListItem selected={activeRoute()} component={NavLink} to={to}>\n      <ListItemIcon>\n        <Icon />\n      </ListItemIcon>\n      <ListItemText primary={`${text}`} />\n    </ListItem>\n  );\n};\n\nexport const NavListMain = () => {\n  const { t } = useApplicationUtilities();\n  return (\n    <List>\n      <MyNavLink to=\"/\" Icon={DashboardIcon} text={t(\"Home\")} />\n      <MyNavLink to=\"/workbench\" Icon={LayersIcon} text={t(\"workbench\")} />\n      <MyNavLink to=\"/gabby-components\" Icon={DashboardIcon} text={t(\"Gabby Components\")} />\n      <MyNavLink to=\"/blank-page\" Icon={PeopleIcon} text={t(\"Blank Page\")} />\n      <MyNavLink to=\"/gabby3\" Icon={ShoppingCartIcon} text={t(\"Gabby 3\")} />\n\n      <ListSubheader inset>{t(\"Filler Not Used\")}</ListSubheader>\n\n      <ListItem button>\n        <ListItemIcon>\n          <PeopleIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Customers\")} />\n      </ListItem>\n      <ListItem button>\n        <ListItemIcon>\n          <BarChartIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Reports\")} />\n      </ListItem>\n      <ListItem button>\n        <ListItemIcon>\n          <LayersIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Integrations\")} />\n      </ListItem>\n    </List>\n  );\n};\n","import * as React from \"react\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport ShoppingCartIcon from \"@mui/icons-material/ShoppingCart\";\nimport { useApplicationUtilities } from \"..\";\n\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\n\nexport const NavListSecondary = () => {\n  const { t } = useApplicationUtilities();\n\n  return (\n    <List>\n      <ListSubheader inset>{t(\"Saved reports\")}</ListSubheader>\n      <ListItem button>\n        <ListItemIcon>\n          <ShoppingCartIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Orders\")} />\n      </ListItem>\n\n      <ListItem button>\n        <ListItemIcon>\n          <AssignmentIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Current month\")} />\n      </ListItem>\n      <ListItem button>\n        <ListItemIcon>\n          <AssignmentIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Last quarter\")} />\n      </ListItem>\n      <ListItem button>\n        <ListItemIcon>\n          <AssignmentIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Year-end sale\")} />\n      </ListItem>\n    </List>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport { styled } from \"@mui/material/styles\";\nimport MuiDrawer from \"@mui/material/Drawer\";\nimport { APP_UI_CONST } from \"./APP_UI_CONST\";\n\nconst drawerWidth = APP_UI_CONST.APP_DRAWER_WIDTH;\n\nexport const DrawerStyled = styled(MuiDrawer, {\n  shouldForwardProp: (prop) => prop !== \"open\",\n})(({ theme, open }) => ({\n  \"& .MuiDrawer-paper\": {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    boxSizing: \"border-box\",\n    ...(!open && {\n      overflowX: \"hidden\",\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      width: theme.spacing(7),\n      [theme.breakpoints.up(\"sm\")]: {\n        width: theme.spacing(9),\n      },\n    }),\n  },\n}));\n","/* eslint-disable import/prefer-default-export */\nimport * as React from \"react\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\nimport { NavListMain, NavListSecondary } from \"../../Routes\";\nimport { DrawerStyled } from \"./DrawerStyled\";\n\ninterface Props {\n  isOpen: boolean;\n  toggleDrawer: () => void;\n}\n\nexport const AppSideDrawer = ({ isOpen, toggleDrawer }: Props) => {\n  return (\n    <DrawerStyled variant=\"permanent\" open={isOpen}>\n      <Toolbar\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          px: [1],\n        }}\n      >\n        <IconButton aria-label=\"close drawer\" onClick={toggleDrawer}>\n          <ChevronLeftIcon />\n        </IconButton>\n      </Toolbar>\n      <Divider />\n      <NavListMain />\n      <Divider />\n      <NavListSecondary />\n    </DrawerStyled>\n  );\n};\n","import DateLocalizationProvider from \"./Provider\";\n\nexport default DateLocalizationProvider;\n","import React from \"react\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\nimport type { TSupportedLocales } from \"../../i18n\";\nimport type { ApplicationUtilitiesType } from \"../ApplicationUtilitiesProvider/type\";\nimport { ApplicationUtilitiesContext } from \"../ApplicationUtilitiesProvider/ApplicationUtilitiesProvider\";\n\ntype Props = {\n  children: React.ReactNode;\n};\nconst DateLocalizationProvider = ({ children }: Props): JSX.Element => {\n  const { getAppStateItemOrAlternative, getLocale } = React.useContext(\n    ApplicationUtilitiesContext\n  ) as ApplicationUtilitiesType;\n\n  return (\n    <LocalizationProvider\n      dateAdapter={AdapterDateFns}\n      locale={\n        getLocale(getAppStateItemOrAlternative<TSupportedLocales>(\"locale\", \"en_us\"))\n          .dateFnsLocale\n      }\n    >\n      {children}\n    </LocalizationProvider>\n  );\n};\nexport default DateLocalizationProvider;\n","import { createTheme } from \"@mui/material/styles\";\nimport { green, purple } from \"@mui/material/colors\";\nimport { zhCN } from \"@mui/material/locale\";\nimport { enUS } from \"@mui/material/locale\";\nimport { useApplicationUtilities } from \"../hooks\";\n\nexport const gabbyTheme = (localization = enUS) => {\n  return createTheme(\n    {\n      palette: {\n        // primary: {\n        //   main: purple[500],\n        // },\n        // secondary: {\n        //   main: green[500],\n        // },\n      },\n    },\n    localization\n  );\n};\n","import { GabbyThemeProvider } from \"./Provider\";\nexport default GabbyThemeProvider;\n","import React from \"react\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { gabbyTheme } from \"./gabbyTheme\";\nimport { useApplicationUtilities } from \"../hooks\";\ninterface IAppProviderParameters {\n  children?: React.ReactNode;\n}\n\nexport const GabbyThemeProvider = ({ children }: IAppProviderParameters) => {\n  const { getLocale } = useApplicationUtilities();\n  const materialLocale = getLocale();\n\n  return (\n    <ThemeProvider theme={gabbyTheme(materialLocale.materialThemeLocal)}>\n      {children}\n    </ThemeProvider>\n  );\n};\n","import React from \"react\";\nimport ApplicationUtilitiesProvider from \"./ApplicationUtilitiesProvider\";\nimport DateLocalizationProvider from \"./DateLocalizationProvider\";\nimport GabbyThemeProvider from \"./GabbyThemeProvider\";\ninterface IAppProviderParameters {\n  children?: React.ReactNode;\n}\n\nexport const AppContextProviders = ({ children }: IAppProviderParameters) => {\n  return (\n    <ApplicationUtilitiesProvider>\n      <GabbyThemeProvider>\n        <DateLocalizationProvider>{children}</DateLocalizationProvider>\n      </GabbyThemeProvider>\n    </ApplicationUtilitiesProvider>\n  );\n};\n","import * as React from \"react\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport { AppTitleBar } from \"./components/AppTitleBar\";\nimport { AppSideDrawer } from \"./components/AppSideDrawer\";\nimport { AppContextProviders } from \"../AppContextProviders\";\nimport { useTheme } from \"@mui/material/styles\";\ninterface Props {\n  children?: React.ReactNode;\n}\nexport function PageContentWrapper({ children }: Props) {\n  const [open, setOpen] = React.useState(true);\n  const theme = useTheme();\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <AppContextProviders>\n      <Box sx={{ display: \"flex\" }}>\n        <CssBaseline />\n        <AppTitleBar titleText=\"I18N Needed Here\" isOpen={open} toggleDrawer={toggleDrawer} />\n        <AppSideDrawer isOpen={open} toggleDrawer={toggleDrawer} />\n        <Box\n          component=\"main\"\n          sx={{\n            backgroundColor: theme.palette.grey[100],\n            // backgroundColor: (theme) =>\n            //   theme.palette.mode === \"light\"\n            //     ? theme.palette.grey[100]\n            //     : theme.palette.grey[900],\n            flexGrow: 1,\n            height: \"100vh\",\n            overflow: \"auto\",\n          }}\n        >\n          <Toolbar /> {/** Consumes space, keeps page layout sane, no other purpose */}\n          {children}\n          {/* <span>Blank Page</span> */}\n        </Box>\n      </Box>\n    </AppContextProviders>\n  );\n}\n","import { PageContentWrapper } from \"../Application\";\n\nexport const GabbyApp2 = (): JSX.Element => {\n  return (\n    <PageContentWrapper>\n      <span>Gabby App 2</span>\n    </PageContentWrapper>\n  );\n};\n","import { PageContentWrapper } from \"../Application\";\n\nexport const BlankPage = (): JSX.Element => {\n  return (\n    <PageContentWrapper>\n      <span>Blank Page</span>\n    </PageContentWrapper>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\n/* eslint-disable react/jsx-props-no-spreading */\nimport TextField from \"@mui/material/TextField\";\n\nimport { formatISO } from \"date-fns\";\nimport DatePicker from \"@mui/lab/DatePicker\";\nimport { useApplicationUtilities } from \"../../Application/AppContextProviders/hooks\";\n\nconst dummyIsValid = (value: unknown) => true;\n\nconst toMidnight = (date: Date) => {\n  const dateWithoutTime = date.toISOString().split(\"T\")[0];\n  return new Date(dateWithoutTime);\n};\ninterface Props {\n  id: string;\n  isValid?: (value: unknown) => boolean;\n  label: string;\n  name: string;\n  onChange: (value: string) => void; // we'll allow empty strings\n  value: string;\n}\nexport function AppConfigWidgetDate({\n  id,\n  isValid = dummyIsValid,\n  label,\n  name,\n  onChange,\n  value,\n}: Props): JSX.Element {\n  // const [locale, setLocale] = React.useState<keyof typeof maskMap>(\"en\");\n  const { getLocale } = useApplicationUtilities();\n  const appLocale = getLocale();\n\n  const handleOnChange = (newValue: Date | null) => {\n    // (newValue) => setValue(newValue)\n\n    if (newValue !== null) {\n      onChange(formatISO(toMidnight(newValue)));\n      // setValue(toMidnight(newValue));\n    } else {\n      // onChange(newValue);\n      onChange(\"\");\n      // setValue(newValue);\n    }\n  };\n  //    {/*<LocalizationProvider dateAdapter={AdapterDateFns} locale={appLocale.dateFnsLocale}>\n\n  return (\n    <DatePicker\n      label={label}\n      mask={appLocale.dateFormatMap}\n      value={value}\n      onChange={handleOnChange}\n      InputProps={{ id, name }}\n      renderInput={(params) => <TextField {...params} sx={{ width: \"100%\" }} />}\n    />\n  );\n}\n\nAppConfigWidgetDate.defaultProps = {\n  isValid: dummyIsValid,\n};\n","/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable react/jsx-props-no-spreading */\nimport * as React from \"react\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport * as locales from \"@mui/material/locale\";\n\ntype SupportedLocales = keyof typeof locales;\n\nexport default function AppConfigWidgetLocalizationTest() {\n  const [locale, setLocale] = React.useState<SupportedLocales>(\"zhCN\");\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      {/* <ThemeProvider theme={(outerTheme) => createTheme(outerTheme, locales[locale])}> */}\n      <Autocomplete\n        options={Object.keys(locales)}\n        getOptionLabel={(key) => `${key.substring(0, 2)}-${key.substring(2, 4)}`}\n        style={{ width: 300 }}\n        value={locale}\n        disableClearable\n        onChange={(event: any, newValue: string | null) => {\n          setLocale(newValue as SupportedLocales);\n        }}\n        renderInput={(params) => <TextField {...params} label=\"Locale\" fullWidth />}\n      />\n      <TablePagination\n        count={2000}\n        rowsPerPage={10}\n        page={1}\n        component=\"div\"\n        onPageChange={() => {}}\n      />\n      {/* </ThemeProvider> */}\n    </Box>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable import/prefer-default-export */\nimport React from \"react\";\n\nimport { useApplicationUtilities } from \"../../Application/AppContextProviders/hooks\";\nimport { AppConfigWidgetDate } from \"./AppConfigWidgetDate\";\nimport AppConfigWidgetLocalizationTest from \"./AppConfigWidgtLocalizationTest\";\n\nexport const AppConfigWidget = () => {\n  const { t, getAppConfigItem, setAppConfigItem } = useApplicationUtilities();\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAppConfigItem<string>(\"TEST_VALUE\", e.currentTarget.value);\n  };\n  return (\n    <>\n      <h4>App Config Widget &quot;{getAppConfigItem(\"TEST_VALUE\")}&quot;</h4>\n      <input onChange={handleOnChange} />\n      <button type=\"button\">Update</button>\n      <AppConfigWidgetDate\n        id=\"myDateWidget\"\n        isValid={(d: any) => true}\n        label=\"the Label\"\n        name=\"the-name\"\n        onChange={(d: any) => undefined}\n        value=\"2021-10-09T23:32:59\"\n      />\n      <AppConfigWidgetLocalizationTest />\n    </>\n  );\n};\n","import { PageContentWrapper } from \"../../Application/PageContentWrapper\";\nimport { AppConfigWidget } from \"./AppConfigWidget\";\nexport const WorkBenchPage = (): JSX.Element => {\n  return (\n    <PageContentWrapper>\n      <span>Work Bench</span>\n      <AppConfigWidget />\n    </PageContentWrapper>\n  );\n};\n","import * as React from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { GabbyApp2, BlankPage, WorkBenchPage } from \"../Pages\";\n\nconst GabbyApp3 = GabbyApp2;\nconst GabbyComponentsPage = GabbyApp2;\n\nconst Router = (): JSX.Element => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={GabbyApp3} />\n        <Route path=\"/workbench\" component={WorkBenchPage} />\n        <Route path=\"/gabby-components\" component={GabbyComponentsPage} />\n\n        <Route path=\"/blank-page\" component={BlankPage} />\n        <Route path=\"/gabby3\" component={GabbyApp2} />\n        {/* Not Found */}\n        <Route component={() => <Redirect to=\"/\" />} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\nexport default Router;\n","import Router from \"./Router\";\n// import { MainListItems, secondaryListItems } from \"../Application/Routes/listItems\";\nexport default Router;\n\n// export { MainListItems, secondaryListItems };\n","import Router from \"./Router\";\nexport default function App() {\n  return <Router />;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
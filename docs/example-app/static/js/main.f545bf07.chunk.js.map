{"version":3,"sources":["Application/i18n/locals.ts","Application/i18n/translations/index.ts","Application/i18n/index.ts","Application/i18n/i18nBuilder.ts","Application/PageContentWrapper/components/APP_UI_CONST.ts","Application/PageContentWrapper/components/AppTitleBarStyled.tsx","Application/GabbyToast/AlertContainer.tsx","Application/GabbyToast/GabbyToast.tsx","Application/AppContextProviders/ApplicationUtilitiesProvider/ApplicationUtilitiesProvider.tsx","Application/AppContextProviders/ApplicationUtilitiesProvider/index.ts","Application/AppContextProviders/hooks/useApplicationUtilities.ts","Application/PageContentWrapper/components/LanguageSwitcher.tsx","Application/PageContentWrapper/components/AppTitleBar.tsx","Application/PageContentWrapper/components/DrawerStyled.tsx","Application/PageContentWrapper/components/AppSideDrawer.tsx","Application/PageContentWrapper/PageContentWrapper.tsx","Application/custom-styles.ts","Router/common.ts","Router/NavListMain.tsx","Router/NavListSecondary.tsx","Application/AppContextProviders/ErrorContainer.tsx","Application/AppContextProviders/DateLocalizationProvider/index.ts","Application/AppContextProviders/DateLocalizationProvider/Provider.tsx","Application/AppContextProviders/GabbyThemeProvider/gabbyTheme.tsx","Application/AppContextProviders/GabbyThemeProvider/index.tsx","Application/AppContextProviders/GabbyThemeProvider/Provider.tsx","Application/AppContextProviders/index.tsx","Pages/ApplicationFeatures.tsx","Pages/BlankPage.tsx","Pages/HomePage.tsx","GabbyComponents/common/IconButtonRemove.tsx","GabbyComponents/ProjectionV2/projection-pill-components/AscDesIconButton.tsx","GabbyQueryProtocol/operator-labels.ts","GabbyQueryProtocol/misc.ts","GabbyComponents/ProjectionV2/projection-pill-components/EditableLabel.tsx","GabbyComponents/ProjectionV2/ProjectionInteractiveItemPill.tsx","GabbyComponents/ProjectionV2/ProjectionInteractive.tsx","GabbyComponents/PredicateFormulaEditor/input/NumberInput.tsx","GabbyComponents/common/ButtonsFinishCancelIcon.tsx","GabbyComponents/common/ButtonsFinishCancelText.tsx","GabbyComponents/PredicateFormulaEditor/input/StringInput.tsx","GabbyComponents/ProjectionV2/ProjectionItemEditor.tsx","GabbyComponents/common/PopoverContainer.tsx","GabbyComponents/ProjectionV2/ProjectionItemCreator.tsx","GabbyComponents/ProjectionV2/DemoProjectionInitialized.tsx","Application/ui-constants.ts","Pages/ProjectionDemoPage.tsx","GabbyComponents/common/IconButtonsAdd.tsx","GabbyComponents/common/OptionSwitch.tsx","GabbyComponents/common/experimental/ExperimentalDateInput.tsx","GabbyComponents/PredicateFormulaEditor/input/DateInput.tsx","GabbyComponents/PredicateFormulaEditor/input/SelectInputGeneric.tsx","GabbyComponents/PredicateFormulaEditor/InputMux.tsx","GabbyComponents/PredicateFormulaEditor/PredicateEditor.tsx","GabbyComponents/PredicateFormulaEditor/PopoverEditor.tsx","GabbyComponents/PredicateFormulaViewer/BranchView.tsx","GabbyComponents/common/IconButtonEdit.tsx","GabbyComponents/PredicateFormulaViewer/common-utilities.ts","GabbyComponents/PredicateFormulaViewer/LeafView.tsx","GabbyComponents/PredicateFormulaViewer/MuxView.tsx","GabbyComponents/PredicateFormulaViewer/PredicateFormulaViewer.tsx","Pages/PredicateTreeDemoPage.tsx","Router/index.ts","Router/Router.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["esUsDateLocale","enUsDateLocale","esMxDateLocale","esEsDateLocale","supportedLocaleDictionary","ar_ma","countryCode","countryNameLocal","countryNameEnglish","currencyCodeISO","currencySymbol","dateFnsLocale","arMaDateLocale","dateFormatMap","languageCode","languageDir","localeCode","materialThemeLocal","arEG","de_de","deDeDateLocale","deDE","en_gb","enGbDateLocale","elGR","en_us","enUS","es_es","esES","es_mx","es_us","ru_ru","ruRuDateLocale","ruRU","th_th","thThDateLocale","thTH","translations","ar","de","en","es","ru","th","i18nInit","initialLanguageCode","initialLanguage","i18n","use","initReactI18next","init","resources","translation","returnObjects","fallbackLng","debug","lng","interpolation","escapeValue","SUPPORTED_LOCALE_DICTIONARY","APP_UI_CONST","drawerWidth","AppTitleBarStyled","styled","MuiAppBar","shouldForwardProp","prop","theme","open","currentLocale","dir","useApplicationUtilities","getCurrentLocale","dirMargin","marginLeft","marginRight","console","log","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","width","enteringScreen","AlertContainer","message","title","severity","Alert","sx","backgroundColor","AlertTitle","GabbyToast","error","undefined","toast","info","success","warn","GabbyToastContainer","limit","closeOnClick","newestOnTop","pauseOnFocusLoss","position","hideProgressBar","ApplicationUtilitiesContext","React","createContext","initialState","initialProps","ApplicationUtilitiesProvider","initialLocaleCode","children","useTranslation","i18nT","t","useState","appState","setAppState","getAppStateItem","key","getCurrentLocaleCode","language","getLocale","locale","setCurrentLocale","changeLanguage","exportedFunctions","testUtilityResetState","getAppStateItemOrAlternative","alternative","getLanguage","setAppStateItem","value","_updateState","altText","exists","Provider","useContext","getAppConfigItem","setAppConfigItem","LanguageSwitcher","useTheme","FormControl","variant","m","minWidth","Select","labelId","id","onChange","event","target","localeSettings","htmlPage","document","querySelector","setAttribute","label","color","palette","grey","borderBottom","Object","entries","map","localeKey","localeSetting","MenuItem","AppTitleBar","isOpen","titleText","toggleDrawer","RtlToolBar","Toolbar","pr","IconButton","Badge","badgeContent","Typography","component","noWrap","flexGrow","edge","onClick","display","LtrToolBar","DrawerStyled","MuiDrawer","whiteSpace","boxSizing","overflowX","spacing","breakpoints","up","AppSideDrawer","alignItems","justifyContent","px","Divider","PageContentWrapper","setOpen","Box","CssBaseline","height","overflow","customStyles","longText","sectionBorder","backgroundLightGrey","affirmativeGreen","HOME_DIR","NavLinkStyled","NavLink","MyNavLink","to","Icon","text","pathname","useLocation","ListItem","selected","button","ListItemIcon","ListItemText","primary","NavListMain","List","DashboardIcon","LayersIcon","PeopleIcon","ListSubheader","inset","NavListSecondary","ErrorFallback","role","ErrorContainer","FallbackComponent","DateLocalizationProvider","LocalizationProvider","dateAdapter","AdapterDateFns","gabbyTheme","localization","createTheme","GabbyThemeProvider","materialLocale","ThemeProvider","AppContextProviders","ApplicationFeaturesPage","Paper","Button","BlankPage","PaperItem","typography","body2","padding","h3","secondary","HomePage","style","margin","Grid","container","item","xs","noop","IconButtonRemove","dense","size","mx","p","fontSize","AscDesIconButton","sortOrder","onSortOrderClick","Tooltip","placement","ArrowDropDown","HorizontalRule","ArrowDropUp","EN","$and","$anyOf","$empty","$eq","$gt","$gte","$isNull","$lt","$lte","$like","$oneOf","$nand","$nanyOf","$ne","$nor","$or","ES","TH","AR","SymbolsTypable","SymbolsEntities","String","fromCharCode","GABBY_EXAMPLE_JSON_BLUE_SKIES","LIB","LIB_EXAMPLE_JSON_BLUE_SKIES","PROJECTION","PROJECTION_EXAMPLE_JSON_BLUE_SKIES","LIB_CONSTS","PROJECTION_CONSTS","EditableLabel","labelText","isOpenForEdit","setIsOpenForEdit","Input","maxWidth","e","onBlur","name","useProjectionSubjects","ProjectionHooks","nextSortOrder","currentSortOrder","ProjectionInteractiveItemPill","projectionId","removeProjectionItem","getProjectedItem","updateProjectedItem","Chip","icon","newText","onDelete","deleteIcon","useProjectionUtilities","getListStyle","isDraggingOver","customStylesWithTheme","background","borderRadius","ProjectionInteractive","getColumnOrderedProjectionDictionary","onDragEnd","result","destination","source","index","reorderedKeyPosition","list","startIndex","endIndex","Array","from","splice","removed","reorder","keys","forEach","projectionKey","newColumnPosition","columnOrder","updateSubjectColumnPosition","droppableId","direction","provided","snapshot","ref","innerRef","flexWrap","droppableProps","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","placeholder","NumberInput","datatype","hasError","setHasError","TextField","inputProps","inputMode","pattern","type","inputValue","Number","isNaN","parseFloat","isNumeric","ButtonsFinishCancelIcon","onFinish","onCancel","ButtonsFinishCancelText","fullWidth","startIcon","StringInput","sortLabelText","ProjectionItemEditor","buttonStyle","initialProjectionItem","newProjectionItem","setNewProjectionItem","subjectionDictionary","getProjectableSubjectDictionary","projectableSubjectIds","getSubjectIds","handleSubjectSelectChange","child","subjectId","projectableSubject","getSubjectById","defaultLabel","handleFinishClick","SubjectSelectFormControl","marginTop","InputLabel","htmlFor","native","projectableId","idx","border","Stack","parseInt","PopoverContainer","onClickAway","parentEl","Popover","PaperProps","anchorEl","onClose","transformOrigin","horizontal","vertical","transitionDuration","defaultProps","layout","ProjectionItemCreator","addProjectionItem","projectionItem","makeDefaultProjectionItem","containerRef","useRef","handleFinish","updatedProjectionItem","Editor","float","current","PROJECTION_EXAMPLE_JSON","EXAMPLE_JSON_BLUE_SKIES","DemoProjectionInitialized","ProjectionEditorFactory","fromJson","projectableSubjectDictionaryJson","projectionItemsJson","projectionJson","uiConstants","projectionEditor","PredicateItemDefined","ProjectionDemoPageRaw","getProjectionAsJson","href","JSON","stringify","ProjectionDemoPage","IconButtonsAdd","OptionSwitch","operator","conjunctionLabel","disjunctionLabel","FormControlLabel","control","Switch","blue","green","labelPlacement","checked","iso8601LongRegex","noopIsValid","ExperimentalDateInput","isValid","DatePicker","mask","newValue","test","toISOString","formatISO","date","dateWithoutTime","split","Date","toMidnight","InputProps","renderInput","params","ExperimentalDateInputWithAppContext","props","DateInput","formatMask","MenuProps","maxHeight","ITEM_HEIGHT","getStyles","fontWeight","fontWeightMedium","SelectInputGeneric","isMultiple","options","uniqueControlId","multiple","handleChangeArray","handleChangeScalar","input","OutlinedInput","option","usePredicateTreeUtilities","PredicateFormulaHooks","InputMux","predicate","getSelectOptions","subject","handleDecimalChange","valueAsArray","optionList","isArray","controlButtons","noopTestSpyPredicateOnChange","predicateProperties","PredicateEditor","initialPredicate","testSpyPredicateOnChange","validator","Validators","ValidatePredicateAgainstOperator","subjectDictionary","operatorLabels","userMessage","setUserMessage","getSubject","selectedSubject","setSelectedSubject","predicateExpression","setPredicateExpression","_updatePredicateState","newPredicate","handleSelectedSubjectChange","validOperators","subjectProps","handleOperatorChange","validatorResponse","errorMessages","OperatorSelectFormControl","op","md","textAlign","pExpression","alignContent","main","PopoverEditor","useJunctionProperties","BranchView","predicateId","editorContainerRef","isOpenNewPredicateEditor","setIsOpenNewPredicateEditor","appendPredicate","getJunctionProperties","isRoot","removeCurrentPredicateJunction","setConjunction","setDisjunction","makeEmptyPredicate","bg","handleJunctionSwitch","handleRemovePredicateJunction","handleAddPredicateFinishClick","handleAddPredicateClick","handNewPredicateEditCancelClick","ControlButtons","PredicateEditorWrapper","IconButtonEdit","usePredicateProperties","LeafView","isOpenForNew","setIsOpenForNew","getPredicateLeafProperties","updateCurrentPredicate","removeCurrentPredicate","currentSubject","handleRemoveClick","handleFinishEdit","handleFinishNew","handelOpenForNewClick","PredicateStaticView","MuxView","numberOfChildren","childIndex","getChildrenIds","testIsBranchNode","childrenIds","setContainerWidth","offsetWidth","BranchingNode","sm","childId","length","SingleNode","PredicateFormulaViewer","rootPredicateId","isBranchNode","subjectDictionaryJson","predicateSubjectsDictionaryJson","predicateFormula","predicateTreeJson","predicateFormulaEditor","PredicateFormulaEditorFactory","PredicateTreeDemoPageRaw","getPredicateTreeAsJson","rootNodeId","elevation","marginBottom","PredicateTreeDemoPage","opLabels","opLabelsI18N","getOperatorLabels","Router","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"y2MAsCMA,EAAiBC,IACjBC,EAAiBC,IAcjBC,EAAwD,CAC5DC,MAAO,CACLC,YAAa,KACbC,iBAAkB,uCAClBC,mBAAoB,UACpBC,gBAAiB,MACjBC,eAAgB,kCAChBC,cAAeC,IACfC,cAAe,aACfC,aAAc,KACdC,YAAa,MACbC,WAAY,QACZC,mBAAoBC,KAEtBC,MAAO,CACLb,YAAa,KACbC,iBAAkB,UAClBC,mBAAoB,SACpBE,eAAgB,SAChBD,gBAAiB,KACjBE,cAAeS,IACfP,cAAe,aACfC,aAAc,KACdC,YAAa,MACbC,WAAY,QACZC,mBAAoBI,KAEtBC,MAAO,CACLhB,YAAa,KACbC,iBAAkB,UAClBC,mBAAoB,UACpBC,gBAAiB,MACjBC,eAAgB,OAChBC,cAAeY,IACfV,cAAe,aACfC,aAAc,KACdC,YAAa,MACbC,WAAY,QACZC,mBAAoBO,KAEtBC,MAAO,CACLnB,YAAa,KACbC,iBAAkB,gBAClBC,mBAAoB,gBACpBC,gBAAiB,MACjBC,eAAgB,IAChBC,cAAeV,IACfY,cAAe,aACfC,aAAc,KACdC,YAAa,MACbC,WAAY,QACZC,mBAAoBS,KAEtBC,MAAO,CACLrB,YAAa,KACbC,iBAAkB,YAClBC,mBAAoB,QACpBC,gBAAiB,MACjBC,eAAgB,SAChBC,cAAeR,IACfU,cAAe,WACfC,aAAc,KACdC,YAAa,MACbC,WAAY,QACZC,mBAAoBW,KAEtBC,MAAO,CACLvB,YAAa,KACbC,iBAAkB,YAClBC,mBAAoB,SACpBC,gBAAiB,MACjBC,eAAgB,OAChBC,cAAeT,EACfW,cAAe,aACfC,aAAc,KACdC,YAAa,MACbC,WAAY,QACZC,mBAAoBW,KAEtBE,MAAO,CACLxB,YAAa,KACbC,iBAAkB,iBAClBC,mBAAoB,gBACpBC,gBAAiB,MACjBC,eAAgB,IAChBC,cAAeX,EACfa,cAAe,aACfC,aAAc,KACdC,YAAa,MACbC,WAAY,QACZC,mBAAoBW,KAEtBG,MAAO,CACLzB,YAAa,KACbC,iBAAkB,uCAClBC,mBAAoB,SACpBC,gBAAiB,MACjBC,eAAgB,SAChBC,cAAeqB,IACfnB,cAAe,aACfC,aAAc,KACdC,YAAa,MACbC,WAAY,QACZC,mBAAoBgB,KAEtBC,MAAO,CACL5B,YAAa,KACbC,iBAAkB,yDAClBC,mBAAoB,WACpBC,gBAAiB,MACjBC,eAAgB,SAChBC,cAAewB,IACftB,cAAe,aACfC,aAAc,KACdC,YAAa,MACbC,WAAY,QACZC,mBAAoBmB,M,4GCzJXC,EAAgD,CAC3DC,KACAjC,QACAkC,KACApB,MAAOoB,EACPC,KACAlB,QACAG,QACAgB,KACAd,QACAE,QACAC,QACAY,KACAX,MAAOW,EACPC,KACAT,MAAOS,G,iBCzBHC,EAAW,SAACC,GAChB,OCDAR,EDCmBA,ECAnBS,EDAiCD,OCEjCE,IACGC,IAAIC,KAEJC,KAAK,CACJC,UAAW,CACTX,GAAI,CACFY,YAAaf,EAAaG,IAE5BF,GAAI,CACFc,YAAaf,EAAaC,IAE5BjC,MAAO,CACL+C,YAAaf,EAAahC,OAE5BkC,GAAI,CACFa,YAAaf,EAAaE,IAE5BjB,MAAO,CACL8B,YAAaf,EAAaf,OAE5BG,MAAO,CACL2B,YAAaf,EAAaZ,OAE5BgB,GAAI,CACFW,YAAaf,EAAaI,IAE5Bd,MAAO,CACLyB,YAAaf,EAAaV,OAE5BE,MAAO,CACLuB,YAAaf,EAAaR,OAE5BC,MAAO,CACLsB,YAAaf,EAAaP,OAE5BY,GAAI,CACFU,YAAaf,EAAaK,IAE5BC,GAAI,CACFS,YAAaf,EAAaM,KAI9BU,eAAe,EACfC,YAAa,QACbC,OAAO,EACPC,IAAKV,EACLW,cAAe,CACbC,aAAa,KApDM,IACzBrB,EACAS,GDEIa,EAA8BvD,E,qIERvBwD,GACO,ICGdC,GAAcD,GAMPE,GAAoBC,aAAOC,KAAW,CACjDC,kBAAmB,SAACC,GAAD,MAAmB,SAATA,IADEH,EAEjB,YAA2B,IAAxBI,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,KAClBC,GADkC,EAAVC,IACRC,KAA0BC,oBAE1CC,EAC0B,QAA9BJ,EAActD,YACV,CAAE2D,WAAYb,IACd,CAAEc,YAAad,IAErB,OADAe,QAAQC,IAAI,OAAQR,EAActD,aAC3B,aACL+D,OAAQX,EAAMW,OAAOC,OAAS,EAC9BC,WAAYb,EAAMc,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASC,iBAEnClB,GAAI,2BACHK,GADG,IAINc,MAAM,eAAD,OAAiB1B,GAAjB,OACLmB,WAAYb,EAAMc,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASG,uB,gECzBvCC,GAAiB,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,QAA6D,IAApDC,aAAoD,MAA5C,OAA4C,EAApCC,EAAoC,EAApCA,SACjD,OACE,gBAACC,GAAA,EAAD,CAAOD,SAAUA,EAAUE,GAAI,CAAEC,gBAAiB,yBAAlD,UACE,eAACC,GAAA,EAAD,UAAaL,IACZD,EAFH,WAEc,wDCcZO,GAAa,CACjBC,MAAO,YAAsE,IAAnER,EAAkE,EAAlEA,QAAkE,IAAzDC,aAAyD,MAAjD,QAAiD,EAAxCpC,EAAwC,EAAxCA,WACpB4C,IAAV5C,GACFqB,QAAQN,IAAI,CAAE4B,MAAO3C,IAEvB6C,SAAMF,MAAM,eAAC,GAAD,CAAgBR,QAASA,EAASC,MAAOA,EAAOC,SAAS,YAGvES,KAAM,YAAyD,IAAtDX,EAAqD,EAArDA,QAAqD,IAA5CC,aAA4C,MAApC,OAAoC,EAC5DS,SAAMC,KAAK,eAAC,GAAD,CAAgBX,QAASA,EAASC,MAAOA,EAAOC,SAAS,WAGtEU,QAAS,YAA4D,IAAzDZ,EAAwD,EAAxDA,QAAwD,IAA/CC,aAA+C,MAAvC,UAAuC,EAClES,SAAME,QAAQ,eAAC,GAAD,CAAgBZ,QAASA,EAASC,MAAOA,EAAOC,SAAS,cAGzEW,KAAM,YAA4D,IAAzDb,EAAwD,EAAxDA,QAAwD,IAA/CC,aAA+C,MAAvC,UAAuC,EAC/DS,SAAMG,KAAK,eAAC,GAAD,CAAgBb,QAASA,EAASC,MAAOA,EAAOC,SAAS,eAIlEY,GAAsB,WAC1B,IAAMnC,EAAgBE,KAA0BC,mBAEhD,OACE,eAAC,kBAAD,CACEiC,MAAO,EACPC,cAAY,EACZC,aAAW,EACXC,kBAAgB,EAChBC,SAAwC,QAA9BxC,EAActD,YAAwB,WAAa,YAC7D+F,iBAAiB,KCzCVC,GACXC,IAAMC,cAA+C,MAEjDC,GAAe,GAYfC,GAA6B,QAEnCvE,EAASuE,IAET,IC9BeC,GD8BsB,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,kBAAmBC,EAAmC,EAAnCA,SACzD,EAA2BC,eAAhBC,EAAX,EAAQC,EAAU1E,EAAlB,EAAkBA,KAGlB,EAAgCiE,IAAMU,SAASR,IAA/C,mBAAOS,EAAP,KAAiBC,EAAjB,KAYMC,EAAkB,SAAKC,GAC3B,OAAOH,EAASG,IAOZC,EAAuB,WAC3B,OAAOhF,EAAKiF,UAORC,EAAY,SAACC,GACjB,YAAe/B,IAAX+B,QAA8D/B,IAAtC/F,EAA0B8H,GAC7C9H,EAA0B8H,QAOmC/B,IAAlE/F,EAA0B2C,EAAKiF,UAC1B5H,EAA0B2C,EAAKiF,UAGjC5H,EAAyB,OAO5B+H,EAAmB,SAACnH,GACxB+B,EAAKqF,eAAepH,SAQImF,IAAtBkB,GACFc,EAAiBd,GAGnB,IAAMgB,EAAoB,CACxBC,sBA3D4B,WAC5B1F,EAASuE,IACTS,EAAYV,KA0DZkB,eAAgB,SAACtH,GACfiC,EAAKqF,eAAetH,IAGtB+G,kBACAU,6BApDmC,SAAKT,EAAaU,GACrD,OAAOX,EAAgBC,IAAQU,GAoD/BC,YAAa,kBAAM1F,EAAKiF,UACxBxD,iBA9CuB,WACvB,OAAOyD,EAAUF,MA8CjBA,uBACAE,YACAS,gBA7BsB,SAAKZ,EAAaa,IApCrB,SAAKb,EAAaa,GACrCf,EAAY,2BAAKD,GAAN,gBAAsBG,EAAMa,KAoCvCC,CAAgBd,EAAKa,IA6BrBR,mBACAV,EAvBQ,SAACK,EAAae,GACtB,OAAO9F,EAAK+F,OAAOhB,GAAON,EAAMM,GAAOe,GAAWf,GAuBlD1B,MAAOH,IAGT,OACE,gBAACc,GAA4BgC,SAA7B,CAAsCJ,MAAON,EAA7C,UACE,eAAC,GAAD,IACCf,MEpHM/C,GAA0B,WACrC,MAUIyC,IAAMgC,WAAWjC,IAErB,MAAO,CAELkC,iBAdF,EAEEpB,gBAcArD,iBAhBF,EAGEA,iBAcAuD,qBAjBF,EAIEA,qBAcAE,UAlBF,EAKEA,UAcAiB,iBAnBF,EAMER,gBAeAP,iBArBF,EAOEA,iBAeAV,EAtBF,EAQEA,EAeArB,MAvBF,EASEA,Q,uCCNS+C,GAAmB,WAC9B,MAAiE5E,KAAzD4D,EAAR,EAAQA,iBAAkBJ,EAA1B,EAA0BA,qBAAsBE,EAAhD,EAAgDA,UAAWR,EAA3D,EAA2DA,EACrDtD,EAAQiF,eAad,OACE,+BACE,eAACC,GAAA,EAAD,CAAaC,QAAQ,WAAWxD,GAAI,CAAEyD,EAAG,EAAGC,SAAU,KAAtD,SAEE,eAACC,GAAA,EAAD,CACEC,QAAQ,oCACRC,GAAG,8BACHhB,MAAOZ,IACP6B,SApBa,SAACC,GACpB,IAAM7I,EAAa6I,EAAMC,OAAOnB,MAC1BoB,EAAiB9B,EAAUjH,GACjCmH,EAAiB0B,EAAMC,OAAOnB,OAE9B,IAAMqB,EAAWC,SAASC,cAAc,QACvB,OAAbF,IACFA,EAASG,aAAa,MAAOJ,EAAehJ,aAC5CiJ,EAASG,aAAa,OAAQJ,EAAejJ,gBAazCsJ,MAAO3C,EAAE,YACT3B,GAAI,CAAEuE,MAAOlG,EAAMmG,QAAQC,KAAK,KAAMC,aAAc,mBANtD,SAQGC,OAAOC,QAAQ/G,GAA6BgH,KAAI,YAAiC,IAAD,mBAA9BC,EAA8B,KAAnBC,EAAmB,KAE7E,OACE,eAACC,GAAA,EAAD,CAAUnC,MAAOiC,EAAjB,SACGC,EAActK,kBADgBqK,aCzBpCG,GAAc,SAAC,GAIM,IAHhCC,EAG+B,EAH/BA,OACAC,EAE+B,EAF/BA,UACAC,EAC+B,EAD/BA,aAEA,EAA2C3G,KAAnCkD,EAAR,EAAQA,EACFpD,GADN,EAAW4D,WACWzD,EADtB,EAAsBA,qBAEhB2G,EAAa,WACjB,OACE,gBAACC,EAAA,EAAD,CACEtF,GAAI,CACFuF,GAAI,QAFR,UAKE,eAACC,GAAA,EAAD,CAAYjB,MAAM,UAAlB,SACE,eAACkB,GAAA,EAAD,CAAOC,aAAc,EAAGnB,MAAM,YAA9B,SACE,eAAC,KAAD,QAGJ,gBAACoB,GAAA,EAAD,CAAYC,UAAU,KAAKpC,QAAQ,KAAKe,MAAM,UAAUsB,QAAM,EAAC7F,GAAI,CAAE8F,SAAU,GAA/E,UACGX,EADH,IACc,wBACXxD,EAAE,sBACH,2BAEF,eAAC,GAAD,IACA,eAAC6D,GAAA,EAAD,CACEO,KAAK,QACLxB,MAAM,UACN,aAAW,cACXyB,QAASZ,EACTpF,GAAE,aACApB,WAAY,QACRsG,GAAU,CAAEe,QAAS,SAP7B,SAUE,eAAC,KAAD,UAMFC,EAAa,WACjB,OACE,gBAACZ,EAAA,EAAD,CACEtF,GAAI,CACFuF,GAAI,QAFR,UAKE,eAACC,GAAA,EAAD,CACEO,KAAK,QACLxB,MAAM,UACN,aAAW,cACXyB,QAASZ,EACTpF,GAAE,aACAnB,YAAa,QACTqG,GAAU,CAAEe,QAAS,SAP7B,SAUE,eAAC,KAAD,MAEF,gBAACN,GAAA,EAAD,CAAYC,UAAU,KAAKpC,QAAQ,KAAKe,MAAM,UAAUsB,QAAM,EAAC7F,GAAI,CAAE8F,SAAU,GAA/E,UACGX,EADH,IACc,wBACXxD,EAAE,sBACH,2BAEF,eAAC,GAAD,IACA,eAAC6D,GAAA,EAAD,CAAYjB,MAAM,UAAlB,SACE,eAACkB,GAAA,EAAD,CAAOC,aAAc,EAAGnB,MAAM,YAA9B,SACE,eAAC,KAAD,YAOV,OACE,gBAACvG,GAAD,CAAmBM,KAAM4G,EAAQ1G,IAAI,MAArC,UACiC,QAA9BD,EAActD,aAAyB,eAACiL,EAAD,IACT,QAA9B3H,EAActD,aAAyB,eAACoK,EAAD,Q,yCCxFxCtH,GAAcD,GAEPqI,GAAelI,aAAOmI,KAAW,CAC5CjI,kBAAmB,SAACC,GAAD,MAAmB,SAATA,IADHH,EAEzB,gBAAGI,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,MAAsB,CACvB,qBAAqB,aACnByC,SAAU,WACVsF,WAAY,SACZ5G,MAAO1B,GACPmB,WAAYb,EAAMc,YAAYC,OAAO,QAAS,CAC5CC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASG,iBAEvC4G,UAAW,eACNhI,GAAD,cACFiI,UAAW,SACXrH,WAAYb,EAAMc,YAAYC,OAAO,QAAS,CAC5CC,OAAQhB,EAAMc,YAAYE,OAAOC,MACjCC,SAAUlB,EAAMc,YAAYI,SAASC,gBAEvCC,MAAOpB,EAAMmI,QAAQ,IACpBnI,EAAMoI,YAAYC,GAAG,MAAQ,CAC5BjH,MAAOpB,EAAMmI,QAAQ,UCbhBG,GAAgB,SAAC,GAAqC,IAAnCzB,EAAkC,EAAlCA,OAAQE,EAA0B,EAA1BA,aACtC,OACE,gBAACe,GAAD,CAAc3C,QAAQ,YAAYlF,KAAM4G,EAAxC,UACE,eAACI,EAAA,EAAD,CACEtF,GAAI,CACFiG,QAAS,OACTW,WAAY,SACZC,eAAgB,WAChBC,GAAI,CAAC,IALT,SAQE,eAACtB,GAAA,EAAD,CAAY,aAAW,eAAeQ,QAASZ,EAA/C,SACE,eAAC,KAAD,QAGJ,eAAC2B,GAAA,EAAD,IACA,eAAC,GAAD,IACA,eAACA,GAAA,EAAD,IACA,eAAC,GAAD,QCtBC,SAASC,GAAT,GAAkD,IAApBxF,EAAmB,EAAnBA,SACnC,EAAwBN,YAAe,GAAvC,mBAAO5C,EAAP,KAAa2I,EAAb,KACM5I,EAAQiF,eACR8B,EAAe,WACnB6B,GAAS3I,IAGX,OACE,gBAAC4I,EAAA,EAAD,CAAKlH,GAAI,CAAEiG,QAAS,QAApB,UACE,eAACkB,EAAA,EAAD,IACA,eAAC,GAAD,CAAahC,UAAU,mBAAmBD,OAAQ5G,EAAM8G,aAAcA,IACtE,eAAC,GAAD,CAAeF,OAAQ5G,EAAM8G,aAAcA,IAC3C,gBAAC8B,EAAA,EAAD,CACEtB,UAAU,OACV5F,GAAI,CACFC,gBAAiB5B,EAAMmG,QAAQC,KAAK,KAKpCqB,SAAU,EACVsB,OAAQ,QACRC,SAAU,QAVd,UAaE,eAAC/B,EAAA,EAAD,IAbF,IAcG9D,QClCF,IAAM8F,GAAe,CAC1BC,SAAU,qBACVC,cAAe,qBACfC,oBAAqB,0BACrBC,iBAAkB,yB,mBCNPC,GAC6B,yCC2BpCC,GAAgB3J,aAAO4J,KAAP5J,EAA+B,cAAGI,MAAH,MAAgB,CAEnEkG,MAAO+C,GAAaC,aAOhBO,GAAY,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,GAAIC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,KACrBC,EAAaC,eAAbD,SAMR,OACE,gBAACE,EAAA,EAAD,CACEC,SALKN,IAAOG,EAMZtC,UAAWgC,GACXG,GAAIA,EACJO,QAAM,EAJR,UAOE,eAACC,EAAA,EAAD,UACE,eAACP,EAAD,MAEF,eAACQ,EAAA,EAAD,CAAcC,QAAO,UAAKR,SAKnBS,GAAc,WACzB,IAAQ/G,EAAMlD,KAANkD,EACR,OACE,gBAACgH,EAAA,EAAD,WACE,eAAC,GAAD,CAAWZ,GAAE,UAAKJ,IAAYK,KAAMY,IAAeX,KAAMtG,EAAE,UAC3D,eAAC,GAAD,CACEoG,GAAE,UAAKJ,GAAL,kBACFK,KAAMa,IACNZ,KAAMtG,EAAE,4BAOV,eAAC,GAAD,CACEoG,GAAE,UAAKJ,GAAL,mBACFK,KAAMa,IACNZ,KAAMtG,EAAE,2BAEV,eAAC,GAAD,CACEoG,GAAE,UAAKJ,GAAL,wBACFK,KAAMY,IACNX,KAAMtG,EAAE,0BAEV,eAAC,GAAD,CAAWoG,GAAE,UAAKJ,GAAL,cAA2BK,KAAMc,IAAYb,KAAMtG,EAAE,gBAElE,eAACoH,EAAA,EAAD,CAAeC,OAAK,EAApB,SAAsBrH,EAAE,qBAExB,gBAACyG,EAAA,EAAD,CAAUE,QAAM,EAAhB,UACE,eAACC,EAAA,EAAD,UACE,eAAC,IAAD,MAEF,eAACC,EAAA,EAAD,CAAcC,QAAS9G,EAAE,kBAE3B,gBAACyG,EAAA,EAAD,CAAUE,QAAM,EAAhB,UACE,eAACC,EAAA,EAAD,UACE,eAAC,IAAD,MAEF,eAACC,EAAA,EAAD,CAAcC,QAAS9G,EAAE,gBAE3B,gBAACyG,EAAA,EAAD,CAAUE,QAAM,EAAhB,UACE,eAACC,EAAA,EAAD,UACE,eAAC,IAAD,MAEF,eAACC,EAAA,EAAD,CAAcC,QAAS9G,EAAE,yB,0CC9FpBsH,GAAmB,WAC9B,IAAQtH,EAAMlD,KAANkD,EAER,OACE,gBAACgH,EAAA,EAAD,WACE,eAACI,EAAA,EAAD,CAAeC,OAAK,EAApB,SAAsBrH,EAAE,mBACxB,gBAACyG,EAAA,EAAD,CAAUE,QAAM,EAAhB,UACE,eAACC,EAAA,EAAD,UACE,eAAC,KAAD,MAEF,eAACC,EAAA,EAAD,CAAcC,QAAS9G,EAAE,eAG3B,gBAACyG,EAAA,EAAD,CAAUE,QAAM,EAAhB,UACE,eAACC,EAAA,EAAD,UACE,eAAC,KAAD,MAEF,eAACC,EAAA,EAAD,CAAcC,QAAS9G,EAAE,sBAE3B,gBAACyG,EAAA,EAAD,CAAUE,QAAM,EAAhB,UACE,eAACC,EAAA,EAAD,UACE,eAAC,KAAD,MAEF,eAACC,EAAA,EAAD,CAAcC,QAAS9G,EAAE,qBAE3B,gBAACyG,EAAA,EAAD,CAAUE,QAAM,EAAhB,UACE,eAACC,EAAA,EAAD,UACE,eAAC,KAAD,MAEF,eAACC,EAAA,EAAD,CAAcC,QAAS9G,EAAE,0B,UCrCjC,SAASuH,GAAT,GAAqD,IAA5B9I,EAA2B,EAA3BA,MACvB,OACE,uBAAK+I,KAAK,QAAV,UACE,uDACA,+BAAM/I,EAAMR,aAKX,IAAMwJ,GAAiB,SAAC,GAA2C,IAAzC5H,EAAwC,EAAxCA,SAC/B,OAAO,eAAC,iBAAD,CAAe6H,kBAAmBH,GAAlC,SAAkD1H,K,oBCX5C8H,GCSkB,SAAC,GAAsC,IAApC9H,EAAmC,EAAnCA,SAC1B9C,EAAqBwC,IAAMgC,WACjCjC,IADMvC,iBAIR,OACE,eAAC6K,GAAA,EAAD,CACEC,YAAaC,KACbrH,OAAQ1D,IAAmB7D,cAF7B,SAIG2G,K,oBCfMkI,GAAa,WAA0B,IAAzBC,EAAwB,uDAAT/N,IACxC,OAAOgO,aACL,CACEpF,QAAS,IASXmF,ICjBWE,GCOmB,SAAC,GAA0C,IAAxCrI,EAAuC,EAAvCA,SAE7BsI,GAAiB3H,EADD1D,KAAd0D,aAGR,OACE,eAAC4H,GAAA,EAAD,CAAe1L,MAAOqL,GAAWI,EAAe3O,oBAAhD,SACGqG,KCAMwI,GAAsB,SAAC,GAGL,IAF7BzI,EAE4B,EAF5BA,kBACAC,EAC4B,EAD5BA,SAEA,OACE,gBAAC,GAAD,WACG,IAED,eAAC,GAAD,CAA8BD,kBAAmBA,EAAjD,SACE,eAAC,GAAD,UACE,eAAC,GAAD,UAA2BC,Y,oBClBxByI,GAA0B,WACrC,IAAQ3J,EAAU7B,KAAV6B,MAMR,OACE,gBAAC0G,GAAD,WACE,gBAACkD,GAAA,EAAD,CAAOlK,GAAI,CAAEyD,EAAG,QAAhB,wIAGE,gCACE,uFACA,kDACiB,eAAC0G,GAAA,EAAD,CAAQnE,QAZR,WACvB1F,EAAMC,KAAK,CAAEX,QAAS,0BAA2BC,MAAO,sBAWjC,wBADjB,aAKJ,oDCvBOuK,GAAY,WACvB,OACE,eAACpD,GAAD,UACE,kD,UCAAqD,GAAYpM,aAAOiM,KAAPjM,EAAc,gBAAGI,EAAH,EAAGA,MAAH,mBAAC,eAC5BA,EAAMiM,WAAWC,OADU,IAE9BC,QAASnM,EAAMmI,QAAQ,GAEvBiE,GAAI,CAAElG,MAAO+C,GAAaC,UAI1BhD,MAAOlG,EAAMmG,QAAQyD,KAAKyC,eAGfC,GAAW,WACtB,OACE,eAAC3D,GAAD,UACE,sBAAK4D,MAAO,CAAEC,OAAQ,QAAtB,SACE,gBAACC,GAAA,EAAD,CAAMC,WAAS,EAACvE,QAAS,EAAzB,UACE,eAACsE,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACZ,GAAD,UACE,qCACE,gDACA,4DAIN,eAACS,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACf,GAAA,EAAD,UACE,qCACE,mDACA,oE,kDC3BVgB,GAAO,aAKAC,GAAmB,SAAC,GAA8C,IAAD,IAA3CC,aAA2C,aAA5BpF,eAA4B,MAAlBkF,GAAkB,EAC5E,OACE,eAAC1F,GAAA,EAAD,CACE6F,KAAK,QACLrL,GAAIoL,EAAQ,CAAEE,GAAI,MAAOC,EAAG,OAAU,GACtChH,MAAM,QACNyB,QAASA,EAJX,SAME,eAAC,KAAD,CAAYwF,SAAS,a,wCCTdC,GAAmB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,iBAC5C,OACE,qCACE,eAACC,GAAA,EAAD,CAAS/L,MAAM,gBAAgBgM,UAAU,SAAzC,SACE,gBAACrG,GAAA,EAAD,CAAY6F,KAAK,QAAQrF,QAAS2F,EAAlC,UACGD,EAAY,GAAK,eAACI,GAAA,EAAD,IACH,IAAdJ,GAAmB,eAACK,GAAA,EAAD,IACnBL,EAAY,GAAK,eAACM,GAAA,EAAD,Y,kBCRtBC,GAA+B,CACnCC,KAAM,eACNC,OAAQ,SACRC,OAAQ,WACRC,IAAK,SACLC,IAAK,eACLC,KAAM,qBACNC,QAAS,UACTC,IAAK,YACLC,KAAM,kBACNC,MAAO,WACPC,OAAQ,SACRC,MAAO,UACPC,QAAS,UACTC,IAAK,YACLC,KAAM,SACNC,IAAK,gBAEDC,GAA+B,CACnChB,KAAM,cACNC,OAAQ,gBACRC,OAAQ,WACRC,IAAK,aACLC,IAAK,YACLC,KAAM,kBACNC,QAAS,UACTC,IAAK,YACLC,KAAM,kBACNC,MAAO,WACPC,OAAQ,SACRC,MAAO,UACPC,QAAS,UACTC,IAAK,YACLC,KAAM,SACNC,IAAK,uBAGDE,GAA+B,CACnCjB,KAAM,+DACNC,OAAQ,iFACRC,OAAQ,WACRC,IAAK,6CACLC,IAAK,6CACLC,KAAM,uFACNC,QAAS,UACTC,IAAK,mDACLC,KAAM,6FACNC,MAAO,eACPC,OAAQ,6CACRC,MAAO,UACPC,QAAS,UACTC,IAAK,YACLC,KAAM,SACNC,IAAK,uEAEDG,GAA+B,CACnClB,KAAM,kCACNC,OAAQ,4BACRC,OAAQ,WACRC,IAAK,iCACLC,IAAK,wCACLC,KAAM,uEACNC,QAAS,UACTC,IAAK,kCACLC,KAAM,iEACNC,MAAO,oDACPC,OAAQ,wCACRC,MAAO,UACPC,QAAS,UACTC,IAAK,YACLC,KAAM,SAENC,IAAK,yCAGDI,GAA2C,CAC/CnB,KAAM,MACNC,OAAQ,SACRC,OAAQ,WACRC,IAAK,IACLC,IAAK,IACLC,KAAM,KACNC,QAAS,UACTC,IAAK,IACLC,KAAM,KACNC,MAAO,KACPC,OAAQ,SACRC,MAAO,UACPC,QAAS,UACTC,IAAK,YACLC,KAAM,SAENC,IAAK,MAEDK,GAA4C,CAEhDnB,OAAQoB,OAAOC,aAAa,MAC5BpB,OAAQ,WAERC,IAAK,IACLC,IAAK,IACLC,KAAMgB,OAAOC,aAAa,MAC1BhB,QAAS,UACTC,IAAK,IACLC,KAAMa,OAAOC,aAAa,MAC1Bb,MAAOY,OAAOC,aAAa,MAC3BZ,OAAQW,OAAOC,aAAa,MAC5BtB,KAAMqB,OAAOC,aAAa,MAC1BX,MAAO,UACPC,QAAS,UACTC,IAAK,YACLC,KAAM,SACNC,IAAKM,OAAOC,aAAa,OC1GrBC,GAAgC,CACpCC,IAAKC,2BACLC,WAAYC,4B,IAIPC,UACOC,U,QCbDC,GAAgB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWnK,EAAsB,EAAtBA,SACzC,EAA0ClC,oBAAS,GAAnD,mBAAOsM,EAAP,KAAsBC,EAAtB,KAaA,OACE,wCACID,GACA,eAACvI,GAAA,EAAD,UACE,uBAAMK,QAZa,WACzBmI,GAAiB,IAWX,SAAoCF,MAIvCC,GACC,eAACE,GAAA,EAAD,CACEpO,GAAI,CAAEqO,SAAU,QAChBvK,SAvBiB,SAACwK,GACxBxK,EAASwK,EAAEtK,OAAOnB,QAuBZ0L,OAhBoB,WAC1BJ,GAAiB,IAgBXtK,GAAG,0BACH2K,KAAK,0BACL3L,MAAOoL,QC9BTQ,GAA0BC,0BAA1BD,sBACFE,GAAgB,SAACC,GACrB,OAAQA,GAON,QACE,OAAO,EALT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAQ,IASDC,GAAgC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,aAEtCC,EAAyBN,KAAzBM,qBACR,EAAkDN,KAA1CO,EAAR,EAAQA,iBAAkBC,EAA1B,EAA0BA,oBAoB1B,OACE,eAACC,GAAA,EAAD,CACEC,KACE,eAAC,GAAD,CACExD,iBAlBsB,WAC5BsD,EAAoBH,EAAD,YAAC,eACfE,EAAiBF,IADH,IAEjBpD,UAAWiD,GAAcK,EAAiBF,GAAcpD,eAgBpDA,UAAWsD,EAAiBF,GAAcpD,YAG9CpH,MACE,eAAC,GAAD,CACE2J,UAAWe,EAAiBF,GAAcxK,MAC1CR,SAlBkB,SAACsL,GACzBH,EAAoBH,EAAD,YAAC,eACfE,EAAiBF,IADH,IAEjBxK,MAAO8K,QAkBPC,SAAU,kBAAMN,EAAqBD,IACrCQ,WAAY,eAAC,GAAD,CAAkBtJ,QAAS,kBAAM+I,EAAqBD,MAClEtL,QAAQ,WACRe,MAAM,UAENvE,GAAI,CAAEC,gBAAiB,Y,mBCnDrBsP,GAAkDb,0BAAlDa,uBAAwBd,GAA0BC,0BAA1BD,sBAc1Be,GAAe,SAACC,EAAyBpR,GAC7C,IAAMiJ,EpBtB6B,SAACjJ,GACpC,OAAO,2BACFiJ,IACA,CACDG,oBAAqBpJ,EAAMmG,QAAQC,KAAK,OoBkBvBiL,CAAsBrR,GAE3C,MAAO,CAELsR,WAAYF,EAAiB,YAAH,UAAoBnI,EAAaG,qBAG3DmI,aAAc,MACd3J,QAAS,OACTuE,QAZS,EAaTnD,SAAU,SAmBDwI,GAAwB,WACnC,IAAMxR,EAAQiF,eACNwM,EAAyCP,KAAzCO,qCACAb,EAAwBR,KAAxBQ,oBA2BR,OACE,eAAC,KAAD,CAAiBc,UArBS,SAACC,GAC3B,GAAKA,EAAOC,aAIRD,EAAOE,OAAOC,QAAUH,EAAOC,YAAYE,MAA/C,CAIA,IAAMC,EA3DM,SAACC,EAAgBC,EAAoBC,GACnD,IAAMP,EAASQ,MAAMC,KAAKJ,GAC1B,EAAkBL,EAAOU,OAAOJ,EAAY,GAArCK,EAAP,oBAGA,OAFAX,EAAOU,OAAOH,EAAU,EAAGI,GAEpBX,EAsDwBY,CAC3BjM,OAAOkM,KAAKf,KACZE,EAAOE,OAAOC,MACdH,EAAOC,YAAYE,OAGrBC,EAAqBU,SAAQ,SAACC,EAAeZ,IApBX,SAACY,EAAuBC,GAE1D/B,EAAoB8B,EAAe,CAAEE,YAAaD,IAmBhDE,CAA4BH,EAAeZ,QAK7C,SACE,eAAC,KAAD,CAAWgB,YAAY,aAAaC,UAAU,aAA9C,SACG,SAACC,EAAUC,GAAX,OACC,+CACEC,IAAKF,EAASG,SACd5G,MAAK,2BACA4E,GAAa8B,EAAS7B,eAAgBpR,IACtC,CAAEoT,SAAU,UAGbJ,EAASK,gBAPf,cASG/M,OAAOC,QAAQkL,KAAwCjL,KACtD,WAA6BsL,GAA7B,uBAAErB,EAAF,iBACE,eAAC,KAAD,CAA8B6C,YAAa7C,EAAcqB,MAAOA,EAAhE,SACG,SAACkB,EAAUC,GAAX,OACC,0DACEC,IAAKF,EAASG,UACVH,EAASO,gBACTP,EAASQ,iBAHf,IAIEjH,OAAoB0G,EAASQ,WAhEjDC,EAgE6DV,EAASO,eAAehH,MAlElE,aAKnBoH,WAAY,OACZnH,OAAO,GAAD,OAvBK,EAuBL,cAvBK,EAuBL,WAMHkH,IAkDe,SAME,eAAC,GAAD,CAA+BjD,aAAcA,OApE9C,IAEnBiD,IA0D8BjD,MAenBuC,EAASY,sB,oBCpGTC,GAAc,SAAC,GAOD,EANzBC,SAM0B,IAL1BtO,EAKyB,EALzBA,GACAS,EAIyB,EAJzBA,MACAkK,EAGyB,EAHzBA,KACA1K,EAEyB,EAFzBA,SACAjB,EACyB,EADzBA,MAGA,EAAgCjB,oBAAS,GAAzC,mBAAOwQ,EAAP,KAAiBC,EAAjB,KAYA,OACE,eAAC9O,GAAA,EAAD,CAAavD,GAAI,CAAEP,MAAO,QAAU+D,QAAQ,WAA5C,SACE,eAAC8O,GAAA,EAAD,CACElS,MAAOgS,EACPvO,GAAIA,EACJ0O,WAAY,CAAEC,UAAW,UAAWC,QArCrB,eAsCfnO,MAAOA,EACPkK,KAAMA,EACNkE,KAAK,OACL5O,SAnBoB,SAACC,GACzB,IAAM4O,EAAa5O,EAAMC,OAAOnB,MAChCiB,EAAS6O,IA5BK,SAAC9P,GACjB,OAAQ+P,OAAOC,MAAMhQ,EAAQiQ,WAAWjQ,IA4BjCkQ,CAAUJ,GACbN,GAAY,GAEZA,GAAY,IAcVxP,MAAOA,EACPW,QAAQ,gB,0CCvCHwP,GAA0B,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SAClD,EAAoBzR,eAAZE,EAAR,EAAQA,EAAR,EAAW1E,KACX,OACE,gBAAC6N,GAAA,EAAD,CAAMC,WAAS,EAACvE,QAAQ,IAAxB,UACE,eAACsE,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACzF,GAAA,EAAD,CACE,aAAY7D,EAAE,mCACd4C,MAAM,UACNyB,QAASiN,EAHX,SAKE,eAAC,KAAD,CAAezH,SAAS,eAG5B,eAACV,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACzF,GAAA,EAAD,CACE,aAAY7D,EAAE,mCACd4C,MAAM,QACNyB,QAASkN,EAHX,SAKE,eAAC,KAAD,CAAgB1H,SAAS,mBCpBtB2H,GAA0B,SAAC,GAAgD,IAA9CF,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SAClD,EAAoBzR,eAAZE,EAAR,EAAQA,EAAR,EAAW1E,KAEX,OACE,gBAAC6N,GAAA,EAAD,CAAMC,WAAS,EAACvE,QAAQ,IAAxB,UACE,eAACsE,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACd,GAAA,EAAD,CACE,aAAYxI,EAAE,mCACd4C,MAAM,UACN6O,WAAS,EACTpN,QAASiN,EACTI,UAAW,eAAC,KAAD,IACX7P,QAAQ,WANV,SAQG7B,EAAE,uCAGP,eAACmJ,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,eAACd,GAAA,EAAD,CACE,aAAYxI,EAAE,mCACd4C,MAAM,QACN6O,WAAS,EACTpN,QAASkN,EACTG,UAAW,eAAC,KAAD,IACX7P,QAAQ,WANV,SAQG7B,EAAE,2CC1BA2R,GAAc,SAAC,GAAmE,IAAjEzP,EAAgE,EAAhEA,GAAIoK,EAA4D,EAA5DA,UAAWO,EAAiD,EAAjDA,KAAM1K,EAA2C,EAA3CA,SAAUjB,EAAiC,EAAjCA,MAM3D,OACE,eAACU,GAAA,EAAD,CAAavD,GAAI,CAAEP,MAAO,QAAU+D,QAAQ,WAA5C,SACE,eAAC8O,GAAA,EAAD,CACEzO,GAAIA,EACJ2K,KAAMA,EACNlK,MAAO2J,EACPpL,MAAOA,EACPiB,SAZoB,SAACC,GACzB,IAAM4O,EAAa5O,EAAMC,OAAOnB,MAChCiB,EAAS6O,IAWLnP,QAAQ,WACRkP,KAAK,YCXLnD,GAA2Bb,0BAA3Ba,uBAEFZ,GAAgB,SAACC,GACrB,OAAQA,GAON,QACE,OAAO,EALT,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAQ,IAMR2E,GAAgB,SAAC3E,GACrB,OAAQA,GACN,KAAM,EACJ,MAAO,aACT,KAAK,EACH,MAAO,MACT,KAAK,EACH,MAAO,YACT,QACE,OAAO,IAWA4E,GAAuB,SAAC,GAKvB,IAJZC,EAIW,EAJXA,YACAC,EAGW,EAHXA,sBACAT,EAEW,EAFXA,SACAC,EACW,EADXA,SAEQvR,EAAMF,eAANE,EACR,EACEC,mBAAoC8R,GADtC,mBAAOC,EAAP,KAA0BC,EAA1B,KAGMC,EAAuBtE,KAAyBuE,kCAEhDC,EAAwBF,EAAqBG,gBAE7CC,EAA4B,SAAClQ,EAA0BmQ,GAC3D,IAAMC,EAAYpQ,EAAMC,OAAOnB,MACzBuR,EAAqBP,EAAqBQ,eAAeF,GAC/DP,EAAqB,2BAChBD,GACA,CAAEQ,YAAW7P,MAAO8P,EAAmBE,iBA6BxCC,EAAoB,WACxBtB,EAASU,IAGLa,EAA2B,WAC/B,OACE,gBAACjR,GAAA,EAAD,CAAaC,QAAQ,WAAWxD,GAAI,CAAEP,MAAO,OAAQgV,UAAW,QAAhE,UACE,eAACC,GAAA,EAAD,CAAYC,QAAQ,wBAApB,SAA6ChT,EAAE,eAC/C,eAACgC,GAAA,EAAD,CACE4O,WAAY,CACV/D,KAAM,wBACN3K,GAAI,yBAEN+Q,QAAM,EACNtQ,MAAO3C,EAAE,aACT6B,QAAQ,WACRM,SAAUmQ,EACVpR,MAAO8Q,EAAkBQ,UAT3B,SAWGJ,EAAsBlP,KAAI,SAACgQ,EAAeC,GACzC,IAAMV,EAAqBP,EAAqBQ,eAAeQ,GAC/D,OACE,yBAA4BhS,MAAOgS,EAAnC,SACGT,EAAmBE,cAAgBO,GADzBA,YAUzB,OAEE,eADA,CACA,OAAKjK,MAAO,CAAEmK,OAAQ,oBAAtB,UACGpT,EAAE,uBACH,gBAACqT,GAAA,EAAD,CAAOxO,QAAS,EAAhB,UACE,eAACgO,EAAD,IACA,eAAC,GAAD,CACE3Q,GAAG,8BACH2K,KAAK,8BACL1K,SA3DsB,SAACsL,GAC7BwE,EAAqB,2BAChBD,GACA,CAAErP,MAAO8K,MAyDRnB,UAAU,iBACVpL,MAAO8Q,EAAkBrP,QAE3B,eAAC,GAAD,CACE6N,SAAS,UACTtO,GAAG,wBACHS,MAAM,eACNkK,KAAK,wBACL1K,SA7DwB,SAACmN,GACF4B,MAAMoC,SAAS,GAAKhE,KAE7CgE,SAAS,GAAKhE,GAElB2C,EAAqB,2BAChBD,GACA,CAAE1C,YAAaA,MAuDdpO,MAAO8Q,EAAkB1C,cAE3B,gBAAC9G,GAAA,EAAD,CAAQ3G,QAAQ,WAAWwC,QA9EJ,WAC3B4N,EAAqB,2BAChBD,GACA,CAAEjI,UAAWiD,GAAcgF,EAAkBjI,eA2E9C,UACG/J,EAAE,eADL,IACsB4R,GAAcI,EAAkBjI,cAErC,4BAAhB+H,GACC,eAAC,GAAD,CAAyBR,SAAUsB,EAAmBrB,SAAUA,IAEjD,4BAAhBO,GACC,eAAC,GAAD,CAAyBR,SAAUsB,EAAmBrB,SAAUA,W,UC5HnE,SAASgC,GAAT,GAOiB,IANtB1T,EAMqB,EANrBA,SACA0D,EAKqB,EALrBA,OACAxB,EAIqB,EAJrBA,SACAyR,EAGqB,EAHrBA,YACAC,EAEqB,EAFrBA,SACA3V,EACqB,EADrBA,MAEA,OACE,eAAC4V,GAAA,EAAD,CAEEC,WAAY,CAAEtV,GAAI,CAAE+U,OAAQ,oBAC5B/U,GAAI,CAAEP,SACNnB,KAAM4G,EACNqQ,SAAUH,EACVI,QAASL,EACTM,gBAAiB,CAAEC,YAAa,GAAIC,UAAW,IAC/CC,mBAAoB,IARtB,SAUE,eAAC1O,EAAA,EAAD,CAAKlH,GAAI,CAAEyD,EAAG,OAAQC,YAAtB,SAAmClC,MAKzC0T,GAAiBW,aAAe,CAC9BpW,MAAO,MACPiE,SAAU,QACVoS,OAAQ,Q,yBCnDFrH,GAAkDC,0BAAlDD,sBAAuBc,GAA2Bb,0BAA3Ba,uBAElBwG,GAAwB,WACrBzS,KAAd,IACA,EAA0C1B,oBAAS,GAAnD,mBAAOsM,EAAP,KAAsBC,EAAtB,KACA,EAAkDvM,mBAAS,IAA3D,mBAA0BgS,GAA1B,WACQoC,EAAsBvH,KAAtBuH,kBAGFC,GAAiBC,EAFe3G,KAA9B2G,6BAGFC,EAAeC,iBAAO,MACtBC,EAAe,SAACC,GACpB1C,EAAqB0C,GACrBnI,GAAiB,GACjB6H,EAAkBM,IAWdC,EAAS,WACb,OACE,eAAC,GAAD,CACE7C,sBAAuBuC,EACvBhD,SAAUoD,EACVnD,SAAU,WACR/E,GAAiB,IAEnBsF,YAAY,6BAKlB,OACE,uBAAKlC,IAAK4E,EAAcvL,MAAO,CAAE3E,QAAS,SAAUuQ,MAAO,QAA3D,UACE,eAACtB,GAAD,CACE1T,SAAU,eAAC+U,EAAD,IACVrR,OAAQgJ,EACRkH,SAAUe,EAAaM,QACvBtB,YA3BwB,WAC5BhH,GAAiB,MA4Bf,eAAC3I,GAAA,EAAD,CACEQ,QA1BuB,WAC3BmI,GAAiB,IA0Bb9C,KAAK,QAELrL,GAAI,CACFuE,MAAM,GAAD,OAAK+C,GAAaI,mBAL3B,SAaE,eAAC,KAAD,CAA8B8D,SAAS,gBC1DzCkL,GAA0BC,2BAOnBC,IALYC,2BAAwBC,SAAS,CACxDC,iCAAkCL,GAAwBK,iCAC1DC,oBAAqBN,GAAwBO,iBAGN,WACvC,IAAM5Y,EAAQiF,eACd,OACE,sBAAKsH,MAAO,CAAEC,OAAQ,QAAtB,SACE,uBACED,MAAO,CACLgF,aAAc,MACd3P,gBAAiB5B,EAAMmG,QAAQC,KAAK,KACpCsQ,OAAO,aAAD,OAAezN,GAAaE,gBAJtC,UAOE,eAAC,GAAD,IACA,eAAC,GAAD,WC/BK0P,GACiB,4DCatB3H,GAA2Bb,0BAA3Ba,uBAEFmH,GAA0BC,2BAE1BQ,GAAmBN,2BAAwBC,SAAS,CACxDC,iCAAkCL,GAAwBK,iCAC1DC,oBAAqBN,GAAwBO,iBAGzCG,GAAuB,WAC3B,OACE,0MAYSC,GAAwB,WACnC,IAAQC,EAAwB/H,KAAxB+H,oBAER,OACE,eAACtQ,GAAD,UACE,uBAAK4D,MAAO,CAAEC,OAAQ,QAAtB,UACE,eAACX,GAAA,EAAD,CAAOlK,GAAI,CAAEuL,EAAG,OAAhB,SACE,eAAC,GAAD,MAGF,gBAACyJ,GAAA,EAAD,CAAO5D,UAAU,MAAM5K,QAAS,EAAGxG,GAAI,CAAEuL,EAAG,QAA5C,UACE,eAACrB,GAAA,EAAD,CAAOlK,GAAI,CAAEuL,EAAG,QAAhB,SACE,eAAC5F,GAAA,EAAD,CAAYpB,MAAO+C,GAAaC,SAAhC,SACE,qCACE,0CACA,2DACA,8GAEE,gCACE,eAAC,GAAD,MAHJ,oBAME,gCACE,gCACE,mDADF,4DAEgB,yDAFhB,8IAIiD,IAC/C,oDALF,OAKkC,gDAElC,gCACE,6CADF,+NAjBN,OAyBM,oBAAGgQ,KAAML,GAAT,2BAzBN,4BA8BJ,gBAAChN,GAAA,EAAD,CAAOlK,GAAI,CAAEuL,EAAG,OAAQ6F,UAAW,OAAnC,uBAEE,gCACE,+BAAMoG,KAAKC,UAAUH,IAAuB,KAAM,OAEpD,oCAQCI,GAAqB,WAChC,OACE,eAAC,GAAD,UACE,eAAC,qBAAkBzU,SAAnB,CAA4BkU,iBAAkBA,GAA9C,SACE,eAAC,GAAD,S,qBC7FFjM,GAAO,aAKAyM,GAAiB,SAAC,GAA8C,IAAD,IAA3CvM,aAA2C,aAA5BpF,eAA4B,MAAlBkF,GAAkB,EAC1E,OACE,eAAC1F,GAAA,EAAD,CACE6F,KAAK,QACLrL,GAAIoL,EAAQ,CAAEE,GAAI,MAAOC,EAAG,OAAU,GACtChH,MAAM,UACNyB,QAASA,EAJX,SAME,eAAC,KAAD,CAAcwF,SAAS,a,sCCJtB,SAASoM,GAAT,GAAsD,IAA9BC,EAA6B,EAA7BA,SAAU/T,EAAmB,EAAnBA,SAC/BnC,EAAMlD,KAANkD,EACFmW,EAAmBnW,EAAE,gBACrBoW,EAAmBpW,EAAE,gBAS3B,OACE,eAACqW,GAAA,EAAD,CACEnV,MAAM,MACNoV,QACE,eAACC,GAAA,EAAD,CACEtN,MAAO,CAAErG,MAAoB,SAAbsT,EAAsBM,KAAK,IAAMC,KAAM,KACvD7T,MAAM,YAGVD,MAAoB,SAAbuT,EAAsBC,EAAmBC,EAChDM,eAAe,QACfC,QAAsB,SAAbT,EACT/T,SAnBmB,SAACC,EAA6CuU,GAEjExU,EADEwU,EACO,OAEA,U,wBCbTC,GACJ,2FAEIC,GAAc,SAAC3V,GAAD,OAAoB,GAiBjC,SAAS4V,GAAT,GAQiB,IANtB5U,EAMqB,EANrBA,GAMqB,IALrB6U,eAKqB,MALXF,GAKW,EAJrBlU,EAIqB,EAJrBA,MACAkK,EAGqB,EAHrBA,KACA1K,EAEqB,EAFrBA,SACAjB,EACqB,EADrBA,MAEQnE,EAAqBD,KAArBC,iBAgBR,OACE,eAACia,GAAA,EAAD,CACErU,MAAOA,EACPsU,KAAMla,IAAmB3D,cACzB8H,MAAOA,EACPiB,SApBmB,SAAC+U,GACjBH,EAAQG,IAGRA,GAAaN,GAAiBO,KAAKD,EAASE,gBAK/CjV,EADe,OAAb+U,EACOG,aAlCI,SAACC,GAClB,IAAMC,EAAkBD,EAAKF,cAAcI,MAAM,KAAK,GACtD,OAAO,IAAIC,KAAKF,GAgCOG,CAAWR,IAErB,KAUTS,WAAY,CAAEzV,KAAI2K,QAClB+K,YAAa,SAACC,GAAD,OAAY,eAAClH,GAAA,EAAD,2BAAekH,GAAf,IAAuBxZ,GAAI,CAAEP,MAAO,cAKnEgZ,GAAsB5C,aAAe,CACnC6C,QAASF,IAGJ,IAAMiB,GAAsC,SAACC,GAClD,OACE,eAAC,GAAD,UACE,eAACjB,GAAD,eAA2BiB,OCvE3BlB,GAAc,SAACK,GAAD,OAAuB,GAW9Bc,GAAY,SAAC,GAQA,EAPxBC,WAOyB,IANzB/V,EAMwB,EANxBA,GAMwB,IALxB6U,eAKwB,MALdF,GAKc,EAJxBlU,EAIwB,EAJxBA,MACAkK,EAGwB,EAHxBA,KACA1K,EAEwB,EAFxBA,SACAjB,EACwB,EADxBA,MAEA,OACE,eAAC,GAAD,CAEEgB,GAAIA,EACJ6U,QAASA,EACTpU,MAAOA,EACPkK,KAAMA,EACN1K,SAAUA,EACVjB,MAAOA,K,UClBPgX,GAAY,CAChBvE,WAAY,CACV1K,MAAO,CACLkP,UAAWC,IACXta,MAAO,OAKb,SAASua,GAAU3b,GACjB,MAAO,CACL4b,WAAY5b,EAAMiM,WAAW4P,kBAe1B,SAASC,GAAT,GAOqB,IAN1BC,EAMyB,EANzBA,WACAnM,EAKyB,EALzBA,UACAoM,EAIyB,EAJzBA,QACAC,EAGyB,EAHzBA,gBACAzX,EAEyB,EAFzBA,MACAiB,EACyB,EADzBA,SAEMzF,EAAQiF,eACRM,EAAO,UAAM0W,EAAN,UAoCb,OACE,gBAAC/W,GAAA,EAAD,CAAavD,GAAI,CAAEP,MAAO,QAA1B,UACE,eAACiV,GAAA,EAAD,CAAY7Q,GAAID,EAAhB,SAA0BqK,IAC1B,eAACtK,GAAA,EAAD,CACEC,QAASA,EACTC,GAAIyW,EACJC,SAAUH,EACVvX,MAAOA,EACPiB,SAhBe,SAACC,GAChBqW,EArBoB,SAACrW,GACzB,IACmB4O,EACf5O,EADFC,OAAUnB,MAeZiB,EAXW6O,GAgBT6H,CAAkBzW,GA7BK,SAACA,GAC1B,IACmB4O,EACf5O,EADFC,OAAUnB,MAEZiB,EAAS6O,GA2BP8H,CAAmB1W,IAajB2W,MAAO,eAACC,GAAA,EAAD,CAAerW,MAAM,SAC5BuV,UAAWA,GAPb,SASGQ,EAAQxV,KAAI,SAAC+V,GAAD,OACX,eAAC5V,GAAA,EAAD,CAA6BnC,MAAO+X,EAAO/X,MAAO+H,MAAOoP,GAAU3b,GAAnE,SACGuc,EAAOtW,OADKsW,EAAO/X,eCnFhC,IAAQgY,GAA8BC,sCAA9BD,0BAgBKE,GAAW,SAAC,GAMG,IAlBGlD,EAa7BhU,EAKyB,EALzBA,GAKyB,IAJzBoK,iBAIyB,MAJb,QAIa,EAHzBO,EAGyB,EAHzBA,KACA1K,EAEyB,EAFzBA,SACAkX,EACyB,EADzBA,UAEA,EAA6CH,KAArCI,EAAR,EAAQA,iBAIFC,GAAU7G,EAJhB,EAA0BA,gBAIK2G,EAAU7G,WAOnCgH,EAAsB,SAACtC,GAC3B/U,EAAS+U,IAGX,GAjCoB,YADShB,EAkCHmD,EAAUnD,WAjCS,WAAbA,EAiCe,CAI7C,IAeIuD,EAfEC,EAAaJ,EAAiBD,EAAU7G,UAAW6G,EAAUnD,UAEnE,MAA2B,WAAvBmD,EAAUnD,SAEV,eAACsC,GAAD,CACEC,YAAY,EACZnM,UAAU,QACVqM,gBAAiBU,EAAU7G,UAC3BkG,QAASgB,EACTxY,MAAOmY,EAAUnY,MACjBiB,SAAUA,KAOdsX,EADsB,KAApBJ,EAAUnY,MACG,GACL2N,MAAM8K,QAAQN,EAAUnY,OAInBmY,EAAUnY,MAFV,CAACmY,EAAUnY,OAM1B,eAACsX,GAAD,CACEC,YAAU,EACVnM,UAAU,QACVoM,QAASgB,EACTf,gBAAiBU,EAAU7G,UAC3BtR,MACE2N,MAAM8K,QAAQN,EAAUnY,OACnBmY,EAAUnY,MACXuY,EAENtX,SAAUA,KAIhB,MAAyB,aAArBoX,EAAQ/I,SAER,eAAC,GAAD,CACEyH,WAAW,aACX/W,MAAOmY,EAAUnY,MACjBiB,SA1DwB,SAAC+U,GAE7B/U,EAAS+U,IAyDLhV,GAAG,gBACH2K,KAAK,gBACLlK,MAAM,UAIa,YAArB4W,EAAQ/I,SAER,eAAC,GAAD,CACEA,SAAS,UACTtO,GAAIA,EACJS,MAAO2J,EACPO,KAAMA,EACN1K,SAAUqX,EACVtY,MAAOmY,EAAUnY,QAIE,YAArBqY,EAAQ/I,SAER,eAAC,GAAD,CACEA,SAAS,UACTtO,GAAIA,EACJS,MAAO2J,EACPO,KAAMA,EACN1K,SAAUqX,EACVtY,MAAOmY,EAAUnY,QAKrB,eAAC,GAAD,CACEgB,GAAIA,EACJoK,UAAWA,EACXO,KAAMA,EACN1K,SAAUA,EACVjB,MAAOmY,EAAUnY,SAKvBkY,GAASlF,aAAe,CACtB5H,UAAW,SC9Gb,IAAQ4M,GAA8BC,sCAA9BD,0BAgBFpU,GAAc,CAClB,OAAQ,CACNyU,QAAS,EACTrD,SAAU,EACVhV,MAAO,EACP0Y,eAAgB,GAElB,OAAQ,CACNL,QAAS,EACTrD,SAAU,EACVhV,MAAO,GACP0Y,eAAgB,GAElB,OAAQ,CACNL,QAAS,GACTrD,SAAU,GACVhV,MAAO,GACP0Y,eAAgB,KAUdC,GAA+B,SACnCC,KAoBWC,GAAkB,SAAC,GAOL,IAAD,IANxB5F,cAMwB,MANf,OAMe,EALxB6F,EAKwB,EALxBA,iBACAzI,EAIwB,EAJxBA,SACAD,EAGwB,EAHxBA,SAGwB,IAFxB2I,gCAEwB,MAFGJ,GAEH,MADxBK,iBACwB,MADZC,cAAWC,iCACC,EAClB1d,EAAQiF,eACd,EAA8CuX,KAAtCmB,EAAR,EAAQA,kBAAmBC,EAA3B,EAA2BA,eAE3B,EAAsCra,mBAAwB,MAA9D,mBAAOsa,EAAP,KAAoBC,EAApB,KACA,EAA8Cjb,IAAMU,SAClDoa,EAAkBI,WAAWT,EAAiBxH,YADhD,mBAAOkI,EAAP,KAAwBC,EAAxB,KAIA,EAAsDpb,IAAMU,SAE1D+Z,GAFF,mBAAOY,EAAP,KAA4BC,EAA5B,KAIMC,EAAwB,SAC5BC,GAEAd,EAAyBc,GACzBF,EAAuBE,IAGnBC,EAA8B,SAAC5Y,GACnC,IAhF2B6Y,EAgFrBzI,EAAYpQ,EAAMC,OAAOnB,MACzBga,EAAeb,EAAkBI,WAAWjI,GAE5C0D,GAnFqB+E,EAmFYC,EAAaD,eAlF/CjY,OAAOkM,KAAK+L,GAAgB,IAqFjCH,EAFqB,CAAEtI,YAAW0D,WAAUhV,MAAO,KAInDyZ,EAAmBO,IAGfC,EAAuB,SAAC/Y,GAC5B,IAAM8T,EAAW9T,EAAMC,OAAOnB,MAC9B4Z,EAAsB,2BAAKF,GAAN,IAA2B1E,WAAUhV,MAAO,OAa7D0R,EAAoB,WAMC,YALTyH,EAAkBI,WAChCG,EAAoBpI,WAIVhC,WACVoK,EAAoB1Z,MAAQ+P,OAAO2J,EAAoB1Z,QAEzD,IAAMka,EAAoBlB,EAAUU,EAAqBP,GACrDe,EAAkB3K,UACpBtT,QAAQC,IAAI,oBAAqBge,EAAkBC,eACnDb,EAAe,0DAEfA,EAAe,MACflJ,EAASsJ,KAIP/H,EAA2B,WAC/B,OACE,gBAACjR,GAAA,EAAD,CAAaC,QAAQ,WAAWxD,GAAI,CAAEP,MAAO,QAA7C,UACE,eAACiV,GAAA,EAAD,CAAYC,QAAQ,wBAApB,qBACA,eAAChR,GAAA,EAAD,CACE4O,WAAY,CACV/D,KAAM,YACN3K,GAAI,wBACJ,cAAe,uBAEjBS,MAAM,UACNsQ,QAAM,EACN9Q,SAAU6Y,EACV9Z,MAAOwZ,EAAgBlI,UATzB,SAWG6H,EAAkBhI,gBAAgBnP,KAAI,SAACsP,GACtC,IAAM+G,EAAUc,EAAkBI,WAAWjI,GAC7C,OACE,yBAAwBtR,MAAOsR,EAA/B,SACG+G,EAAQ5G,cAAgBH,GADdA,YAUnB8I,EAA4B,WAChC,OACE,gBAAC1Z,GAAA,EAAD,CAAaC,QAAQ,WAAWxD,GAAI,CAAEP,MAAO,QAA7C,UACE,eAACiV,GAAA,EAAD,CAAYC,QAAQ,yBAApB,sBACA,eAAChR,GAAA,EAAD,CACEiR,QAAM,EACN/R,MAAO0Z,EAAoB1E,SAC3B/T,SAAUgZ,EACVxY,MAAM,WACNiO,WAAY,CACV/D,KAAM,WACN3K,GAAI,0BAPR,SAUGc,OAAOC,QAAQyX,EAAgBO,gBAAgB/X,KAAI,YAA+B,IAAD,mBAA5BqY,EAA4B,UAChF,OACE,yBAAiBra,MAAOqa,EAAxB,SACGjB,EAAeiB,IADLA,YAUzB,OACE,gBAACpS,GAAA,EAAD,CAAMC,WAAS,EAACvE,QAAS,EAAzB,UACE,eAACsE,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIkS,GAAI1W,GAAYqP,GAAQoF,QAA3C,SACE,eAAC1G,EAAD,MAEF,eAAC1J,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIkS,GAAI1W,GAAYqP,GAAQ+B,SAA3C,SACE,eAACoF,EAAD,MAEF,eAACnS,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIkS,GAAI1W,GAAYqP,GAAQjT,MAAO+H,MAAO,CAAEwS,UAAW,QAAtE,SACE,eAAC,GAAD,CACEvZ,GAAG,SACH2K,KAAK,WACLwM,UAAWuB,EACXzY,SAhGkB,SAACjB,GACzB,IAAMwa,EAAW,eAAQd,GAIzBc,EAAYxa,MAAQA,EAEpB4Z,EAAsBY,QA4FpB,gBAACvS,GAAA,EAAD,CACEE,MAAI,EACJC,GAAI,GACJkS,GAAI1W,GAAYqP,GAAQyF,eACxB3Q,MAAO,CAAEwS,UAAW,UAJtB,UAMc,SAAXtH,GACC,eAAC,GAAD,CAAyB7C,SAAUsB,EAAmBrB,SAAUA,IAEtD,SAAX4C,GACC,eAAC,GAAD,CAAyB7C,SAAUsB,EAAmBrB,SAAUA,IAEtD,SAAX4C,GACC,eAAC,GAAD,CAAyB7C,SAAUsB,EAAmBrB,SAAUA,OAGnD,OAAhBgJ,GACC,eAACpR,GAAA,EAAD,CACEE,MAAI,EACJC,GAAI,GACJqS,aAAa,SACbF,UAAU,SACVxS,MAAO,CACLrG,MAAOlG,EAAMmG,QAAQpE,MAAMmd,KAC3B3e,WAAY,OACZC,YAAa,QARjB,SAWGqd,QC3NJ,SAASsB,GAAT,GAUgB,EATrB3Z,GASsB,IARtB8X,EAQqB,EARrBA,iBACAzW,EAOqB,EAPrBA,OACA4Q,EAMqB,EANrBA,OAEA5C,GAIqB,EALrBxP,SAKqB,EAJrBwP,UACAD,EAGqB,EAHrBA,SACAmC,EAEqB,EAFrBA,SAEqB,EADrB3V,MAEA,OAaE,cAZA,CAYCyV,GAAD,CAAkBC,YAAajC,EAAUhO,OAAQA,EAAQkQ,SAAUA,EAAnE,SACE,eAAC,GAAD,CACEuG,iBAAkBA,EAClB1I,SAAUA,EACVC,SAAUA,EACV4C,OAAQA,MAShB0H,GAAc3H,aAAe,CAC3BpW,MAAO,MACPiE,SAAU,QACVoS,OAAQ,QC3EV,IAAQ2H,GAAqD3C,sCAArD2C,sBAAuB5C,GAA8BC,sCAA9BD,0BAMlB6C,GAAa,SAAC,GAAsC,IAAD,EAAnCC,EAAmC,EAAnCA,YAAanc,EAAsB,EAAtBA,SAClCoc,EAAqB1c,SAAa,MAClC7C,EAAQiF,eACd,EAAgEpC,YAAe,GAA/E,mBAAO2c,EAAP,KAAiCC,EAAjC,KAEA,EAOIL,GAAsBE,GANxBI,EADF,EACEA,gBACAC,EAFF,EAEEA,sBACAC,EAHF,EAGEA,OACAC,EAJF,EAIEA,+BACAC,EALF,EAKEA,eACAC,EANF,EAMEA,eAEMC,EAAuBxD,KAAvBwD,mBAEFC,EAA2C,UAAjB,QAArB,EAAAN,WAAA,eAAyBnG,UAAsBO,KAAM,IAAMD,KAAK,IAErEoG,EAAuB,SAAC1G,GACX,SAAbA,EACFsG,IAEAC,KAIEI,EAAgC,WACpCN,KAGIO,EAAgC,SACpC/B,GAGAqB,EAAgBrB,GAChBoB,GAA4B,IAGxBY,EAA0B,WAC9BZ,GAA4B,IAGxBa,EAAkC,WACtCb,GAA4B,IAGxBc,EAAiB,WACrB,OACE,uCACE,eAAChH,GAAD,CACEC,SAA+C,QAArCmG,IAAwBnG,SAAqB,MAAQ,OAC/D/T,SAAUya,IAEZ,eAAC,GAAD,CAAgBvY,QAAS0Y,KACvBT,GAAU,eAAC,GAAD,CAAkBjY,QAASwY,QAKvCK,EAAyB,WAC7B,OACE,eAAC,GAAD,CACEhb,GAAE,UAAK8Z,EAAL,mBACFhC,iBAAkB0C,IAClBnZ,OAAQ2Y,EACR5K,SAAUwL,EACVvL,SAAUyL,EACVvJ,SAAUwI,EAAmBnH,WAK7BzW,EAAK,CAET+U,OAAO,aAAD,OAAe1W,EAAMmG,QAAQyD,KAAKyC,WACxCkF,aAAc,MACdwN,UAAW,SACXnd,gBAAiBqe,EACjBlX,OAAQ,OACR3D,EAAG,MACH8H,EAAG,MACH9L,MAAO,oBAGT,OACE,gBAACqL,GAAA,EAAD,CAAMC,WAAS,EAACvE,QAAS,EAAGxG,GAAIA,EAAhC,UACE,gBAAC8K,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIsG,IAAKqM,EAAxB,UACE,eAACiB,EAAD,IACA,eAACD,EAAD,OAEDpd,MAIPkc,GAAW7H,aAAe,CACxBrU,SAAU,GACV8c,GAAI,W,yBChHApT,GAAO,aAKA4T,GAAiB,SAAC,GAA8C,IAAD,IAA3C1T,aAA2C,aAA5BpF,eAA4B,MAAlBkF,GAAkB,EAC1E,OACE,eAAC1F,GAAA,EAAD,CACE6F,KAAK,QACLrL,GAAIoL,EAAQ,CAAEE,GAAI,MAAOC,EAAG,OAAU,GACtChH,MAAM,UACNyB,QAASA,EAJX,SAME,eAAC,KAAD,CAAUwF,SAAS,aCInBnB,GAAYpM,aAAOiM,KAAPjM,EAAc,gBAAGI,EAAH,EAAGA,MAAH,mBAAC,eAC5BA,EAAMiM,WAAWC,OADU,IAE9BC,QAASnM,EAAMmI,QAAQ,GACvB4W,UAAW,SACX7Y,MAAOlG,EAAMmG,QAAQyD,KAAKyC,eCNpBqU,GAAsDjE,sCAAtDiE,uBAAwBlE,GAA8BC,sCAA9BD,0BAEnBmE,GAAW,SAAC,GAQlB,IAPLrB,EAOI,EAPJA,YAQMpf,EAAgBE,KAA0BC,mBAEhD,EAA0CwC,YAAe,GAAzD,mBAAOgN,EAAP,KAAsBC,EAAtB,KACA,EAAwCjN,YAAe,GAAvD,mBAAO+d,EAAP,KAAqBC,EAArB,KACMtB,EAAqB1c,SAAa,MAExC,EAMI6d,GAAuBpB,GALzBI,EADF,EACEA,gBACAoB,EAFF,EAEEA,2BACAlB,EAHF,EAGEA,OACAmB,EAJF,EAIEA,uBACAC,EALF,EAKEA,uBAGF,EACExE,KADMwD,EAAR,EAAQA,mBAAoBpC,EAA5B,EAA4BA,eAAgBD,EAA5C,EAA4CA,kBAGpCP,EAAwB0D,IAAxB1D,oBACF6D,EAAiBtD,EAAkBI,WAAWX,EAAoBtH,WAElEoL,EAAoB,WACxBF,KAGIG,EAAmB,SACvB/D,GAGA2D,EAAuB3D,GACvBtN,GAAiB,IAGbsR,EAAkB,SACtBhE,GAGAsC,EAAgBtC,GAChBtN,GAAiB,GACjB+Q,GAAgB,IAGZQ,EAAwB,WAC5BR,GAAgB,IAGZL,EAAyB,WAC7B,OACE,eAAC,GAAD,CACEhb,GAAE,UAAK8Z,EAAL,mBACFhC,iBAAkBzN,EAAgBuN,EAAsB4C,IACxDnZ,OAAQgJ,GAAiB+Q,EACzBhM,SAAU/E,EAAgBsR,EAAmBC,EAC7CvM,SAAU,WACR/E,GAAiB,GACjB+Q,GAAgB,IAElB9J,SAAUwI,EAAmBnH,WAK7BmI,EAAiB,WACrB,OACE,sBAAKhU,MAAO,CAAEnL,MAAO,OAAQwG,QAAS,UAAtC,SACE,uBAAK2E,MAAO,CAAE4L,MAAO,QAASvQ,QAAS,SAAvC,UACE,eAAC,GAAD,CACEmF,OAAK,EACLpF,QAAS,WACPmI,GAAkBD,MAGtB,eAAC,GAAD,CAAgB9C,OAAK,EAACpF,QAAS0Z,KAC7BzB,GAAU,eAAC,GAAD,CAAkB7S,OAAK,EAACpF,QAASuZ,UAM/CI,EAAsB,WAC1B,OACE,gBAAC3K,GAAA,EAAD,CAAO5D,UAAU,SAAS5K,QAAS,EAAGI,WAAW,SAAS5G,GAAI,CAAEoH,OAAQ,QAAxE,UACE,eAACwX,EAAD,IACA,gBAAC5J,GAAA,EAAD,CAAO5D,UAAU,SAAjB,UACE,gCAAOkO,EAAehL,eACtB,qCAAOmH,EAAoBtH,UAA3B,UAEF,gBAACa,GAAA,EAAD,CAAO5D,UAAU,SAAjB,UACE,gCAAO6K,EAAeR,EAAoB5D,YACV,OAA/BtZ,EAAcvD,cAAyB,qCAAOygB,EAAoB5D,SAA3B,UAE1C,gCAAO4D,EAAoB5Y,QAAc,QAK/C,OACE,eAACiI,GAAA,EAAD,CAAME,MAAI,EAACmS,IAAE,EAAC/L,UAAU,cAAcG,IAAKqM,EAA3C,SACE,gBAAC,GAAD,CAAW5d,GAAI,CAAEoH,OAAQ,OAAQ2N,OAAQ,mBAAoBnF,aAAc,OAA3E,UACE,eAACiP,EAAD,IACA,eAACc,EAAD,UCxHA9E,GAA8BC,sCAA9BD,0BAQK+E,GAAU,SAAVA,EAAW,GAA0D,IAAxDjC,EAAuD,EAAvDA,YAGxB,GAH+E,EAA1CkC,iBAA0C,EAAxBC,WAGVjF,MAArCkF,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,iBAClBC,EAAcF,EAAepC,GACnC,EAA4Czc,YAAgB,GAA5D,mBAAuBgf,GAAvB,WACMtC,EAAqB1c,SAAa,MAExCA,aAAgB,WACdgf,EAEEtC,EAAmBnH,QAAUmH,EAAmBnH,QAAQ0J,YAAc,KAEvE,CAACvC,EAAmBnH,UAEvB,IAAM2J,EAAgB,WACpB,OACE,eAACtV,GAAA,EAAD,CAAME,MAAI,EAACqV,IAAE,EAACjP,UAAU,cAAxB,SACE,eAAC,GAAD,CAAYuM,YAAaA,EAAzB,SACGsC,EAAYpb,KAAI,SAACyb,EAASxL,GAAV,OACf,eAAC8K,EAAD,CACEjC,YAAa2C,EACbT,iBAAkBI,EAAYM,OAC9BT,WAAYhL,YAQlB0L,EAAa,WACjB,OACE,eAAC,GAAD,CACE7C,YAAaA,KAMnB,OACE,uCACGqC,EAAiBrC,IAAgB,eAACyC,EAAD,KAChCJ,EAAiBrC,IAAgB,eAAC6C,EAAD,QCrDjC/C,GAA0B3C,sCAA1B2C,sBAMD,SAASgD,GAAT,GAA0E,IAAxCC,EAAuC,EAAvCA,gBACvC,EAAyCjD,GAAsBiD,GAAvDX,EAAR,EAAQA,eAAgBY,EAAxB,EAAwBA,aAClBV,EAAcF,IAEdS,EAAa,WACjB,OAAO,eAAC,GAAD,CAAS7C,YAAa+C,EAAiBb,iBAAkB,EAAGC,WAAY,KAG3EM,EAAgB,WACpB,OACE,eAAC,GAAD,CACEzC,YAAa+C,EACbb,iBAAkBI,EAAYM,OAC9BT,WAAY,KAIlB,OACE,qCACE,eAAC5Y,EAAA,EAAD,CAAKlH,GAAI,CAAE8F,SAAU,GAArB,SACE,eAACgF,GAAA,EAAD,CAAMC,WAAS,EAACvE,QAAS,EAAG,sBAAoB,OAAhD,SACGma,EAAe,eAACP,EAAD,IAAoB,eAACI,EAAD,UChB9C,IAAQ3F,GAA8BC,sCAA9BD,0BAEF+F,GACJnT,GAA8BC,IAAImT,gCAC9BC,GAAmBrT,GAA8BC,IAAIqT,kBAErDC,GAAyBC,iCAA8BnK,SAAS,CACpE8J,yBACAG,kBAAmBD,KASRI,GAA2B,WACtC,IAAQC,EAA2BtG,KAA3BsG,uBACR,OACE,eAACna,GAAD,UACE,sBAAK4D,MAAO,CAAEC,OAAQ,QAAtB,SACE,gBAACmK,GAAA,EAAD,CAAO5D,UAAU,MAAjB,UACE,gBAAC4D,GAAA,EAAD,CACE5D,UAAU,SACVxK,WAAW,QACXJ,QAAS,EACTxG,GAAI,CAAEuL,EAAG,OAAQ9L,MAAO,QAJ1B,UAME,eAACyK,GAAA,EAAD,CAAOlK,GAAI,CAAEP,MAAO,QAApB,SACE,eAACghB,GAAD,CAAwBC,gBAAiBM,GAAuBI,eAGlE,eAAClX,GAAA,EAAD,CAAOlK,GAAI,CAAEuL,EAAG,QAAU8V,UAAW,EAArC,SACE,gBAAC1b,GAAA,EAAD,CAAYpB,MAAO+C,GAAaC,SAAhC,UACE,qCACE,6DACA,qBAAIqD,MAAO,CAAE0W,aAAc,OAA3B,mBACA,qBAAG1W,MAAO,CAAE6J,UAAW,OAAvB,yUAKsC,UAGxC,2BAAS7J,MAAO,CAAE6J,UAAW,QAA7B,UACE,qBAAI7J,MAAO,CAAE0W,aAAc,OAA3B,uBACA,oBAAG1W,MAAO,CAAE6J,UAAW,OAAvB,2MAKA,oIAIA,+KAIA,qdASA,6BACE,oDAEE,oGAGA,4EACA,gGAGJ,6GAEE,gCACE,kDACA,uEACA,+EACA,6EACA,0EACA,sHAMJ,2GAGA,uIAQR,gBAACvK,GAAA,EAAD,CAAOlK,GAAI,CAAEuL,EAAG,OAAQ6F,UAAW,OAAnC,uBAEE,gCACE,+BAAMoG,KAAKC,UAAU0J,IAA0B,KAAM,kBAuCtDI,GAAwB,WACnC,IAGMC,EAnCkB,SAACxmB,GAEzB,OAAQA,GACN,IAAK,KACL,IAAK,QACH,OAAOymB,EAAarU,GAqBtB,QACE,OAAOqU,EAAaxV,GAjBtB,IAAK,KACL,IAAK,QACL,IAAK,QACL,IAAK,QACH,OAAOwV,EAAavU,GACtB,IAAK,KACL,IAAK,QACH,OAAOuU,EAAatU,IAkBPuU,EAFFhjB,EADcD,KAArBC,oBAGkC1D,cAE1C,OACE,eAAC,iCAAwBiI,SAAzB,CACE+d,uBAAwBA,GACxB/E,eAAgBuF,EAFlB,SAIE,eAAC,GAAD,OC7KSG,GCWA,WACb,OACE,eAAC,GAAD,UACE,eAAC,KAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAD,CAAOC,OAAK,EAACC,KAAI,UAAKla,IAAY/B,UAAW+E,KAC7C,eAAC,KAAD,CAAOkX,KAAI,UAAKla,GAAL,kBAA+B/B,UAAW2b,KACrD,eAAC,KAAD,CAAOM,KAAI,UAAKla,GAAL,mBAAgC/B,UAAW8R,KAGtD,eAAC,KAAD,CAAOmK,KAAI,UAAKla,GAAL,cAA2B/B,UAAWwE,KACjD,eAAC,KAAD,CACEyX,KAAI,UAAKla,GAAL,wBACJ/B,UAAWqE,aC1BR,SAAS6X,KACtB,OAAO,eAAC,GAAD,ICAT,IAYeC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAACZ,GAAD,MAEF3d,SAASwe,eAAe,SAM1BZ,O","file":"static/js/main.f545bf07.chunk.js","sourcesContent":["// cspell:disable\n\n// Locale code:\n//    languageCode_countryCode\n//    ar_eg -> Arabic Egypt\n//    en_us -> English United States\n//    en_uk -> English United Kingdom\n// https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/localization\n\nimport {\n  arEG,\n  deDE,\n  elGR,\n  enUS,\n  esES,\n  /* esMx, doesn't exist */\n  /* esUs,  doesn't exist */\n  ruRU,\n  thTH,\n} from \"@mui/material/locale\";\n\n// import arMaDateLocale from \"date-fns/locale/ar-MA\";\nimport arMaDateLocale from \"date-fns/locale/ar-TN\";\n// using ar-MA, produces date fromat mm/dd/yyyy, expected dd/mm/yyyy\n// founds some other Arabic locale that seems to work.  I think\n// Arabic locale support is patchy at best.\n\nimport deDeDateLocale from \"date-fns/locale/de\";\nimport enGbDateLocale from \"date-fns/locale/en-GB\";\nimport enUsDateLocale from \"date-fns/locale/en-US\";\nimport esEsDateLocale from \"date-fns/locale/es\";\n// import esMxDateLocale from \"date-fns/locale/es\";    // dont exist\n// import esUsDateLocale from \"date-fns/locale/en-US\"; // dont exist\nimport ruRuDateLocale from \"date-fns/locale/ru\";\nimport thThDateLocale from \"date-fns/locale/th\";\n\nimport type { TLocaleSettings, TSupportedLocaleDictionary } from \"./type\";\n\nconst esUsDateLocale = enUsDateLocale;\nconst esMxDateLocale = esEsDateLocale;\n\nconst SUPPORTED_LOCALE_CODES_ARRAY = [\n  \"ar_ma\",\n  \"de_de\",\n  \"en_gb\",\n  \"en_us\",\n  \"es_es\",\n  \"es_mx\",\n  \"es_us\",\n  \"ru_ru\",\n  \"th_th\",\n];\n\nconst supportedLocaleDictionary: TSupportedLocaleDictionary = {\n  ar_ma: {\n    countryCode: \"ma\",\n    countryNameLocal: \"المغرب\", // this may not be the symbol\n    countryNameEnglish: \"Morocco\",\n    currencyCodeISO: \"MAD\",\n    currencySymbol: \"درهم‎,\",\n    dateFnsLocale: arMaDateLocale,\n    dateFormatMap: \"__/__/____\", // dd/mm/yyyy\n    languageCode: \"ar\",\n    languageDir: \"rtl\",\n    localeCode: \"ar_ma\",\n    materialThemeLocal: arEG, // Egypt will have to do\n  } as TLocaleSettings,\n  de_de: {\n    countryCode: \"de\",\n    countryNameLocal: \"Deutsch\",\n    countryNameEnglish: \"German\",\n    currencySymbol: \"€\",\n    currencyCodeISO: \"US\",\n    dateFnsLocale: deDeDateLocale,\n    dateFormatMap: \"____-__-__\", // yyyy-mm-dd (google says this format, date picker said something different)\n    languageCode: \"de\",\n    languageDir: \"ltr\",\n    localeCode: \"de_de\",\n    materialThemeLocal: deDE,\n  } as TLocaleSettings,\n  en_gb: {\n    countryCode: \"uk\",\n    countryNameLocal: \"England\",\n    countryNameEnglish: \"England\",\n    currencyCodeISO: \"GBP\",\n    currencySymbol: \"£\",\n    dateFnsLocale: enGbDateLocale,\n    dateFormatMap: \"__/__/____\", // dd/mm/yyyy\n    languageCode: \"en\",\n    languageDir: \"ltr\",\n    localeCode: \"en_uk\",\n    materialThemeLocal: elGR,\n  } as TLocaleSettings,\n  en_us: {\n    countryCode: \"us\",\n    countryNameLocal: \"United States\",\n    countryNameEnglish: \"United States\",\n    currencyCodeISO: \"USD\",\n    currencySymbol: \"$\",\n    dateFnsLocale: enUsDateLocale,\n    dateFormatMap: \"__/__/____\", // mm/dd/yyyy\n    languageCode: \"en\",\n    languageDir: \"ltr\",\n    localeCode: \"en_us\",\n    materialThemeLocal: enUS,\n  } as TLocaleSettings,\n  es_es: {\n    countryCode: \"es\",\n    countryNameLocal: \"España\",\n    countryNameEnglish: \"Spain\",\n    currencyCodeISO: \"EUR\",\n    currencySymbol: \"€\",\n    dateFnsLocale: esEsDateLocale,\n    dateFormatMap: \"__-__-__\", // dd-mm-yy\n    languageCode: \"es\",\n    languageDir: \"ltr\",\n    localeCode: \"es_es\",\n    materialThemeLocal: esES,\n  } as TLocaleSettings,\n  es_mx: {\n    countryCode: \"mx\",\n    countryNameLocal: \"México\",\n    countryNameEnglish: \"Mexico\",\n    currencyCodeISO: \"MXN\",\n    currencySymbol: \"mex$\",\n    dateFnsLocale: esMxDateLocale,\n    dateFormatMap: \"__/__/____\", // dd-mm-yy\n    languageCode: \"es\",\n    languageDir: \"ltr\",\n    localeCode: \"es_mx\",\n    materialThemeLocal: esES, // no Mexico\n  } as TLocaleSettings,\n  es_us: {\n    countryCode: \"us\",\n    countryNameLocal: \"Estados Unidos\",\n    countryNameEnglish: \"United States\",\n    currencyCodeISO: \"USD\",\n    currencySymbol: \"$\",\n    dateFnsLocale: esUsDateLocale,\n    dateFormatMap: \"__/__/____\", // mm/dd/yyyy\n    languageCode: \"es\",\n    languageDir: \"ltr\",\n    localeCode: \"es_us\",\n    materialThemeLocal: esES, // no US Spanish\n  } as TLocaleSettings,\n  ru_ru: {\n    countryCode: \"ru\",\n    countryNameLocal: \"Россия\",\n    countryNameEnglish: \"Russia\",\n    currencyCodeISO: \"RUB\",\n    currencySymbol: \"₽\",\n    dateFnsLocale: ruRuDateLocale,\n    dateFormatMap: \"__.__.____\", // dd.mm.yy(yy)\n    languageCode: \"ru\",\n    languageDir: \"ltr\",\n    localeCode: \"ru_ru\",\n    materialThemeLocal: ruRU, // no US Spanish\n  } as TLocaleSettings,\n  th_th: {\n    countryCode: \"th\",\n    countryNameLocal: \"ประเทศไทย\",\n    countryNameEnglish: \"Thailand\",\n    currencyCodeISO: \"THB\",\n    currencySymbol: \"฿\",\n    dateFnsLocale: thThDateLocale,\n    dateFormatMap: \"__/__/____\", // dd/mm/yyyy\n    languageCode: \"th\",\n    languageDir: \"ltr\",\n    localeCode: \"th_th\",\n    materialThemeLocal: thTH, // no US Spanish\n  } as TLocaleSettings,\n};\n\nexport { supportedLocaleDictionary, SUPPORTED_LOCALE_CODES_ARRAY };\n","/* eslint-disable import/prefer-default-export */\n/* eslint-disable camelcase */\nimport { TSupportedTranslationDictionary } from \"../type\";\nimport ar from \"./ar.json\";\nimport ar_ma from \"./ar_MA.json\";\nimport de from \"./de.json\";\nimport en from \"./en.json\";\nimport en_gb from \"./en_gb.json\";\nimport en_us from \"./en_US.json\";\nimport es from \"./es.json\";\nimport es_es from \"./es_es.json\";\nimport es_mx from \"./es_mx.json\";\nimport es_us from \"./es_us.json\";\nimport ru from \"./ru.json\";\nimport th from \"./th.json\";\n\nexport const translations: TSupportedTranslationDictionary = {\n  ar,\n  ar_ma,\n  de,\n  de_de: de,\n  en,\n  en_gb,\n  en_us,\n  es,\n  es_es,\n  es_mx,\n  es_us,\n  ru,\n  ru_ru: ru,\n  th,\n  th_th: th,\n};\n","import { supportedLocaleDictionary, SUPPORTED_LOCALE_CODES_ARRAY } from \"./locals\";\nimport type { TLocaleSettings, TSupportedLanguages, TSupportedLocales } from \"./type\";\nimport { translations } from \"./translations\";\n\nimport { i18nBuilder } from \"./i18nBuilder\";\n\nconst i18nInit = (initialLanguageCode: TSupportedLanguages) => {\n  return i18nBuilder(translations, initialLanguageCode);\n};\nconst SUPPORTED_LOCALE_DICTIONARY = supportedLocaleDictionary;\n\nexport {\n  supportedLocaleDictionary,\n  SUPPORTED_LOCALE_DICTIONARY,\n  SUPPORTED_LOCALE_CODES_ARRAY,\n  i18nInit,\n};\nexport type { TLocaleSettings, TSupportedLocales };\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport { TSupportedLanguages, TSupportedTranslationDictionary } from \"./type\";\n// import { translations } from \"../translations/translations\";\n\nexport const i18nBuilder = (\n  translations: TSupportedTranslationDictionary,\n  initialLanguage: TSupportedLanguages\n) => {\n  i18n\n    .use(initReactI18next)\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      resources: {\n        en: {\n          translation: translations.en,\n        },\n        ar: {\n          translation: translations.ar,\n        },\n        ar_ma: {\n          translation: translations.ar_ma,\n        },\n        de: {\n          translation: translations.de,\n        },\n        en_gb: {\n          translation: translations.en_gb,\n        },\n        en_us: {\n          translation: translations.en_us,\n        },\n        es: {\n          translation: translations.es,\n        },\n        es_es: {\n          translation: translations.es_es,\n        },\n        es_mx: {\n          translation: translations.es_mx,\n        },\n        es_us: {\n          translation: translations.es_us,\n        },\n        ru: {\n          translation: translations.ru,\n        },\n        th: {\n          translation: translations.th,\n        },\n      },\n\n      returnObjects: true,\n      fallbackLng: \"en_us\",\n      debug: false,\n      lng: initialLanguage,\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n    });\n};\n","/* eslint-disable import/prefer-default-export */\nexport const APP_UI_CONST = {\n  APP_DRAWER_WIDTH: 240,\n};\n","/* eslint-disable import/prefer-default-export */\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from \"@mui/material/AppBar\";\nimport { styled } from \"@mui/material/styles\";\nimport { APP_UI_CONST } from \"./APP_UI_CONST\";\nimport { useApplicationUtilities } from \"../..\";\nconst drawerWidth = APP_UI_CONST.APP_DRAWER_WIDTH;\n\ninterface AppBarProps extends MuiAppBarProps {\n  open?: boolean;\n}\n\nexport const AppTitleBarStyled = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== \"open\",\n})<AppBarProps>(({ theme, open, dir }) => {\n  const currentLocale = useApplicationUtilities().getCurrentLocale();\n\n  const dirMargin =\n    currentLocale.languageDir === \"ltr\"\n      ? { marginLeft: drawerWidth }\n      : { marginRight: drawerWidth };\n  console.log(\"dir:\", currentLocale.languageDir);\n  return {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    ...(open && {\n      ...dirMargin,\n      // marginLeft: drawerWidth,\n      // marginRight: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    }),\n  };\n});\n\n// export const AppTitleBarStyled = styled(MuiAppBar, {\n//   shouldForwardProp: (prop) => prop !== \"open\",\n// })<AppBarProps>(({ theme, open, dir }) =>  ({\n//   zIndex: theme.zIndex.drawer + 1,\n//   transition: theme.transitions.create([\"width\", \"margin\"], {\n//     easing: theme.transitions.easing.sharp,\n//     duration: theme.transitions.duration.leavingScreen,\n//   }),\n//   ...(open && {\n//     // marginLeft: drawerWidth,\n//     // marginRight: drawerWidth,\n//     width: `calc(100% - ${drawerWidth}px)`,\n//     transition: theme.transitions.create([\"width\", \"margin\"], {\n//       easing: theme.transitions.easing.sharp,\n//       duration: theme.transitions.duration.enteringScreen,\n//     }),\n//   }),\n// }));\n","import Alert from \"@mui/material/Alert\";\nimport AlertTitle from \"@mui/material/AlertTitle\";\n\ntype AlertContainerProps = {\n  message: string;\n  title?: string;\n  severity: \"error\" | \"info\" | \"success\" | \"warning\";\n};\n\nconst AlertContainer = ({ message, title = \"Info\", severity }: AlertContainerProps) => {\n  return (\n    <Alert severity={severity} sx={{ backgroundColor: \"rgba(255,255,255,0.5)\" }}>\n      <AlertTitle>{title}</AlertTitle>\n      {message} — <strong>check it out!</strong>\n    </Alert>\n  );\n};\n\nexport { AlertContainer };\n","/* eslint-disable import/prefer-default-export */\n/*\n  To use this, three things need to happen.\n    1) Put the container somewhere sane\n\n      <GabbyToastContainer />\n\n    2) Import this file wherever it will be used (normal usage, but it still needs to happen)\n    3) Import the css (see below)\n\n  \n  For better instructions see the package this wraps over:\n    https://www.npmjs.com/package/material-react-toastify\n*/\n\nimport { toast, ToastContainer } from \"material-react-toastify\";\nimport \"material-react-toastify/dist/ReactToastify.css\";\nimport { AlertContainer } from \"./AlertContainer\";\nimport { useApplicationUtilities } from \"../\";\ntype GabbyToastProps = {\n  message: string;\n  title?: string;\n};\ntype GabbyErrorToastProps = GabbyToastProps & {\n  debug?: any;\n};\n\nconst GabbyToast = {\n  error: ({ message, title = \"Error\", debug }: GabbyErrorToastProps): void => {\n    if (debug !== undefined) {\n      console.dir({ error: debug });\n    }\n    toast.error(<AlertContainer message={message} title={title} severity=\"error\" />);\n  },\n\n  info: ({ message, title = \"Info\" }: GabbyToastProps): void => {\n    toast.info(<AlertContainer message={message} title={title} severity=\"info\" />);\n  },\n\n  success: ({ message, title = \"Success\" }: GabbyToastProps): void => {\n    toast.success(<AlertContainer message={message} title={title} severity=\"success\" />);\n  },\n\n  warn: ({ message, title = \"Warning\" }: GabbyToastProps): void => {\n    toast.warn(<AlertContainer message={message} title={title} severity=\"warning\" />);\n  },\n};\n\nconst GabbyToastContainer = () => {\n  const currentLocale = useApplicationUtilities().getCurrentLocale();\n\n  return (\n    <ToastContainer\n      limit={3}\n      closeOnClick\n      newestOnTop\n      pauseOnFocusLoss\n      position={currentLocale.languageDir === \"rtl\" ? \"top-left\" : \"top-right\"}\n      hideProgressBar={false}\n    />\n  );\n};\n\nexport { GabbyToast, GabbyToastContainer };\n","import React, { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\n/*\n  TODO - *tmc*\n  i18n does some kind of initialization that depends on\n  the translations files. For the time being this \n  needs to be like this, but should be reorganized\n  to import normally\n*/\n// import \"../i18n/i18nBuilder\";\nimport { i18nInit } from \"../../i18n\";\nimport type { TSupportedLocales, TLocaleSettings } from \"../../i18n\";\nimport { supportedLocaleDictionary } from \"../../i18n\";\nimport type { ApplicationUtilitiesType } from \"./type\";\nimport { GabbyToast, GabbyToastContainer } from \"../../GabbyToast\";\n\nexport const ApplicationUtilitiesContext =\n  React.createContext<ApplicationUtilitiesType | null>(null);\n\nconst initialState = {\n  // locale: \"en_us\",\n  // // locale: \"es_mx\",\n  // // locale: \"ru_ru\",\n  // // locale: \"ar_ma\",\n};\n\ntype Props = {\n  initialLocaleCode?: TSupportedLocales;\n  children: React.ReactNode;\n};\n\nconst initialProps = { localeCode: \"es_mx\" as TSupportedLocales };\n\ni18nInit(initialProps.localeCode); // the package - injects, we dont need to wrap it into a provider\n\nconst ApplicationUtilitiesProvider = ({ initialLocaleCode, children }: Props): JSX.Element => {\n  const { t: i18nT, i18n } = useTranslation();\n\n  // so far the only preset is locale\n  const [appState, setAppState] = React.useState(initialState as { [key: string]: unknown });\n\n  // make sure this is being used\n  const testUtilityResetState = () => {\n    i18nInit(initialProps.localeCode);\n    setAppState(initialState);\n  };\n\n  const _updateState = <T,>(key: string, value: T): void => {\n    setAppState({ ...appState, ...{ [key]: value as T } });\n  };\n\n  const getAppStateItem = <T,>(key: string): T => {\n    return appState[key] as T;\n  };\n\n  const getAppStateItemOrAlternative = <T,>(key: string, alternative: T): T => {\n    return getAppStateItem(key) || alternative;\n  };\n\n  const getCurrentLocaleCode = (): TSupportedLocales => {\n    return i18n.language as TSupportedLocales;\n  };\n\n  const getCurrentLocale = () => {\n    return getLocale(getCurrentLocaleCode());\n  };\n\n  const getLocale = (locale?: TSupportedLocales): TLocaleSettings => {\n    if (locale !== undefined && supportedLocaleDictionary[locale] !== undefined) {\n      return supportedLocaleDictionary[locale];\n    }\n\n    // ideally we'll be using locale code (en_us) as language keys and locale keys\n    // but there its possibility end-user chooses language without locale 'en' or 'ar'\n\n    // no longer applicable\n    if (supportedLocaleDictionary[i18n.language as TSupportedLocales] !== undefined) {\n      return supportedLocaleDictionary[i18n.language as TSupportedLocales];\n    }\n\n    return supportedLocaleDictionary[\"en_us\"];\n  };\n\n  const setAppStateItem = <T,>(key: string, value: T): void => {\n    _updateState<T>(key, value);\n  };\n\n  const setCurrentLocale = (localeCode: TSupportedLocales): void => {\n    i18n.changeLanguage(localeCode);\n  };\n\n  const t = (key: string, altText?: string) => {\n    return i18n.exists(key) ? i18nT(key) : altText || key;\n  };\n\n  // post initialization... Mostly for testing purposes.\n  if (initialLocaleCode !== undefined) {\n    setCurrentLocale(initialLocaleCode);\n  }\n\n  const exportedFunctions = {\n    testUtilityResetState,\n    changeLanguage: (languageCode: TSupportedLocales) => {\n      i18n.changeLanguage(languageCode);\n    },\n\n    getAppStateItem,\n    getAppStateItemOrAlternative,\n    getLanguage: () => i18n.language as TSupportedLocales,\n    getCurrentLocale,\n    getCurrentLocaleCode,\n    getLocale,\n    setAppStateItem,\n    setCurrentLocale,\n    t,\n    toast: GabbyToast,\n  };\n\n  return (\n    <ApplicationUtilitiesContext.Provider value={exportedFunctions}>\n      <GabbyToastContainer />\n      {children}\n    </ApplicationUtilitiesContext.Provider>\n  );\n};\nexport default ApplicationUtilitiesProvider;\n\nexport const useTestUtilities = () => {\n  const {\n    testUtilityResetState,\n    // //    changeLanguage,\n    // getAppStateItem,\n    // getCurrentLocale,\n    // getCurrentLocaleCode,\n    // getLocale,\n    // setAppStateItem,\n    // setCurrentLocale,\n    // t,\n    // toast,\n  } = React.useContext(ApplicationUtilitiesContext) as ApplicationUtilitiesType;\n  return {\n    resetState: testUtilityResetState,\n  };\n};\n","import ApplicationUtilitiesProvider, {\n  ApplicationUtilitiesContext,\n  useTestUtilities,\n} from \"./ApplicationUtilitiesProvider\";\nimport type { ApplicationUtilitiesType } from \"./type\";\n\nexport default ApplicationUtilitiesProvider;\nexport { ApplicationUtilitiesContext, useTestUtilities };\nexport type { ApplicationUtilitiesType };\n","/* eslint-disable import/prefer-default-export */\nimport React from \"react\";\nimport { ApplicationUtilitiesContext } from \"../ApplicationUtilitiesProvider\";\nimport type { ApplicationUtilitiesType } from \"../ApplicationUtilitiesProvider\";\nimport { i18nBuilder } from \"../../i18n/i18nBuilder\";\n\nexport const useApplicationUtilities = () => {\n  const {\n    //    changeLanguage,\n    getAppStateItem,\n    getCurrentLocale,\n    getCurrentLocaleCode,\n    getLocale,\n    setAppStateItem,\n    setCurrentLocale,\n    t,\n    toast,\n  } = React.useContext(ApplicationUtilitiesContext) as ApplicationUtilitiesType;\n\n  return {\n    // changeLanguage, //\n    getAppConfigItem: getAppStateItem,\n\n    getCurrentLocale,\n    getCurrentLocaleCode,\n    getLocale,\n    setAppConfigItem: setAppStateItem,\n    // setLanguageCode: changeLanguage,\n    setCurrentLocale,\n    t,\n    toast,\n  };\n};\n","import * as React from \"react\";\n\nimport { SUPPORTED_LOCALE_DICTIONARY, useApplicationUtilities } from \"../..\";\nimport type { TSupportedLocales } from \"../..\";\nimport { useTheme, makeStyles } from \"@mui/material/styles\";\n\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\n\nexport const LanguageSwitcher = () => {\n  const { setCurrentLocale, getCurrentLocaleCode, getLocale, t } = useApplicationUtilities();\n  const theme = useTheme();\n  const handleChange = (event: SelectChangeEvent) => {\n    const localeCode = event.target.value as TSupportedLocales;\n    const localeSettings = getLocale(localeCode);\n    setCurrentLocale(event.target.value as TSupportedLocales);\n\n    const htmlPage = document.querySelector(\"html\");\n    if (htmlPage !== null) {\n      htmlPage.setAttribute(\"dir\", localeSettings.languageDir);\n      htmlPage.setAttribute(\"lang\", localeSettings.languageCode);\n    }\n  };\n\n  return (\n    <div>\n      <FormControl variant=\"standard\" sx={{ m: 1, minWidth: 120 }}>\n        {/* <InputLabel id=\"demo-simple-select-standard-label\">Age</InputLabel> */}\n        <Select\n          labelId=\"demo-simple-select-standard-label\"\n          id=\"demo-simple-select-standard\"\n          value={getCurrentLocaleCode()}\n          onChange={handleChange}\n          label={t(\"Language\")}\n          sx={{ color: theme.palette.grey[100], borderBottom: \"1px solid white\" }}\n        >\n          {Object.entries(SUPPORTED_LOCALE_DICTIONARY).map(([localeKey, localeSetting]) => {\n            {\n              return (\n                <MenuItem value={localeKey} key={localeKey}>\n                  {localeSetting.countryNameLocal}\n                </MenuItem>\n              );\n            }\n          })}\n        </Select>\n      </FormControl>\n      {/* <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 120 }}>\n        <InputLabel id=\"demo-simple-select-filled-label\">Age</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-filled-label\"\n          id=\"demo-simple-select-filled\"\n          value={age}\n          onChange={handleChange}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={10}>Ten</MenuItem>\n          <MenuItem value={20}>Twenty</MenuItem>\n          <MenuItem value={30}>Thirty</MenuItem>\n        </Select>\n      </FormControl> */}\n    </div>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\nimport Badge from \"@mui/material/Badge\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport NotificationsIcon from \"@mui/icons-material/Notifications\";\nimport IconButton from \"@mui/material/IconButton\";\nimport { AppTitleBarStyled } from \"./AppTitleBarStyled\";\nimport { useApplicationUtilities } from \"../../AppContextProviders/hooks\";\nimport { LanguageSwitcher } from \"./LanguageSwitcher\";\ninterface IAppBarProps {\n  isOpen: boolean;\n  titleText: string;\n  toggleDrawer: () => void;\n}\nexport const AppTitleBar = ({\n  isOpen,\n  titleText,\n  toggleDrawer,\n}: IAppBarProps): JSX.Element => {\n  const { t, getLocale, getCurrentLocale } = useApplicationUtilities();\n  const currentLocale = getCurrentLocale();\n  const RtlToolBar = () => {\n    return (\n      <Toolbar\n        sx={{\n          pr: \"24px\", // keep right padding when drawer closed\n        }}\n      >\n        <IconButton color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap sx={{ flexGrow: 1 }}>\n          {titleText} <br />\n          {t(\"app-title-bar-text\")}\n          <br />\n        </Typography>\n        <LanguageSwitcher />\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={toggleDrawer}\n          sx={{\n            marginLeft: \"36px\",\n            ...(isOpen && { display: \"none\" }),\n          }}\n        >\n          <MenuIcon />\n        </IconButton>\n      </Toolbar>\n    );\n  };\n\n  const LtrToolBar = () => {\n    return (\n      <Toolbar\n        sx={{\n          pr: \"24px\", // keep right padding when drawer closed\n        }}\n      >\n        <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          onClick={toggleDrawer}\n          sx={{\n            marginRight: \"36px\",\n            ...(isOpen && { display: \"none\" }),\n          }}\n        >\n          <MenuIcon />\n        </IconButton>\n        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap sx={{ flexGrow: 1 }}>\n          {titleText} <br />\n          {t(\"app-title-bar-text\")}\n          <br />\n        </Typography>\n        <LanguageSwitcher />\n        <IconButton color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n      </Toolbar>\n    );\n  };\n\n  return (\n    <AppTitleBarStyled open={isOpen} dir=\"ltr\">\n      {currentLocale.languageDir === \"ltr\" && <LtrToolBar />}\n      {currentLocale.languageDir === \"rtl\" && <RtlToolBar />}\n    </AppTitleBarStyled>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport { styled } from \"@mui/material/styles\";\nimport MuiDrawer from \"@mui/material/Drawer\";\nimport { APP_UI_CONST } from \"./APP_UI_CONST\";\n\nconst drawerWidth = APP_UI_CONST.APP_DRAWER_WIDTH;\n\nexport const DrawerStyled = styled(MuiDrawer, {\n  shouldForwardProp: (prop) => prop !== \"open\",\n})(({ theme, open }) => ({\n  \"& .MuiDrawer-paper\": {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    boxSizing: \"border-box\",\n    ...(!open && {\n      overflowX: \"hidden\",\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      width: theme.spacing(7),\n      [theme.breakpoints.up(\"sm\")]: {\n        width: theme.spacing(9),\n      },\n    }),\n  },\n}));\n","/* eslint-disable import/prefer-default-export */\nimport * as React from \"react\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\nimport { NavListMain, NavListSecondary } from \"../../../Router\";\nimport { DrawerStyled } from \"./DrawerStyled\";\n\ninterface Props {\n  isOpen: boolean;\n  toggleDrawer: () => void;\n}\n\nexport const AppSideDrawer = ({ isOpen, toggleDrawer }: Props) => {\n  return (\n    <DrawerStyled variant=\"permanent\" open={isOpen}>\n      <Toolbar\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          px: [1],\n        }}\n      >\n        <IconButton aria-label=\"close drawer\" onClick={toggleDrawer}>\n          <ChevronLeftIcon />\n        </IconButton>\n      </Toolbar>\n      <Divider />\n      <NavListMain />\n      <Divider />\n      <NavListSecondary />\n    </DrawerStyled>\n  );\n};\n","import * as React from \"react\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport { AppTitleBar } from \"./components/AppTitleBar\";\nimport { AppSideDrawer } from \"./components/AppSideDrawer\";\nimport { useTheme } from \"@mui/material/styles\";\ninterface Props {\n  children?: React.ReactNode;\n}\nexport function PageContentWrapper({ children }: Props) {\n  const [open, setOpen] = React.useState(true);\n  const theme = useTheme();\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <CssBaseline />\n      <AppTitleBar titleText=\"I18N Needed Here\" isOpen={open} toggleDrawer={toggleDrawer} />\n      <AppSideDrawer isOpen={open} toggleDrawer={toggleDrawer} />\n      <Box\n        component=\"main\"\n        sx={{\n          backgroundColor: theme.palette.grey[100],\n          // backgroundColor: (theme) =>\n          //   theme.palette.mode === \"light\"\n          //     ? theme.palette.grey[100]\n          //     : theme.palette.grey[900],\n          flexGrow: 1,\n          height: \"100vh\",\n          overflow: \"auto\",\n        }}\n      >\n        <Toolbar /> {/** Consumes space, keeps page layout sane, no other purpose */}\n        {children}\n        {/* <span>Blank Page</span> */}\n      </Box>\n    </Box>\n  );\n}\n","import { useTheme } from \"@mui/system\";\nimport { Theme } from \"@mui/material/styles\";\nexport const customStyles = {\n  longText: \"rgba(0, 0, 0, 0.7)\",\n  sectionBorder: \"rgba(0, 0, 0, 0.3)\",\n  backgroundLightGrey: \"theme.palette.grey[100]\", // this doesn't work so well dynamically\n  affirmativeGreen: \"rgba(46, 125, 50, .8)\",\n};\n\nexport const customStylesWithTheme = (theme: Theme) => {\n  return {\n    ...customStyles,\n    ...{\n      backgroundLightGrey: theme.palette.grey[100],\n    },\n  };\n  // backgroundLightGrey: useTheme().palette.grey[100], // \"theme.palette.grey[100]\",\n};\n","export const HOME_DIR =\n  process.env.NODE_ENV === \"production\" ? \"/gabby-query-protocol-www/example-app/\" : \"/\";\n","import * as React from \"react\";\nimport List from \"@mui/material/List\";\n\nimport ListItem from \"@mui/material/ListItem\";\nimport MuiListItem, { ListItemProps } from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport DashboardIcon from \"@mui/icons-material/Dashboard\";\nimport ShoppingCartIcon from \"@mui/icons-material/ShoppingCart\";\nimport PeopleIcon from \"@mui/icons-material/People\";\nimport BarChartIcon from \"@mui/icons-material/BarChart\";\nimport LayersIcon from \"@mui/icons-material/Layers\";\nimport { useApplicationUtilities } from \"../Application\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport { customStyles } from \"../Application\";\nimport { styled } from \"@mui/material/styles\";\nimport { purple } from \"@mui/material/colors\";\n\nimport { HOME_DIR } from \"./common\";\nimport { BrandingWatermark } from \"@mui/icons-material\";\n\ntype MyNavLinkProps = {\n  to: string;\n  Icon: typeof DashboardIcon;\n  text: string;\n};\n\nconst NavLinkStyled = styled(NavLink)<ListItemProps>(({ theme }) => ({\n  //   color: theme.palette.getContrastText(purple[500]),\n  color: customStyles.longText,\n  // backgroundColor: purple[500],\n  // \"&:hover\": {\n  //   backgroundColor: purple[700],\n  // },\n}));\n\nconst MyNavLink = ({ to, Icon, text }: MyNavLinkProps) => {\n  const { pathname } = useLocation();\n\n  const activeRoute = () => {\n    return to === pathname;\n  };\n\n  return (\n    <ListItem\n      selected={activeRoute()}\n      component={NavLinkStyled}\n      to={to}\n      button\n      // dense\n    >\n      <ListItemIcon>\n        <Icon />\n      </ListItemIcon>\n      <ListItemText primary={`${text}`} />\n    </ListItem>\n  );\n};\n\nexport const NavListMain = () => {\n  const { t } = useApplicationUtilities();\n  return (\n    <List>\n      <MyNavLink to={`${HOME_DIR}`} Icon={DashboardIcon} text={t(\"Home\")} />\n      <MyNavLink\n        to={`${HOME_DIR}predicate-demo`}\n        Icon={LayersIcon}\n        text={t(\"Predicate Tree (build)\")}\n      />\n      {/* <MyNavLink\n        to={`${HOME_DIR}predicate-demo`}\n        Icon={LayersIcon}\n        text={t(\"Predicate Tree (uses)\")}\n      /> */}\n      <MyNavLink\n        to={`${HOME_DIR}projection-demo`}\n        Icon={LayersIcon}\n        text={t(\"Projections (Columns)\")}\n      />\n      <MyNavLink\n        to={`${HOME_DIR}application-features`}\n        Icon={DashboardIcon}\n        text={t(\"Application Features\")}\n      />\n      <MyNavLink to={`${HOME_DIR}blank-page`} Icon={PeopleIcon} text={t(\"Blank Page\")} />\n\n      <ListSubheader inset>{t(\"Filler Not Used\")}</ListSubheader>\n\n      <ListItem button>\n        <ListItemIcon>\n          <PeopleIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Customers\")} />\n      </ListItem>\n      <ListItem button>\n        <ListItemIcon>\n          <BarChartIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Reports\")} />\n      </ListItem>\n      <ListItem button>\n        <ListItemIcon>\n          <LayersIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Integrations\")} />\n      </ListItem>\n    </List>\n  );\n};\n","import * as React from \"react\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport ShoppingCartIcon from \"@mui/icons-material/ShoppingCart\";\nimport { useApplicationUtilities } from \"../Application\";\n\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\n\nexport const NavListSecondary = () => {\n  const { t } = useApplicationUtilities();\n\n  return (\n    <List>\n      <ListSubheader inset>{t(\"Saved reports\")}</ListSubheader>\n      <ListItem button>\n        <ListItemIcon>\n          <ShoppingCartIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Orders\")} />\n      </ListItem>\n\n      <ListItem button>\n        <ListItemIcon>\n          <AssignmentIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Current month\")} />\n      </ListItem>\n      <ListItem button>\n        <ListItemIcon>\n          <AssignmentIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Last quarter\")} />\n      </ListItem>\n      <ListItem button>\n        <ListItemIcon>\n          <AssignmentIcon />\n        </ListItemIcon>\n        <ListItemText primary={t(\"Year-end sale\")} />\n      </ListItem>\n    </List>\n  );\n};\n","import { ReactNode } from \"react\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nfunction ErrorFallback({ error }: { error: Error }) {\n  return (\n    <div role=\"alert\">\n      <p>Something went wrong:</p>\n      <pre>{error.message}</pre>\n    </div>\n  );\n}\n\nexport const ErrorContainer = ({ children }: { children: ReactNode }) => {\n  return <ErrorBoundary FallbackComponent={ErrorFallback}>{children}</ErrorBoundary>;\n};\n","import DateLocalizationProvider from \"./Provider\";\n\nexport default DateLocalizationProvider;\n","import React from \"react\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\n\nimport type { TSupportedLocales } from \"../../i18n\";\nimport type { ApplicationUtilitiesType } from \"../ApplicationUtilitiesProvider/type\";\nimport { ApplicationUtilitiesContext } from \"../ApplicationUtilitiesProvider/ApplicationUtilitiesProvider\";\n\ntype Props = {\n  children: React.ReactNode;\n};\nconst DateLocalizationProvider = ({ children }: Props): JSX.Element => {\n  const { getCurrentLocale } = React.useContext(\n    ApplicationUtilitiesContext\n  ) as ApplicationUtilitiesType;\n\n  return (\n    <LocalizationProvider\n      dateAdapter={AdapterDateFns}\n      locale={getCurrentLocale().dateFnsLocale}\n    >\n      {children}\n    </LocalizationProvider>\n  );\n};\nexport default DateLocalizationProvider;\n","import { createTheme } from \"@mui/material/styles\";\nimport { green, purple } from \"@mui/material/colors\";\nimport { zhCN } from \"@mui/material/locale\";\nimport { enUS } from \"@mui/material/locale\";\nimport { useApplicationUtilities } from \"../hooks\";\n\nexport const gabbyTheme = (localization = enUS) => {\n  return createTheme(\n    {\n      palette: {\n        // primary: {\n        //   main: purple[500],\n        // },\n        // secondary: {\n        //   main: green[500],\n        // },\n      },\n    },\n    localization\n  );\n};\n","import { GabbyThemeProvider } from \"./Provider\";\nexport default GabbyThemeProvider;\n","import React from \"react\";\nimport { ThemeProvider } from \"@mui/material/styles\";\nimport { gabbyTheme } from \"./gabbyTheme\";\nimport { useApplicationUtilities } from \"../hooks\";\ninterface IAppProviderParameters {\n  children?: React.ReactNode;\n}\n\nexport const GabbyThemeProvider = ({ children }: IAppProviderParameters) => {\n  const { getLocale } = useApplicationUtilities();\n  const materialLocale = getLocale();\n\n  return (\n    <ThemeProvider theme={gabbyTheme(materialLocale.materialThemeLocal)}>\n      {children}\n    </ThemeProvider>\n  );\n};\n","import React from \"react\";\nimport { TSupportedLocales } from \"..\";\nimport ApplicationUtilitiesProvider, {\n  useTestUtilities,\n} from \"./ApplicationUtilitiesProvider\";\nimport { ErrorContainer } from \"./ErrorContainer\";\nimport DateLocalizationProvider from \"./DateLocalizationProvider\";\nimport GabbyThemeProvider from \"./GabbyThemeProvider\";\n\ninterface IAppProviderParameters {\n  children?: React.ReactNode;\n  initialLocaleCode?: TSupportedLocales;\n}\n\nexport const AppContextProviders = ({\n  initialLocaleCode,\n  children,\n}: IAppProviderParameters) => {\n  return (\n    <ErrorContainer>\n      {\" \"}\n      {/* Error container may have issue with hooks, requires testing */}\n      <ApplicationUtilitiesProvider initialLocaleCode={initialLocaleCode}>\n        <GabbyThemeProvider>\n          <DateLocalizationProvider>{children}</DateLocalizationProvider>\n        </GabbyThemeProvider>\n      </ApplicationUtilitiesProvider>\n    </ErrorContainer>\n  );\n};\n\nexport { useTestUtilities };\n","import { Paper } from \"@mui/material\";\nimport { PageContentWrapper } from \"../Application\";\nimport { Button } from \"@mui/material\";\nimport { useApplicationUtilities } from \"../Application/AppContextProviders/hooks\";\n// import { ApplicationUtilitiesContext } from \"../Application/AppContextProviders/ApplicationUtilitiesProvider\";\n\nexport const ApplicationFeaturesPage = (): JSX.Element => {\n  const { toast } = useApplicationUtilities();\n\n  const handleToastClick = () => {\n    toast.info({ message: \"This is only a message.\", title: \"In App Messaging\" });\n  };\n\n  return (\n    <PageContentWrapper>\n      <Paper sx={{ m: \"20px\" }}>\n        This site is set-up to showcase components. Its a work in progress and kind of boring.\n        The two notable functionalities are:\n        <ul>\n          <li>Internationalization (choose your language top/right</li>\n          <li>\n            In-app message <Button onClick={handleToastClick}>Click here</Button>.\n          </li>\n        </ul>\n      </Paper>\n      <span>Gabby App 2</span>\n    </PageContentWrapper>\n  );\n};\n","import { PageContentWrapper } from \"../Application\";\n\nexport const BlankPage = (): JSX.Element => {\n  return (\n    <PageContentWrapper>\n      <span>Blank Page</span>\n    </PageContentWrapper>\n  );\n};\n","import { Grid, Paper } from \"@mui/material\";\nimport { PageContentWrapper } from \"../Application\";\nimport { styled } from \"@mui/material/styles\";\nimport { customStyles } from \"../Application\";\n\nconst PaperItem = styled(Paper)(({ theme }) => ({\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  // textAlign: \"center\",\n  h3: { color: customStyles.longText },\n  // h3: { color: theme.palette.text.primary },\n  // TODO - *tmc* notice theme.palette.text.secondary is the same as custom?\n  //      maybe need to find custom and change to this css?\n  color: theme.palette.text.secondary,\n}));\n\nexport const HomePage = (): JSX.Element => {\n  return (\n    <PageContentWrapper>\n      <div style={{ margin: \"20px\" }}>\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <PaperItem>\n              <section>\n                <h3>For the geeks</h3>\n                <p>Why this is awesome</p>\n              </section>\n            </PaperItem>\n          </Grid>\n          <Grid item xs={6}>\n            <Paper>\n              <section>\n                <h3>For the Managers</h3>\n                <p>Why this is awesome</p>\n              </section>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    </PageContentWrapper>\n  );\n};\n","import * as React from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\n\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { sizeHeight } from \"@mui/system\";\n\nconst noop = () => {};\ntype Props = {\n  onClick?: () => void;\n  dense?: boolean;\n};\nexport const IconButtonRemove = ({ dense = false, onClick = noop }: Props) => {\n  return (\n    <IconButton\n      size=\"small\"\n      sx={dense ? { mx: \"0px\", p: \"0px\" } : {}}\n      color=\"error\"\n      onClick={onClick}\n    >\n      <DeleteIcon fontSize=\"small\" />\n    </IconButton>\n  );\n};\n","import { ArrowDropUp } from \"@mui/icons-material\";\nimport { ArrowDropDown } from \"@mui/icons-material\";\nimport { HorizontalRule } from \"@mui/icons-material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport { Tooltip } from \"@mui/material\";\n\ntype Props = {\n  sortOrder: number;\n  onSortOrderClick: () => void;\n};\nexport const AscDesIconButton = ({ sortOrder, onSortOrderClick }: Props) => {\n  return (\n    <>\n      <Tooltip title=\"Sort Asc/Desc\" placement=\"bottom\">\n        <IconButton size=\"small\" onClick={onSortOrderClick}>\n          {sortOrder < 0 && <ArrowDropDown />}\n          {sortOrder === 0 && <HorizontalRule />}\n          {sortOrder > 0 && <ArrowDropUp />}\n        </IconButton>\n      </Tooltip>\n    </>\n  );\n};\n","// cspell:disable\n\n// export type TPredicateOperatorLabels = {\n//   [op in TPredicateOperator | TPredicateJunctionOperator]: string;\n// };\n\n// import { TPredicateOperatorLabels } from \"gabby-query-protocol-react-context\";\nimport type { TPredicateOperatorLabels } from \"./index\";\n\nconst EN: TPredicateOperatorLabels = {\n  $and: \"All of these\",\n  $anyOf: \"Any Of\",\n  $empty: \"Is Empty\",\n  $eq: \"Equals\",\n  $gt: \"Greater Than\",\n  $gte: \"Greater Than Equal\",\n  $isNull: \"Is Null\",\n  $lt: \"Less Than\",\n  $lte: \"Less Than Equal\",\n  $like: \"Contains\",\n  $oneOf: \"One Of\",\n  $nand: \"Not And\",\n  $nanyOf: \"Not Any\",\n  $ne: \"Not Equal\",\n  $nor: \"Not Or\",\n  $or: \"Any of these\",\n};\nconst ES: TPredicateOperatorLabels = {\n  $and: \"Todos estos\",\n  $anyOf: \"Cualquiera de\",\n  $empty: \"Is Empty\",\n  $eq: \"Es igual a\",\n  $gt: \"Mayor que\",\n  $gte: \"Mayor que igual\",\n  $isNull: \"Is Null\",\n  $lt: \"Menor que\",\n  $lte: \"Menor que igual\",\n  $like: \"Contiene\",\n  $oneOf: \"Uno de\",\n  $nand: \"Not And\",\n  $nanyOf: \"Not Any\",\n  $ne: \"Not Equal\",\n  $nor: \"Not Or\",\n  $or: \"Cualquiera de estos\",\n};\n\nconst TH: TPredicateOperatorLabels = {\n  $and: \"ทั้งหมดนี้\",\n  $anyOf: \"อันใดอันหนึ่ง\",\n  $empty: \"Is Empty\",\n  $eq: \"เท่ากับ\",\n  $gt: \"มากกว่า\",\n  $gte: \"มากกว่าเท่ากับ\",\n  $isNull: \"Is Null\",\n  $lt: \"น้อยกว่า\",\n  $lte: \"น้อยกว่าเท่ากับ\",\n  $like: \"มี\",\n  $oneOf: \"หนึ่งใน\",\n  $nand: \"Not And\",\n  $nanyOf: \"Not Any\",\n  $ne: \"Not Equal\",\n  $nor: \"Not Or\",\n  $or: \"ใดๆ เหล่านี้\",\n};\nconst AR: TPredicateOperatorLabels = {\n  $and: \"كل هذه\",\n  $anyOf: \"اي من\",\n  $empty: \"Is Empty\",\n  $eq: \"يساوي\",\n  $gt: \"أكبر من\",\n  $gte: \"أكبر من يساوي\",\n  $isNull: \"Is Null\",\n  $lt: \"أقل من\",\n  $lte: \"أقل من يساوي\",\n  $like: \"يحتوي على\",\n  $oneOf: \"واحد من\",\n  $nand: \"Not And\",\n  $nanyOf: \"Not Any\",\n  $ne: \"Not Equal\",\n  $nor: \"Not Or\",\n\n  $or: \"أي منهم\",\n};\n\nconst SymbolsTypable: TPredicateOperatorLabels = {\n  $and: \"AND\",\n  $anyOf: \"Any Of\",\n  $empty: \"Is Empty\",\n  $eq: \"=\",\n  $gt: \">\",\n  $gte: \">=\",\n  $isNull: \"Is Null\",\n  $lt: \"<\",\n  $lte: \"<=\",\n  $like: \"=~\",\n  $oneOf: \"One Of\",\n  $nand: \"Not And\",\n  $nanyOf: \"Not Any\",\n  $ne: \"Not Equal\",\n  $nor: \"Not Or\",\n\n  $or: \"OR\",\n};\nconst SymbolsEntities: TPredicateOperatorLabels = {\n  // https://dev.w3.org/html5/html-author/charref\n  $anyOf: String.fromCharCode(0x02286), // ⊆\n  $empty: \"Is Empty\",\n\n  $eq: \"=\",\n  $gt: \">\",\n  $gte: String.fromCharCode(0x02265), // ≥\n  $isNull: \"Is Null\",\n  $lt: \"<\",\n  $lte: String.fromCharCode(0x02264), // ≤\n  $like: String.fromCharCode(0x02243), // ≃\n  $oneOf: String.fromCharCode(0x02203), // ∃\n  $and: String.fromCharCode(0x02227), // ∧\n  $nand: \"Not And\",\n  $nanyOf: \"Not Any\",\n  $ne: \"Not Equal\",\n  $nor: \"Not Or\",\n  $or: String.fromCharCode(0x02228), // ∨\n};\n\nexport { SymbolsEntities, SymbolsTypable, AR, EN, ES, TH };\n\n// probably a more eloquent way of doing this but ran out of time.\n// export const PREDICATE_OPERATORS = [\"$eq\", \"$gt\", \"$lt\", \"$gte\", \"$lte\", \"$like\", \"$in\"];\n// export const JUNCTION_OPERATORS = [\"$and\", \"$or\"];\n// export const predefinedLabels = {\n//   Symbols,\n//   en: Long,\n//   \"en-US\": Long,\n//   es: ES,\n//   \"es-MX\": ES,\n//   \"th-TH\": TH,\n//   AR,\n// };\n","// ------------------ projection\nimport {\n  CONSTS as PROJECTION_CONSTS,\n  EXAMPLE_JSON_BLUE_SKIES as PROJECTION_EXAMPLE_JSON_BLUE_SKIES,\n} from \"gabby-query-protocol-projection\";\n\n// ------------------ Predicate Formula\nimport {\n  CONSTS as LIB_CONSTS,\n  EXAMPLE_JSON_BLUE_SKIES as LIB_EXAMPLE_JSON_BLUE_SKIES,\n} from \"gabby-query-protocol-lib\";\n\n// ------------------ Misc\nimport * as opLabelsI18N from \"./operator-labels\";\n\nconst GABBY_EXAMPLE_JSON_BLUE_SKIES = {\n  LIB: LIB_EXAMPLE_JSON_BLUE_SKIES,\n  PROJECTION: PROJECTION_EXAMPLE_JSON_BLUE_SKIES,\n};\n\nconst GABBY_CONSTS = {\n  LIB: LIB_CONSTS,\n  PROJECTION: PROJECTION_CONSTS,\n};\n\n// ------------------------ Export\nexport { GABBY_EXAMPLE_JSON_BLUE_SKIES, GABBY_CONSTS, opLabelsI18N };\n","import Typography from \"@mui/material/Typography\";\nimport { ChangeEvent, useState } from \"react\";\nimport { Input } from \"@mui/material\";\n\ntype Props = {\n  labelText: string;\n  onChange: (newLabelText: string) => void;\n};\n\nexport const EditableLabel = ({ labelText, onChange }: Props) => {\n  const [isOpenForEdit, setIsOpenForEdit] = useState(false);\n  const handleTextChange = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange(e.target.value);\n  };\n\n  const setOpenForEditTrue = () => {\n    setIsOpenForEdit(true);\n  };\n\n  const setOpenForEditFalse = () => {\n    setIsOpenForEdit(false);\n  };\n\n  return (\n    <>\n      {!isOpenForEdit && (\n        <Typography>\n          <span onClick={setOpenForEditTrue}>{labelText}</span>\n        </Typography>\n      )}\n\n      {isOpenForEdit && (\n        <Input\n          sx={{ maxWidth: \"25em\" }}\n          onChange={handleTextChange}\n          onBlur={setOpenForEditFalse}\n          id=\"projection-label-editor\"\n          name=\"projection-label-editor\"\n          value={labelText}\n        />\n      )}\n    </>\n  );\n};\n","import Chip from \"@mui/material/Chip\";\nimport { IconButtonRemove } from \"../common/IconButtonRemove\";\nimport { AscDesIconButton } from \"./projection-pill-components/AscDesIconButton\";\n\nimport { ProjectionHooks } from \"../../GabbyQueryProtocol\";\n\nimport { EditableLabel } from \"./projection-pill-components/EditableLabel\";\n\nconst { useProjectionSubjects } = ProjectionHooks;\nconst nextSortOrder = (currentSortOrder: number) => {\n  switch (currentSortOrder) {\n    case -1:\n      return 0;\n    case 0:\n      return 1;\n    case 1:\n      return -1;\n    default:\n      return 0;\n  }\n};\n\ntype Props = {\n  projectionId: string;\n};\nexport const ProjectionInteractiveItemPill = ({ projectionId }: Props) => {\n  // TODO - *tmc* make sure the getProjectedItem(projectionId) doesn't wreak havoc with re-render\n  const { removeProjectionItem } = useProjectionSubjects();\n  const { getProjectedItem, updateProjectedItem } = useProjectionSubjects();\n  // const {\n  //   // projectedSubject: initialProjectionItem,\n  //   updateProjectionSubject: updateProjectionItem,\n  // } = useProjectionSubjectProperties(projectionId);\n\n  const handleSortOrderChange = () => {\n    updateProjectedItem(projectionId, {\n      ...getProjectedItem(projectionId),\n      sortOrder: nextSortOrder(getProjectedItem(projectionId).sortOrder),\n    });\n  };\n\n  const handelUpdateLabel = (newText: string) => {\n    updateProjectedItem(projectionId, {\n      ...getProjectedItem(projectionId),\n      label: newText,\n    });\n  };\n\n  return (\n    <Chip\n      icon={\n        <AscDesIconButton\n          onSortOrderClick={handleSortOrderChange}\n          sortOrder={getProjectedItem(projectionId).sortOrder}\n        />\n      }\n      label={\n        <EditableLabel\n          labelText={getProjectedItem(projectionId).label}\n          onChange={handelUpdateLabel}\n        />\n      }\n      onDelete={() => removeProjectionItem(projectionId)}\n      deleteIcon={<IconButtonRemove onClick={() => removeProjectionItem(projectionId)} />}\n      variant=\"outlined\"\n      color=\"primary\"\n      // TODO - *tmc* theme color here\n      sx={{ backgroundColor: \"white\" }}\n    />\n  );\n};\n","import { ProjectionInteractiveItemPill } from \"./ProjectionInteractiveItemPill\";\nimport { useTheme } from \"@mui/system\";\nimport { Theme } from \"@mui/material/styles\";\nimport { customStylesWithTheme } from \"../../Application/custom-styles\";\n\nimport {\n  DragDropContext,\n  Droppable,\n  Draggable,\n  DropResult,\n  DraggingStyle,\n  NotDraggingStyle,\n} from \"react-beautiful-dnd\";\n// TODO - *tmc* this should import like this\n\nimport { ProjectionHooks } from \"../../GabbyQueryProtocol\";\nconst { useProjectionUtilities, useProjectionSubjects } = ProjectionHooks;\n\n// const { useProjectionSubjects } = ProjectionContextHooks;\n\nconst reorder = (list: string[], startIndex: number, endIndex: number) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getListStyle = (isDraggingOver: boolean, theme: Theme) => {\n  const customStyles = customStylesWithTheme(theme);\n\n  return {\n    //   background: isDraggingOver ? \"lightblue\" : `${customStyles.backgroundLightGrey}`,\n    background: isDraggingOver ? \"lightblue\" : `${customStyles.backgroundLightGrey}`,\n\n    //  background: isDraggingOver ? \"lightblue\" : theme.palette.grey[100],\n    borderRadius: \"5px\",\n    display: \"flex\",\n    padding: grid,\n    overflow: \"auto\",\n  };\n};\n\nconst getItemStyle = (\n  isDragging: boolean,\n  draggableStyle?: DraggingStyle | NotDraggingStyle\n): React.CSSProperties | undefined => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  margin: `${grid}px ${grid}px 0 0`,\n  // margin: `${grid}px`,\n  // change background colour if dragging\n  // background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nexport const ProjectionInteractive = () => {\n  const theme = useTheme();\n  const { getColumnOrderedProjectionDictionary } = useProjectionUtilities();\n  const { updateProjectedItem } = useProjectionSubjects();\n\n  const updateSubjectColumnPosition = (projectionKey: string, newColumnPosition: number) => {\n    // updateProjectionSubject(projectionKey, { columnOrder: newColumnPosition });\n    updateProjectedItem(projectionKey, { columnOrder: newColumnPosition });\n  };\n\n  const onDragEndProjection = (result: DropResult) => {\n    if (!result.destination) {\n      return; // dropped outside the list\n    }\n\n    if (result.source.index === result.destination.index) {\n      return; // no move\n    }\n\n    const reorderedKeyPosition = reorder(\n      Object.keys(getColumnOrderedProjectionDictionary()),\n      result.source.index,\n      result.destination.index\n    );\n\n    reorderedKeyPosition.forEach((projectionKey, index) => {\n      updateSubjectColumnPosition(projectionKey, index);\n    });\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEndProjection}>\n      <Droppable droppableId=\"droppable2\" direction=\"horizontal\">\n        {(provided, snapshot) => (\n          <div\n            ref={provided.innerRef}\n            style={{\n              ...getListStyle(snapshot.isDraggingOver, theme as Theme),\n              ...{ flexWrap: \"wrap\" },\n              // some reason react/compiler, \"wrap\" not correct type, when in getListStyle\n            }}\n            {...provided.droppableProps}\n          >\n            {Object.entries(getColumnOrderedProjectionDictionary()).map(\n              ([projectionId, projection], index) => (\n                <Draggable key={projectionId} draggableId={projectionId} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n                    >\n                      <ProjectionInteractiveItemPill projectionId={projectionId} />\n                    </div>\n                  )}\n                </Draggable>\n              )\n            )}\n\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@mui/material/TextField\";\nimport { useState } from \"react\";\n\nconst isNumeric = (value: any): boolean => {\n  return !Number.isNaN(value - parseFloat(value));\n};\n\nconst decimalPattern = \"/[0-9\\\\.]*/\";\n\ninterface IProps {\n  datatype: \"integer\" | \"decimal\";\n  id: string;\n  label: string;\n  name: string;\n  onChange: (value: number | string) => void; // we'll allow empty strings\n  value: number | string;\n}\n\nexport const NumberInput = ({\n  datatype,\n  id,\n  label,\n  name,\n  onChange,\n  value,\n}: IProps): JSX.Element => {\n  //\n  const [hasError, setHasError] = useState(false);\n\n  const handleValueChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const inputValue = event.target.value as string;\n    onChange(inputValue);\n    if (!isNumeric(inputValue)) {\n      setHasError(true);\n    } else {\n      setHasError(false);\n    }\n  };\n\n  return (\n    <FormControl sx={{ width: \"100%\" }} variant=\"outlined\">\n      <TextField\n        error={hasError}\n        id={id}\n        inputProps={{ inputMode: \"numeric\", pattern: decimalPattern }}\n        label={label}\n        name={name}\n        type=\"text\" // may not be supported on all browsers\n        onChange={handleValueChange}\n        value={value}\n        variant=\"outlined\"\n      />\n    </FormControl>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport DoneSharpIcon from \"@mui/icons-material/DoneSharp\";\nimport ClearSharpIcon from \"@mui/icons-material/ClearSharp\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Grid from \"@mui/material/Grid\";\n\nimport { useTranslation } from \"react-i18next\";\n\ninterface Props {\n  onFinish: () => void;\n  onCancel: () => void;\n}\n\nexport const ButtonsFinishCancelIcon = ({ onFinish, onCancel }: Props): JSX.Element => {\n  const { t, i18n } = useTranslation();\n  return (\n    <Grid container spacing=\"3\">\n      <Grid item xs={6}>\n        <IconButton\n          aria-label={t(\"ButtonsFinishCancelLarge_finish\")}\n          color=\"success\"\n          onClick={onFinish}\n        >\n          <DoneSharpIcon fontSize=\"medium\" />\n        </IconButton>\n      </Grid>\n      <Grid item xs={6}>\n        <IconButton\n          aria-label={t(\"ButtonsFinishCancelLarge_cancel\")}\n          color=\"error\"\n          onClick={onCancel}\n        >\n          <ClearSharpIcon fontSize=\"medium\" />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport Button from \"@mui/material/Button\";\nimport DoneSharpIcon from \"@mui/icons-material/DoneSharp\";\nimport ClearSharpIcon from \"@mui/icons-material/ClearSharp\";\nimport { useTranslation } from \"react-i18next\";\nimport Grid from \"@mui/material/Grid\";\n\ninterface Props {\n  onFinish: () => void;\n  onCancel: () => void;\n}\n\nexport const ButtonsFinishCancelText = ({ onFinish, onCancel }: Props): JSX.Element => {\n  const { t, i18n } = useTranslation();\n\n  return (\n    <Grid container spacing=\"3\">\n      <Grid item xs={6}>\n        <Button\n          aria-label={t(\"ButtonsFinishCancelLarge_finish\")}\n          color=\"success\"\n          fullWidth\n          onClick={onFinish}\n          startIcon={<DoneSharpIcon />}\n          variant=\"outlined\"\n        >\n          {t(\"ButtonsFinishCancelLarge_finish\")}\n        </Button>\n      </Grid>\n      <Grid item xs={6}>\n        <Button\n          aria-label={t(\"ButtonsFinishCancelLarge_cancel\")}\n          color=\"error\"\n          fullWidth\n          onClick={onCancel}\n          startIcon={<ClearSharpIcon />}\n          variant=\"outlined\"\n        >\n          {t(\"ButtonsFinishCancelLarge_cancel\")}\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport FormControl from \"@mui/material/FormControl\";\nimport TextField from \"@mui/material/TextField\";\n\ninterface IProps {\n  id: string;\n  labelText: string;\n  name: string;\n  onChange: (value: string) => void;\n  value: string;\n}\n\nexport const StringInput = ({ id, labelText, name, onChange, value }: IProps): JSX.Element => {\n  const handleValueChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const inputValue = event.target.value as string;\n    onChange(inputValue);\n  };\n\n  return (\n    <FormControl sx={{ width: \"100%\" }} variant=\"outlined\">\n      <TextField\n        id={id}\n        name={name}\n        label={labelText}\n        value={value}\n        onChange={handleValueChange}\n        variant=\"outlined\"\n        type=\"text\"\n      />\n    </FormControl>\n  );\n};\n","import { useState } from \"react\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Stack } from \"@mui/material\";\n\nimport { ProjectionHooks } from \"../../GabbyQueryProtocol\";\n\nimport { TProjectionProperties } from \"gabby-query-protocol-projection\";\nimport { NumberInput } from \"../PredicateFormulaEditor/input/NumberInput\";\nimport { ButtonsFinishCancelIcon } from \"../common/ButtonsFinishCancelIcon\";\nimport { ButtonsFinishCancelText } from \"../common/ButtonsFinishCancelText\";\nimport { TProjectionItemProperties } from \"gabby-query-protocol-projection/dist/ProjectionEditor\";\nimport { StringInput } from \"../PredicateFormulaEditor/input/StringInput\";\n\nconst { useProjectionUtilities } = ProjectionHooks;\n\nconst nextSortOrder = (currentSortOrder: number) => {\n  switch (currentSortOrder) {\n    case -1:\n      return 0;\n    case 0:\n      return 1;\n    case 1:\n      return -1;\n    default:\n      return 0;\n  }\n};\n\nconst sortLabelText = (currentSortOrder: number) => {\n  switch (currentSortOrder) {\n    case -1:\n      return \"Descending\";\n    case 0:\n      return \"N/A\";\n    case 1:\n      return \"Ascending\";\n    default:\n      return 0;\n  }\n};\n\ntype Props = {\n  buttonStyle?: \"iconCancelFinishButtons\" | \"textCancelFinishButtons\";\n  initialProjectionItem: TProjectionItemProperties;\n  onFinish: (newProjectionItem: TProjectionProperties) => void;\n  onCancel: () => void;\n};\n\nexport const ProjectionItemEditor = ({\n  buttonStyle,\n  initialProjectionItem,\n  onFinish,\n  onCancel,\n}: Props) => {\n  const { t } = useTranslation();\n  const [newProjectionItem, setNewProjectionItem] =\n    useState<TProjectionItemProperties>(initialProjectionItem);\n  // const subjectionDictionary = useProjectionSubjects().getProjectableSubjectDictionary();\n  const subjectionDictionary = useProjectionUtilities().getProjectableSubjectDictionary();\n\n  const projectableSubjectIds = subjectionDictionary.getSubjectIds();\n\n  const handleSubjectSelectChange = (event: SelectChangeEvent, child: any) => {\n    const subjectId = event.target.value as string;\n    const projectableSubject = subjectionDictionary.getSubjectById(subjectId);\n    setNewProjectionItem({\n      ...newProjectionItem,\n      ...{ subjectId, label: projectableSubject.defaultLabel },\n    });\n  };\n\n  const handleSortOrderClick = () => {\n    setNewProjectionItem({\n      ...newProjectionItem,\n      ...{ sortOrder: nextSortOrder(newProjectionItem.sortOrder) },\n    });\n  };\n\n  const handleLabelTextChange = (newText: string) => {\n    setNewProjectionItem({\n      ...newProjectionItem,\n      ...{ label: newText },\n    });\n  };\n\n  const handleColumnOrderChange = (columnOrder: number | string) => {\n    const effectiveColumnOrder = isNaN(parseInt(\"\" + columnOrder))\n      ? 0\n      : parseInt(\"\" + columnOrder);\n\n    setNewProjectionItem({\n      ...newProjectionItem,\n      ...{ columnOrder: columnOrder as number },\n    });\n  };\n\n  const handleFinishClick = () => {\n    onFinish(newProjectionItem);\n  };\n\n  const SubjectSelectFormControl = () => {\n    return (\n      <FormControl variant=\"outlined\" sx={{ width: \"100%\", marginTop: \"10px\" }}>\n        <InputLabel htmlFor=\"editor-select-subject\">{t(\"Column ID\")}</InputLabel>\n        <Select\n          inputProps={{\n            name: \"editor-select-subject\",\n            id: \"editor-select-subject\",\n          }}\n          native\n          label={t(\"Column ID\")}\n          variant=\"outlined\"\n          onChange={handleSubjectSelectChange}\n          value={newProjectionItem.subjectId}\n        >\n          {projectableSubjectIds.map((projectableId, idx) => {\n            const projectableSubject = subjectionDictionary.getSubjectById(projectableId);\n            return (\n              <option key={projectableId} value={projectableId}>\n                {projectableSubject.defaultLabel || projectableId}\n              </option>\n            );\n          })}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  return (\n    // TODO - *tmc* use theme color\n    <div style={{ border: \"1px solid black;\" }}>\n      {t(\"Project Item Editor\")}\n      <Stack spacing={3}>\n        <SubjectSelectFormControl />\n        <StringInput\n          id=\"new-projection-column-label\"\n          name=\"new-projection-column-label\"\n          onChange={handleLabelTextChange}\n          labelText=\"Column Headers\"\n          value={newProjectionItem.label}\n        />\n        <NumberInput\n          datatype=\"integer\"\n          id=\"new-projection-column\"\n          label=\"Column Order\"\n          name=\"new-projection-column\"\n          onChange={handleColumnOrderChange}\n          value={newProjectionItem.columnOrder}\n        />\n        <Button variant=\"outlined\" onClick={handleSortOrderClick}>\n          {t(\"Sort Order:\")} {sortLabelText(newProjectionItem.sortOrder)}\n        </Button>\n        {buttonStyle === \"iconCancelFinishButtons\" && (\n          <ButtonsFinishCancelIcon onFinish={handleFinishClick} onCancel={onCancel} />\n        )}\n        {buttonStyle === \"textCancelFinishButtons\" && (\n          <ButtonsFinishCancelText onFinish={handleFinishClick} onCancel={onCancel} />\n        )}\n      </Stack>\n    </div>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\n/*\nTo use:\n   const parentRef = React.useRef<HTMLElement>(null);\n   const [isOpen, setIsOpen] = React.useState()\n   ...\n   <div ref={parentRef}>\n      any stuff goes here\n      <button onClick={()=>{setIsOpen(!isOpen)}}>\n        toggle open/close \n      </button>        \n   </div>\n    <PopoverContainer\n      children={<SomeComponent />},\n      isOpen={isPopOverOpen}\n      minWidth=\"500px\",\n      onClickAway={()=>{setIsOpen(false)}},\n      parentEl={stackRef.current}\n      width=\"500px\",\n    />\n*/\n\nimport React, { ReactNode } from \"react\";\nimport Popover from \"@mui/material/Popover\";\nimport Box from \"@mui/material/Box\";\n\ninterface Props {\n  children: ReactNode;\n  isOpen: boolean;\n  minWidth?: number | string;\n  onClickAway: () => void;\n  parentEl: HTMLElement | null;\n  width?: number | string;\n}\n\nexport function PopoverContainer({\n  children,\n  isOpen,\n  minWidth,\n  onClickAway,\n  parentEl,\n  width,\n}: Props): JSX.Element {\n  return (\n    <Popover\n      // TODO *tmc* this should use theme at least for color, black is the wrong color.\n      PaperProps={{ sx: { border: \"1px black solid\" } }}\n      sx={{ width }}\n      open={isOpen}\n      anchorEl={parentEl}\n      onClose={onClickAway}\n      transformOrigin={{ horizontal: -10, vertical: -35 }}\n      transitionDuration={500}\n    >\n      <Box sx={{ m: \"10px\", minWidth }}>{children}</Box>\n    </Popover>\n  );\n}\n\nPopoverContainer.defaultProps = {\n  width: \"50%\",\n  minWidth: \"250px\",\n  layout: \"3row\",\n};\n","import { TProjectionItemProperties } from \"gabby-query-protocol-projection/dist/ProjectionEditor\";\nimport { ProjectionItemEditor } from \"./ProjectionItemEditor\";\nimport { ProjectionHooks } from \"../../GabbyQueryProtocol\";\n\nimport { useRef, useState } from \"react\";\nimport { PopoverContainer } from \"../common/PopoverContainer\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\nimport { useTheme } from \"@mui/system\";\nimport { customStyles } from \"../../Application/custom-styles\";\n\nconst { useProjectionSubjects, useProjectionUtilities } = ProjectionHooks;\n\nexport const ProjectionItemCreator = () => {\n  const theme = useTheme;\n  const [isOpenForEdit, setIsOpenForEdit] = useState(false);\n  const [newProjectionItem, setNewProjectionItem] = useState({});\n  const { addProjectionItem } = useProjectionSubjects();\n  const { makeDefaultProjectionItem } = useProjectionUtilities();\n\n  const projectionItem = makeDefaultProjectionItem();\n  const containerRef = useRef(null);\n  const handleFinish = (updatedProjectionItem: TProjectionItemProperties) => {\n    setNewProjectionItem(updatedProjectionItem);\n    setIsOpenForEdit(false);\n    addProjectionItem(updatedProjectionItem);\n  };\n\n  const setIsOpenForEditFalse = () => {\n    setIsOpenForEdit(false);\n  };\n\n  const setIsOpenForEditTrue = () => {\n    setIsOpenForEdit(true);\n  };\n\n  const Editor = () => {\n    return (\n      <ProjectionItemEditor\n        initialProjectionItem={projectionItem}\n        onFinish={handleFinish}\n        onCancel={() => {\n          setIsOpenForEdit(false);\n        }}\n        buttonStyle=\"textCancelFinishButtons\"\n      />\n    );\n  };\n\n  return (\n    <div ref={containerRef} style={{ display: \"inline\", float: \"left\" }}>\n      <PopoverContainer\n        children={<Editor />}\n        isOpen={isOpenForEdit}\n        parentEl={containerRef.current}\n        onClickAway={setIsOpenForEditFalse}\n      />\n      <IconButton\n        onClick={setIsOpenForEditTrue}\n        size=\"large\"\n        // color={customStyles.affirmativeGreen}\n        sx={{\n          color: `${customStyles.affirmativeGreen}`,\n          // mt: \"12px\", // hate to do it\n          // height: \"20px\",\n        }}\n\n        // aria-label=\"upload picture\"\n        // component=\"span\"\n      >\n        <AddCircleOutlineOutlinedIcon fontSize=\"large\" />\n      </IconButton>\n    </div>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport { Paper } from \"@mui/material\";\nimport {\n  ProjectionEditorFactory,\n  EXAMPLE_JSON_BLUE_SKIES,\n  TProjectionProperties,\n} from \"gabby-query-protocol-projection\";\nimport { ProjectionInteractive } from \"./ProjectionInteractive\";\nimport { ProjectionItemCreator } from \"./ProjectionItemCreator\";\nimport { useTheme } from \"@mui/system\";\nimport { Theme } from \"@mui/material/styles\";\nimport { customStyles } from \"../../Application/custom-styles\";\nconst PROJECTION_EXAMPLE_JSON = EXAMPLE_JSON_BLUE_SKIES;\n\nconst projectionEditor = ProjectionEditorFactory.fromJson({\n  projectableSubjectDictionaryJson: PROJECTION_EXAMPLE_JSON.projectableSubjectDictionaryJson,\n  projectionItemsJson: PROJECTION_EXAMPLE_JSON.projectionJson,\n});\n\nexport const DemoProjectionInitialized = (): JSX.Element => {\n  const theme = useTheme();\n  return (\n    <div style={{ margin: \"20px\" }}>\n      <div\n        style={{\n          borderRadius: \"5px\",\n          backgroundColor: theme.palette.grey[100],\n          border: `1px solid ${customStyles.sectionBorder}`,\n        }}\n      >\n        <ProjectionItemCreator />\n        <ProjectionInteractive />\n      </div>\n    </div>\n  );\n};\n","export const uiConstants = {\n  projectionDocumentationUrl: \"https://github.com/terary/gabby-query-protocol-projection\",\n};\n","import { Paper, Stack, Typography } from \"@mui/material\";\nimport { PageContentWrapper } from \"../Application\";\nimport { DemoProjectionInitialized } from \"../GabbyComponents/ProjectionV2/DemoProjectionInitialized\";\nimport GabbyThemeProvider from \"../Application/AppContextProviders/GabbyThemeProvider\";\nimport { customStyles } from \"../Application/custom-styles\";\nimport { uiConstants } from \"../Application/ui-constants\";\n\nimport {\n  ProjectionEditorFactory,\n  EXAMPLE_JSON_BLUE_SKIES,\n} from \"gabby-query-protocol-projection\";\n\nimport { ProjectionContext, ProjectionHooks } from \"../GabbyQueryProtocol\";\n\nconst { useProjectionUtilities } = ProjectionHooks;\n\nconst PROJECTION_EXAMPLE_JSON = EXAMPLE_JSON_BLUE_SKIES;\n\nconst projectionEditor = ProjectionEditorFactory.fromJson({\n  projectableSubjectDictionaryJson: PROJECTION_EXAMPLE_JSON.projectableSubjectDictionaryJson,\n  projectionItemsJson: PROJECTION_EXAMPLE_JSON.projectionJson,\n});\n\nconst PredicateItemDefined = () => {\n  return (\n    <pre>\n      {`\n      {\n        subjectId: string;\n        sortOrder: number; // between [-1,1]\n        columnOrder: number; // any number ok.\n        label: string; \n      }`}\n    </pre>\n  );\n};\n\nexport const ProjectionDemoPageRaw = (): JSX.Element => {\n  const { getProjectionAsJson } = useProjectionUtilities();\n\n  return (\n    <PageContentWrapper>\n      <div style={{ margin: \"20px\" }}>\n        <Paper sx={{ p: \"3px\" }}>\n          <DemoProjectionInitialized />\n        </Paper>\n\n        <Stack direction=\"row\" spacing={3} sx={{ p: \"10px\" }}>\n          <Paper sx={{ p: \"10px\" }}>\n            <Typography color={customStyles.longText}>\n              <section>\n                <h2>Columns</h2>\n                <h4>Also known as Projection</h4>\n                <p>\n                  A projection is an array of ProjectionItems. A ProjectionItem is defined as:\n                  <code>\n                    <PredicateItemDefined />\n                  </code>\n                  Notable oddities:\n                  <ul>\n                    <li>\n                      <strong>Column Order</strong> in relational and not positional. Columns\n                      with order of <code>[-3,-2,-2,0,1,5,5,7]</code> are acceptable. For best\n                      results use unique values. The rational is that client code inject\n                      columns and/or build calculations from columns{\" \"}\n                      <code>E:2 = C:2 + B:2</code> or <code>SUM(E:2)</code>\n                    </li>\n                    <li>\n                      <strong>Labels</strong> Support most languages. The query document\n                      translations are done independent of the application. Hence, this\n                      application maybe on one language while the labelling for Projections may\n                      be in a different language.\n                    </li>\n                  </ul>\n                </p>\n                See <a href={uiConstants.projectionDocumentationUrl}>documentation</a> for more\n                details.\n              </section>\n            </Typography>\n          </Paper>\n          <Paper sx={{ p: \"10px\", direction: \"ltr\" }}>\n            Live Demo:\n            <code>\n              <pre>{JSON.stringify(getProjectionAsJson(), null, 2)}</pre>\n            </code>\n            <hr />\n          </Paper>\n        </Stack>\n      </div>\n    </PageContentWrapper>\n  );\n};\n\nexport const ProjectionDemoPage = () => {\n  return (\n    <GabbyThemeProvider>\n      <ProjectionContext.Provider projectionEditor={projectionEditor}>\n        <ProjectionDemoPageRaw />\n      </ProjectionContext.Provider>\n    </GabbyThemeProvider>\n  );\n};\n","import * as React from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AddCircleOut from \"@mui/icons-material/AddCircleOutline\";\n\nconst noop = () => {};\ntype Props = {\n  onClick?: () => void;\n  dense?: boolean;\n};\nexport const IconButtonsAdd = ({ dense = false, onClick = noop }: Props) => {\n  return (\n    <IconButton\n      size=\"small\"\n      sx={dense ? { mx: \"0px\", p: \"0px\" } : {}}\n      color=\"success\"\n      onClick={onClick}\n    >\n      <AddCircleOut fontSize=\"small\" />\n    </IconButton>\n  );\n};\n","import * as React from \"react\";\nimport Switch from \"@mui/material/Switch\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport { blue, green } from \"@mui/material/colors\";\nimport { useApplicationUtilities } from \"../../Application\";\n\ntype ConjunctionOperatorType = \"$and\" | \"$or\";\n\ntype Props = {\n  operator: ConjunctionOperatorType;\n  onChange: (operator: ConjunctionOperatorType) => void;\n};\n\nexport function OptionSwitch({ operator, onChange }: Props) {\n  const { t } = useApplicationUtilities();\n  const conjunctionLabel = t(\"All of these\");\n  const disjunctionLabel = t(\"Any of these\");\n\n  const handleOnChange = (event: React.SyntheticEvent<Element, Event>, checked: boolean) => {\n    if (checked) {\n      onChange(\"$and\");\n    } else {\n      onChange(\"$or\");\n    }\n  };\n  return (\n    <FormControlLabel\n      value=\"top\"\n      control={\n        <Switch\n          style={{ color: operator === \"$and\" ? blue[50] : green[50] }}\n          color=\"primary\"\n        />\n      }\n      label={operator === \"$and\" ? conjunctionLabel : disjunctionLabel}\n      labelPlacement=\"start\"\n      checked={operator === \"$and\"}\n      onChange={handleOnChange}\n    />\n  );\n}\n","/* eslint-disable import/prefer-default-export */\n/* eslint-disable react/jsx-props-no-spreading */\nimport * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport { formatISO } from \"date-fns\";\nimport DatePicker from \"@mui/lab/DatePicker\";\nimport { useApplicationUtilities } from \"../../../Application\";\nimport { AppContextProviders } from \"../../../Application/AppContextProviders\";\n\nconst iso8601LongRegex =\n  /^\\d{4}-[0-1][0-9]-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d((.\\d{3}){0,1}Z|(\\+|-)[0-2]\\d:[0-5]\\d)$/;\n\nconst noopIsValid = (value: unknown) => true;\n\nconst toMidnight = (date: Date) => {\n  const dateWithoutTime = date.toISOString().split(\"T\")[0];\n  return new Date(dateWithoutTime);\n};\n\ninterface Props {\n  // formatMask: string;\n  id: string;\n  isValid?: (value: unknown) => boolean;\n  label: string;\n  name: string;\n  onChange: (value: string) => void; // we'll allow empty strings\n  value: string;\n}\n\nexport function ExperimentalDateInput({\n  // formatMask,\n  id,\n  isValid = noopIsValid,\n  label,\n  name,\n  onChange,\n  value,\n}: Props): JSX.Element {\n  const { getCurrentLocale } = useApplicationUtilities();\n  const handleOnChange = (newValue: Date | null) => {\n    if (!isValid(newValue)) {\n      return;\n    }\n    if (!newValue || !iso8601LongRegex.test(newValue.toISOString())) {\n      return;\n    }\n\n    if (newValue !== null) {\n      onChange(formatISO(toMidnight(newValue)));\n    } else {\n      onChange(\"\");\n    }\n  };\n\n  return (\n    <DatePicker\n      label={label}\n      mask={getCurrentLocale().dateFormatMap}\n      value={value}\n      onChange={handleOnChange}\n      InputProps={{ id, name }}\n      renderInput={(params) => <TextField {...params} sx={{ width: \"100%\" }} />}\n    />\n  );\n}\n\nExperimentalDateInput.defaultProps = {\n  isValid: noopIsValid,\n};\n\nexport const ExperimentalDateInputWithAppContext = (props: Props) => {\n  return (\n    <AppContextProviders>\n      <ExperimentalDateInput {...props} />\n    </AppContextProviders>\n  );\n};\n","import { ExperimentalDateInputWithAppContext } from \"../../common/experimental/ExperimentalDateInput\";\n\nconst noopIsValid = (newValue: unknown) => true;\n\ninterface Props {\n  formatMask: string;\n  id: string;\n  isValid?: (value: unknown) => boolean;\n  label: string;\n  name: string;\n  onChange: (value: string) => void; // we'll allow empty strings\n  value: string;\n}\nexport const DateInput = ({\n  formatMask,\n  id,\n  isValid = noopIsValid,\n  label,\n  name,\n  onChange,\n  value,\n}: Props): JSX.Element => {\n  return (\n    <ExperimentalDateInputWithAppContext\n      //      formatMask={getCurrentLocale().dateFormatMap}\n      id={id}\n      isValid={isValid}\n      label={label}\n      name={name}\n      onChange={onChange}\n      value={value}\n    />\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport * as React from \"react\";\nimport { Theme, useTheme } from \"@mui/material/styles\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { TValueLabelList } from \"gabby-query-protocol-lib\";\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nfunction getStyles(theme: Theme) {\n  return {\n    fontWeight: theme.typography.fontWeightMedium,\n  };\n}\n\ntype ValueType = (number | string)[]; // do not export.  If export is necessary change name T... (no \"Type\"), the convention\n\ninterface IProps<T> {\n  isMultiple: boolean;\n  labelText: string;\n  options: TValueLabelList;\n  uniqueControlId: string;\n  value: T;\n  onChange: (value: T) => void;\n}\n\nexport function SelectInputGeneric<T extends (string | number) | (string | number)[]>({\n  isMultiple,\n  labelText,\n  options,\n  uniqueControlId,\n  value,\n  onChange,\n}: IProps<T>): JSX.Element {\n  const theme = useTheme();\n  const labelId = `${uniqueControlId}-label`;\n  const handleChangeScalar = (event: SelectChangeEvent<string | number>) => {\n    const {\n      target: { value: inputValue },\n    } = event;\n    onChange(inputValue as T);\n  };\n\n  const handleChangeArray = (event: SelectChangeEvent<(string | number)[]>) => {\n    const {\n      target: { value: inputValue },\n    } = event;\n\n    let newValue: (string | number)[];\n    newValue = inputValue as (string | number)[];\n\n    // - snippet left in, but causes issues with coverage\n    //   no way to test for our purposes, we never expect the autoComplete property to be set\n    // ------------------------\n    // On autofill we get a the stringified value.\n    // if (Array.isArray(inputValue)) {\n    //   newValue = inputValue;\n    // } else {\n    //   newValue = inputValue.split(\",\");\n    // }\n    onChange(newValue as T);\n  };\n\n  const handleChange = (event: SelectChangeEvent<T>) => {\n    if (isMultiple) {\n      handleChangeArray(event as SelectChangeEvent<(number | string)[]>);\n    } else {\n      handleChangeScalar(event as SelectChangeEvent<number | string>);\n    }\n  };\n\n  return (\n    <FormControl sx={{ width: \"100%\" }}>\n      <InputLabel id={labelId}>{labelText}</InputLabel>\n      <Select\n        labelId={labelId}\n        id={uniqueControlId}\n        multiple={isMultiple}\n        value={value as T}\n        onChange={handleChange}\n        input={<OutlinedInput label=\"Name\" />}\n        MenuProps={MenuProps}\n      >\n        {options.map((option) => (\n          <MenuItem key={option.value} value={option.value} style={getStyles(theme)}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import type {\n  TPredicateOperator,\n  TPredicateProperties,\n  TPredicatePropertiesArrayValue,\n} from \"gabby-query-protocol-lib\";\n\nimport { PredicateFormulaHooks } from \"../../GabbyQueryProtocol\";\n\nimport { DateInput } from \"./input/DateInput\";\nimport { NumberInput } from \"./input/NumberInput\";\nimport { StringInput } from \"./input/StringInput\";\nimport { SelectInputGeneric } from \"./input/SelectInputGeneric\";\n// import { usePredicateTreeUtilities } from \"../../GabbyQueryProtocol/PredicateFormula/hooks/usePredicateTreeUtilities\";\nconst { usePredicateTreeUtilities } = PredicateFormulaHooks;\n\ntype ValueType = number | string | (number | string)[]; // do not export.  If export is necessary change name T... (no \"Type\"), the convention\n\nconst isMultiSelectOperator = (operator: TPredicateOperator) => {\n  return operator === \"$anyOf\" || operator === \"$oneOf\";\n};\n\ninterface IProps {\n  id: string;\n  labelText?: string;\n  name: string;\n  onChange: (value: ValueType) => void;\n  predicate: TPredicateProperties | TPredicatePropertiesArrayValue;\n}\n\nexport const InputMux = ({\n  id,\n  labelText = \"Value\",\n  name,\n  onChange,\n  predicate,\n}: IProps): JSX.Element => {\n  const { getSelectOptions, getSubjectById } = usePredicateTreeUtilities();\n\n  // TODO - *tmc*\n  // does this need to be in effect?\n  const subject = getSubjectById(predicate.subjectId);\n\n  const handleDateInputChange = (newValue: string) => {\n    // using experiment date-picker test coverage sux\n    onChange(newValue);\n  };\n\n  const handleDecimalChange = (newValue: number | string) => {\n    onChange(newValue);\n  };\n\n  if (isMultiSelectOperator(predicate.operator)) {\n    // const optionList = getSelectOptions(predicate);\n    //     getSelectOptions: (subjectId: string, operator: TPredicateOperator) => {\n\n    const optionList = getSelectOptions(predicate.subjectId, predicate.operator);\n\n    if (predicate.operator === \"$oneOf\") {\n      return (\n        <SelectInputGeneric\n          isMultiple={false}\n          labelText=\"Value\"\n          uniqueControlId={predicate.subjectId} // this maybe a bad idea,\n          options={optionList}\n          value={predicate.value as number | string}\n          onChange={onChange}\n        />\n      );\n    }\n\n    let valueAsArray: (number | string)[];\n    if (predicate.value === \"\") {\n      valueAsArray = [];\n    } else if (!Array.isArray(predicate.value)) {\n      // coverage - this is not covered\n      valueAsArray = [predicate.value]; // does this produce array or object?\n    } else {\n      valueAsArray = predicate.value;\n    }\n\n    return (\n      <SelectInputGeneric\n        isMultiple\n        labelText=\"Value\"\n        options={optionList}\n        uniqueControlId={predicate.subjectId} // this maybe a bad idea,\n        value={\n          Array.isArray(predicate.value)\n            ? (predicate.value as (number | string)[])\n            : valueAsArray\n        }\n        onChange={onChange}\n      />\n    );\n  }\n  if (subject.datatype === \"datetime\") {\n    return (\n      <DateInput\n        formatMask=\"__/__/____\"\n        value={predicate.value as string}\n        onChange={handleDateInputChange}\n        id=\"theDatePicker\"\n        name=\"theDatePicker\"\n        label=\"value\"\n      />\n    );\n  }\n  if (subject.datatype === \"decimal\") {\n    return (\n      <NumberInput\n        datatype=\"decimal\"\n        id={id}\n        label={labelText}\n        name={name}\n        onChange={handleDecimalChange}\n        value={predicate.value as string}\n      />\n    );\n  }\n  if (subject.datatype === \"integer\") {\n    return (\n      <NumberInput\n        datatype=\"integer\"\n        id={id}\n        label={labelText}\n        name={name}\n        onChange={handleDecimalChange}\n        value={predicate.value as string}\n      />\n    );\n  }\n  return (\n    <StringInput\n      id={id}\n      labelText={labelText}\n      name={name}\n      onChange={onChange}\n      value={predicate.value as string}\n    />\n  );\n};\n\nInputMux.defaultProps = {\n  labelText: \"Value\",\n};\n","/* eslint-disable react/require-default-props */\n/* eslint-disable import/prefer-default-export */\n\nimport React, { useState } from \"react\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTheme } from \"@mui/system\";\nimport { GridSize } from \"@mui/material\";\nimport Grid from \"@mui/material/Grid\";\nimport type {\n  TPredicateOperator,\n  TPredicateProperties,\n  TPredicatePropertiesArrayValue,\n  TPredicateSubjectProperties,\n  TPredicateSubjectWithId,\n  TValidatorResponse,\n  TValidOperatorList,\n} from \"gabby-query-protocol-lib\";\nimport { ButtonsFinishCancelText } from \"../common/ButtonsFinishCancelText\";\nimport { ButtonsFinishCancelIcon } from \"../common/ButtonsFinishCancelIcon\";\nimport { InputMux } from \"./InputMux\";\n// import { usePredicateTreeUtilities } from \"../../GabbyQueryProtocol/PredicateFormula\";\n// import { PredicateFormulaEditorContextHooks } from \"../../GabbyQueryProtocol\";\n\nimport { PredicateFormulaHooks } from \"../../GabbyQueryProtocol\";\n\nimport { Validators } from \"gabby-query-protocol-lib\";\nimport type {\n  TPredicateNodeJson,\n  IPredicateSubjectDictionary,\n} from \"gabby-query-protocol-lib\";\nconst { usePredicateTreeUtilities } = PredicateFormulaHooks;\n\nexport interface IValidatePredicateAgainstOperator {\n  (\n    predicateJson: TPredicateNodeJson,\n    subjects: IPredicateSubjectDictionary\n  ): TValidatorResponse;\n}\n\n// TODO - *tmc* - this should be exported/imported from package somewhere?\ntype ValueType = number | string | (number | string)[]; // do not export.  If export is necessary change name T... (no \"Type\"), the convention\n\nconst getFirstValidOperator = (validOperators: TValidOperatorList): TPredicateOperator => {\n  return Object.keys(validOperators)[0] as TPredicateOperator;\n};\n\nconst breakpoints = {\n  \"1row\": {\n    subject: 3 as GridSize,\n    operator: 3 as GridSize,\n    value: 5 as GridSize,\n    controlButtons: 1 as GridSize,\n  },\n  \"2row\": {\n    subject: 6 as GridSize,\n    operator: 6 as GridSize,\n    value: 10 as GridSize,\n    controlButtons: 2 as GridSize,\n  },\n  \"3row\": {\n    subject: 12 as GridSize,\n    operator: 12 as GridSize,\n    value: 12 as GridSize,\n    controlButtons: 12 as GridSize,\n  },\n};\n\nconst noOpValidator = (\n  predicateProperties: TPredicateProperties | TPredicatePropertiesArrayValue\n): TValidatorResponse => {\n  return { hasError: false, errorMessages: [] };\n};\n\nconst noopTestSpyPredicateOnChange = (\n  predicateProperties: TPredicateProperties | TPredicatePropertiesArrayValue\n): void => {};\n\ninterface Props {\n  layout?: \"1row\" | \"2row\" | \"3row\";\n  initialPredicate: TPredicateProperties | TPredicatePropertiesArrayValue;\n  onCancel: () => void;\n  onFinish: (\n    predicateProperties: TPredicateProperties | TPredicatePropertiesArrayValue\n  ) => void;\n  testSpyPredicateOnChange?: (\n    predicateProperties: TPredicateProperties | TPredicatePropertiesArrayValue\n  ) => void;\n\n  validator?: IValidatePredicateAgainstOperator;\n  // validator?: (\n  //   predicateProperties: TPredicateProperties | TPredicatePropertiesArrayValue\n  // ) => TValidatorResponse;\n}\n\nexport const PredicateEditor = ({\n  layout = \"1row\",\n  initialPredicate,\n  onCancel,\n  onFinish,\n  testSpyPredicateOnChange = noopTestSpyPredicateOnChange,\n  validator = Validators.ValidatePredicateAgainstOperator,\n}: Props): JSX.Element => {\n  const theme = useTheme();\n  const { subjectDictionary, operatorLabels } = usePredicateTreeUtilities();\n\n  const [userMessage, setUserMessage] = useState<string | null>(null);\n  const [selectedSubject, setSelectedSubject] = React.useState<TPredicateSubjectWithId>(\n    subjectDictionary.getSubject(initialPredicate.subjectId)\n  );\n\n  const [predicateExpression, setPredicateExpression] = React.useState<\n    TPredicateProperties | TPredicatePropertiesArrayValue\n  >(initialPredicate);\n\n  const _updatePredicateState = (\n    newPredicate: TPredicateProperties | TPredicatePropertiesArrayValue\n  ) => {\n    testSpyPredicateOnChange(newPredicate);\n    setPredicateExpression(newPredicate);\n  };\n\n  const handleSelectedSubjectChange = (event: SelectChangeEvent) => {\n    const subjectId = event.target.value as string;\n    const subjectProps = subjectDictionary.getSubject(subjectId);\n\n    const operator = getFirstValidOperator(subjectProps.validOperators);\n    const newPredicate = { subjectId, operator, value: \"\" };\n\n    _updatePredicateState(newPredicate);\n\n    setSelectedSubject(subjectProps);\n  };\n\n  const handleOperatorChange = (event: SelectChangeEvent) => {\n    const operator = event.target.value as TPredicateOperator;\n    _updatePredicateState({ ...predicateExpression, operator, value: \"\" });\n  };\n\n  const handleValueChange = (value: ValueType) => {\n    const pExpression = { ...predicateExpression };\n\n    //@ts-ignore - there seems to be an issue with the way value is typed.\n    // should be resolved in future releases\n    pExpression.value = value;\n    // setPredicateExpression(pExpression);\n    _updatePredicateState(pExpression);\n  };\n\n  const handleFinishClick = () => {\n    const subject = subjectDictionary.getSubject(\n      predicateExpression.subjectId\n    ) as TPredicateSubjectProperties;\n\n    // TODO - *tmc* - this cast should not be required.  Issue is with validator\n    if (subject.datatype === \"integer\") {\n      predicateExpression.value = Number(predicateExpression.value);\n    }\n    const validatorResponse = validator(predicateExpression, subjectDictionary);\n    if (validatorResponse.hasError) {\n      console.log(\"Validation Debug:\", validatorResponse.errorMessages);\n      setUserMessage(\"Failed validation check console for more information\");\n    } else {\n      setUserMessage(null);\n      onFinish(predicateExpression);\n    }\n  };\n\n  const SubjectSelectFormControl = () => {\n    return (\n      <FormControl variant=\"outlined\" sx={{ width: \"100%\" }}>\n        <InputLabel htmlFor=\"editor-select-subject\">Subject</InputLabel>\n        <Select\n          inputProps={{\n            name: \"subjectId\",\n            id: \"editor-select-subject\",\n            \"data-testid\": \"test-subject-select\",\n          }}\n          label=\"Subject\"\n          native\n          onChange={handleSelectedSubjectChange}\n          value={selectedSubject.subjectId}\n        >\n          {subjectDictionary.getSubjectIds().map((subjectId) => {\n            const subject = subjectDictionary.getSubject(subjectId);\n            return (\n              <option key={subjectId} value={subjectId}>\n                {subject.defaultLabel || subjectId}\n              </option>\n            );\n          })}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  const OperatorSelectFormControl = () => {\n    return (\n      <FormControl variant=\"outlined\" sx={{ width: \"100%\" }}>\n        <InputLabel htmlFor=\"editor-select-operator\">Operator</InputLabel>\n        <Select\n          native\n          value={predicateExpression.operator}\n          onChange={handleOperatorChange}\n          label=\"Operator\"\n          inputProps={{\n            name: \"operator\",\n            id: \"editor-select-operator\",\n          }}\n        >\n          {Object.entries(selectedSubject.validOperators).map(([op, operatorAttributes]) => {\n            return (\n              <option key={op} value={op}>\n                {operatorLabels[op as TPredicateOperator]}\n              </option>\n            );\n          })}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={12} md={breakpoints[layout].subject}>\n        <SubjectSelectFormControl />\n      </Grid>\n      <Grid item xs={12} md={breakpoints[layout].operator}>\n        <OperatorSelectFormControl />\n      </Grid>\n      <Grid item xs={12} md={breakpoints[layout].value} style={{ textAlign: \"left\" }}>\n        <InputMux\n          id=\"mux-id\"\n          name=\"mux-name\"\n          predicate={predicateExpression}\n          onChange={handleValueChange}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        md={breakpoints[layout].controlButtons}\n        style={{ textAlign: \"center\" }}\n      >\n        {layout === \"1row\" && (\n          <ButtonsFinishCancelIcon onFinish={handleFinishClick} onCancel={onCancel} />\n        )}\n        {layout === \"2row\" && (\n          <ButtonsFinishCancelIcon onFinish={handleFinishClick} onCancel={onCancel} />\n        )}\n        {layout === \"3row\" && (\n          <ButtonsFinishCancelText onFinish={handleFinishClick} onCancel={onCancel} />\n        )}\n      </Grid>\n      {userMessage !== null && (\n        <Grid\n          item\n          xs={12}\n          alignContent=\"center\"\n          textAlign=\"center\"\n          style={{\n            color: theme.palette.error.main,\n            marginLeft: \"15px\",\n            marginRight: \"15px\",\n          }}\n        >\n          {userMessage}\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\n/*\nTo use:\n   const parentRef = React.useRef<HTMLElement>(null);\n   const [isOpen, setIsOpen] = React.useState()\n   ...\n   <div ref={parentRef}>\n      any stuff goes here\n      <button onClick={()=>{setIsOpen(!isOpen)}}>\n        toggle open/close \n      </button>        \n   </div>\n    <PopOverEditor\n      id=\"simple-popover\"\n      initialPredicate={thisPredicateExpression}\n      isOpen={isPopOverOpen}\n      onFinish={handleFinishPredicateEditor}\n      onCancel={() => {\n        setIsPopOverOpen(false);\n      }}\n      parentEl={stackRef.current}\n    />\n*/\n\nimport React from \"react\";\nimport Popover from \"@mui/material/Popover\";\n\nimport type {\n  TPredicateProperties,\n  TPredicatePropertiesArrayValue,\n} from \"gabby-query-protocol-lib\";\nimport Box from \"@mui/material/Box\";\nimport { PredicateEditor } from \"./PredicateEditor\";\nimport { PopoverContainer } from \"../common/PopoverContainer\";\n\ninterface Props {\n  id: string;\n  isOpen: boolean;\n  initialPredicate: TPredicateProperties | TPredicatePropertiesArrayValue;\n  layout?: \"1row\" | \"2row\" | \"3row\";\n  minWidth?: number | string;\n  onFinish: (\n    predicateProperties: TPredicateProperties | TPredicatePropertiesArrayValue\n  ) => void;\n  onCancel: () => void;\n  parentEl: HTMLElement | null;\n  width?: number | string;\n}\n\nexport function PopoverEditor({\n  id,\n  initialPredicate,\n  isOpen,\n  layout,\n  minWidth,\n  onCancel,\n  onFinish,\n  parentEl,\n  width,\n}: Props): JSX.Element {\n  return (\n    // <Popover\n    //   // TODO *tmc* this should use theme at least for color, black is the wrong color.\n    //   PaperProps={{ sx: { border: \"1px black solid\" } }}\n    //   sx={{ width }}\n    //   id={isOpen ? id : undefined}\n    //   open={isOpen}\n    //   anchorEl={parentEl}\n    //   onClose={onCancel}\n    //   transformOrigin={{ horizontal: -10, vertical: -35 }}\n    //   transitionDuration={500}\n    // >\n    //   <Box sx={{ m: \"10px\", minWidth }}>\n    <PopoverContainer onClickAway={onCancel} isOpen={isOpen} parentEl={parentEl}>\n      <PredicateEditor\n        initialPredicate={initialPredicate}\n        onFinish={onFinish}\n        onCancel={onCancel}\n        layout={layout}\n      />\n    </PopoverContainer>\n\n    //   </Box>\n    // </Popover>\n  );\n}\n\nPopoverEditor.defaultProps = {\n  width: \"50%\",\n  minWidth: \"250px\",\n  layout: \"3row\",\n};\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport type {\n  TPredicateProperties,\n  TPredicatePropertiesArrayValue,\n} from \"gabby-query-protocol-lib\";\n// import { predicateFormulaContextUtils } from \"../../GabbyQueryProtocol/PredicateFormula\";\nimport { IconButtonRemove } from \"../common/IconButtonRemove\";\nimport { IconButtonsAdd } from \"../common/IconButtonsAdd\";\nimport { OptionSwitch } from \"../common/OptionSwitch\";\nimport { PredicateEditorPopover } from \"../PredicateFormulaEditor\";\nimport { SxProps, useTheme, Theme } from \"@mui/system\";\nimport { blue, green } from \"@mui/material/colors\";\n\nimport { PredicateFormulaHooks } from \"../../GabbyQueryProtocol\";\nconst { useJunctionProperties, usePredicateTreeUtilities } = PredicateFormulaHooks;\n\ntype Props = {\n  predicateId: string;\n  children?: React.ReactNode;\n};\nexport const BranchView = ({ predicateId, children }: Props) => {\n  const editorContainerRef = React.useRef(null);\n  const theme = useTheme();\n  const [isOpenNewPredicateEditor, setIsOpenNewPredicateEditor] = React.useState(false);\n\n  const {\n    appendPredicate,\n    getJunctionProperties,\n    isRoot,\n    removeCurrentPredicateJunction,\n    setConjunction,\n    setDisjunction,\n  } = useJunctionProperties(predicateId);\n  const { makeEmptyPredicate } = usePredicateTreeUtilities();\n\n  const bg = getJunctionProperties()?.operator === \"$and\" ? green[50] : blue[50];\n\n  const handleJunctionSwitch = (operator: \"$and\" | \"$or\") => {\n    if (operator === \"$and\") {\n      setConjunction();\n    } else {\n      setDisjunction();\n    }\n  };\n\n  const handleRemovePredicateJunction = () => {\n    removeCurrentPredicateJunction();\n  };\n\n  const handleAddPredicateFinishClick = (\n    newPredicate: TPredicateProperties | TPredicatePropertiesArrayValue\n  ) => {\n    // run validator?\n    appendPredicate(newPredicate);\n    setIsOpenNewPredicateEditor(false);\n  };\n\n  const handleAddPredicateClick = () => {\n    setIsOpenNewPredicateEditor(true);\n  };\n\n  const handNewPredicateEditCancelClick = () => {\n    setIsOpenNewPredicateEditor(false);\n  };\n\n  const ControlButtons = () => {\n    return (\n      <>\n        <OptionSwitch\n          operator={getJunctionProperties().operator === \"$or\" ? \"$or\" : \"$and\"}\n          onChange={handleJunctionSwitch}\n        />\n        <IconButtonsAdd onClick={handleAddPredicateClick} />\n        {!isRoot && <IconButtonRemove onClick={handleRemovePredicateJunction} />}\n      </>\n    );\n  };\n\n  const PredicateEditorWrapper = () => {\n    return (\n      <PredicateEditorPopover\n        id={`${predicateId}-popover-editor`}\n        initialPredicate={makeEmptyPredicate()}\n        isOpen={isOpenNewPredicateEditor}\n        onFinish={handleAddPredicateFinishClick}\n        onCancel={handNewPredicateEditCancelClick}\n        parentEl={editorContainerRef.current}\n      />\n    );\n  };\n\n  const sx = {\n    // 'theme' didn't seem to work in from common utilities\n    border: `1px solid ${theme.palette.text.secondary}`,\n    borderRadius: \"4px\",\n    textAlign: \"center\",\n    backgroundColor: bg,\n    height: \"100%\",\n    m: \"3px\",\n    p: \"3px\",\n    width: \"calc(100% - 4px)\",\n  } as SxProps<Theme>;\n\n  return (\n    <Grid container spacing={1} sx={sx}>\n      <Grid item xs={12} ref={editorContainerRef}>\n        <PredicateEditorWrapper />\n        <ControlButtons />\n      </Grid>\n      {children}\n    </Grid>\n  );\n};\nBranchView.defaultProps = {\n  children: [],\n  bg: \"#7FFF00\",\n};\n","import * as React from \"react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport EditIcon from \"@mui/icons-material/Create\";\n\nconst noop = () => {};\ntype Props = {\n  onClick?: () => void;\n  dense?: boolean;\n};\nexport const IconButtonEdit = ({ dense = false, onClick = noop }: Props) => {\n  return (\n    <IconButton\n      size=\"small\"\n      sx={dense ? { mx: \"0px\", p: \"0px\" } : {}}\n      color=\"success\"\n      onClick={onClick}\n    >\n      <EditIcon fontSize=\"small\" />\n    </IconButton>\n  );\n};\n","import { styled } from \"@mui/material/styles\";\nimport Paper from \"@mui/material/Paper\";\n\n// TODO - *tmc* is this being used?\nconst parentDivisor = (numberOfChildren: number, currentWidth?: number) => {\n  const isTwoPart = numberOfChildren % 2 === 0;\n  const isThreePart = numberOfChildren % 3 === 0;\n\n  switch (true) {\n    case currentWidth !== undefined && currentWidth < 125:\n      return 12;\n    case isThreePart:\n      return 4;\n    case isTwoPart:\n      return 6;\n    default:\n      return true;\n  }\n};\n\n// TODO - *tmc* if this is being used many places make it app common\nconst PaperItem = styled(Paper)(({ theme }) => ({\n  ...theme.typography.body2,\n  padding: theme.spacing(1),\n  textAlign: \"center\",\n  color: theme.palette.text.secondary,\n}));\n\nexport { PaperItem, parentDivisor };\n","/* eslint-disable import/prefer-default-export */\nimport * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Stack } from \"@mui/material\";\nimport { IconButtonEdit } from \"../common/IconButtonEdit\";\nimport { IconButtonsAdd } from \"../common/IconButtonsAdd\";\nimport { useApplicationUtilities } from \"../../Application\";\n\nimport type {\n  TPredicateProperties,\n  TPredicatePropertiesArrayValue,\n} from \"gabby-query-protocol-lib\";\n//import { predicateFormulaContextUtils } from \"../../GabbyQueryProtocol/PredicateFormula\";\nimport { PredicateEditorPopover } from \"../PredicateFormulaEditor\";\nimport { IconButtonRemove } from \"../common/IconButtonRemove\";\n\nimport { PaperItem } from \"./common-utilities\";\n\nimport { PredicateFormulaHooks } from \"../../GabbyQueryProtocol\";\nconst { usePredicateProperties, usePredicateTreeUtilities } = PredicateFormulaHooks;\n\nexport const LeafView = ({\n  predicateId,\n}: // numberOfChildren,\n// childIndex,\n{\n  predicateId: string;\n  // numberOfChildren: number;\n  // childIndex: number;\n}) => {\n  const currentLocale = useApplicationUtilities().getCurrentLocale();\n\n  const [isOpenForEdit, setIsOpenForEdit] = React.useState(false);\n  const [isOpenForNew, setIsOpenForNew] = React.useState(false);\n  const editorContainerRef = React.useRef(null);\n\n  const {\n    appendPredicate,\n    getPredicateLeafProperties,\n    isRoot,\n    updateCurrentPredicate,\n    removeCurrentPredicate,\n  } = usePredicateProperties(predicateId);\n\n  const { makeEmptyPredicate, operatorLabels, subjectDictionary } =\n    usePredicateTreeUtilities();\n\n  const { predicateProperties } = getPredicateLeafProperties();\n  const currentSubject = subjectDictionary.getSubject(predicateProperties.subjectId);\n\n  const handleRemoveClick = () => {\n    removeCurrentPredicate();\n  };\n\n  const handleFinishEdit = (\n    predicateProperties: TPredicateProperties | TPredicatePropertiesArrayValue\n  ) => {\n    // this should run validator first\n    updateCurrentPredicate(predicateProperties);\n    setIsOpenForEdit(false);\n  };\n\n  const handleFinishNew = (\n    predicateProperties: TPredicateProperties | TPredicatePropertiesArrayValue\n  ) => {\n    // this should run validator first\n    appendPredicate(predicateProperties);\n    setIsOpenForEdit(false);\n    setIsOpenForNew(false);\n  };\n\n  const handelOpenForNewClick = () => {\n    setIsOpenForNew(true);\n  };\n\n  const PredicateEditorWrapper = () => {\n    return (\n      <PredicateEditorPopover\n        id={`${predicateId}-popover-editor`}\n        initialPredicate={isOpenForEdit ? predicateProperties : makeEmptyPredicate()}\n        isOpen={isOpenForEdit || isOpenForNew}\n        onFinish={isOpenForEdit ? handleFinishEdit : handleFinishNew}\n        onCancel={() => {\n          setIsOpenForEdit(false);\n          setIsOpenForNew(false);\n        }}\n        parentEl={editorContainerRef.current}\n      />\n    );\n  };\n\n  const ControlButtons = () => {\n    return (\n      <div style={{ width: \"100%\", display: \"inline\" }}>\n        <div style={{ float: \"right\", display: \"block\" }}>\n          <IconButtonEdit\n            dense\n            onClick={() => {\n              setIsOpenForEdit(!isOpenForEdit);\n            }}\n          />\n          <IconButtonsAdd dense onClick={handelOpenForNewClick} />\n          {!isRoot && <IconButtonRemove dense onClick={handleRemoveClick} />}\n        </div>\n      </div>\n    );\n  };\n\n  const PredicateStaticView = () => {\n    return (\n      <Stack direction=\"column\" spacing={1} alignItems=\"center\" sx={{ height: \"100%\" }}>\n        <ControlButtons />\n        <Stack direction=\"column\">\n          <span>{currentSubject.defaultLabel}</span>\n          <sub>({predicateProperties.subjectId})</sub>\n        </Stack>\n        <Stack direction=\"column\">\n          <span>{operatorLabels[predicateProperties.operator]}</span>\n          {currentLocale.languageCode !== \"en\" && <sub>({predicateProperties.operator})</sub>}\n        </Stack>\n        <span>{predicateProperties.value}</span>{\" \"}\n      </Stack>\n    );\n  };\n\n  return (\n    <Grid item md direction=\"row-reverse\" ref={editorContainerRef}>\n      <PaperItem sx={{ height: \"100%\", border: \"1px solid purple\", borderRadius: \"5px\" }}>\n        <PredicateEditorWrapper />\n        <PredicateStaticView />\n      </PaperItem>\n    </Grid>\n  );\n};\n","import * as React from \"react\";\nimport Grid from \"@mui/material/Grid\";\n\n// import { predicateFormulaContextUtils } from \"../../GabbyQueryProtocol/PredicateFormula\";\nimport { BranchView } from \"./BranchView\";\nimport { LeafView } from \"./LeafView\";\n\nimport { PredicateFormulaHooks } from \"../../GabbyQueryProtocol\";\n// import { usePredicateTreeUtilities } from \"../../GabbyQueryProtocol/PredicateFormula/hooks/usePredicateTreeUtilities\";\nconst { usePredicateTreeUtilities } = PredicateFormulaHooks;\n\ntype Props = {\n  predicateId: string;\n  numberOfChildren: number;\n  childIndex: number;\n};\n\nexport const MuxView = ({ predicateId, numberOfChildren, childIndex }: Props) => {\n  // const { getChildIdsOf, isBranchNode } = usePredicateUtilities(predicateId);\n  // const { getChildIdsOf, isBranchNode } = useJunctionProperties(predicateId);\n  const { getChildrenIds, testIsBranchNode } = usePredicateTreeUtilities();\n  const childrenIds = getChildrenIds(predicateId);\n  const [containerWidth, setContainerWidth] = React.useState(-1);\n  const editorContainerRef = React.useRef(null);\n\n  React.useEffect(() => {\n    setContainerWidth(\n      // @ts-ignore\n      editorContainerRef.current ? editorContainerRef.current.offsetWidth : 0\n    );\n  }, [editorContainerRef.current]);\n\n  const BranchingNode = () => {\n    return (\n      <Grid item sm direction=\"row-reverse\">\n        <BranchView predicateId={predicateId}>\n          {childrenIds.map((childId, idx) => (\n            <MuxView\n              predicateId={childId}\n              numberOfChildren={childrenIds.length}\n              childIndex={idx}\n            />\n          ))}\n        </BranchView>\n      </Grid>\n    );\n  };\n\n  const SingleNode = () => {\n    return (\n      <LeafView\n        predicateId={predicateId}\n        // numberOfChildren={numberOfChildren}\n        // childIndex={childIndex}\n      />\n    );\n  };\n  return (\n    <>\n      {testIsBranchNode(predicateId) && <BranchingNode />}\n      {!testIsBranchNode(predicateId) && <SingleNode />}\n    </>\n  );\n};\n","/* eslint-disable import/prefer-default-export */\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport { MuxView } from \"./MuxView\";\n\nimport { PredicateFormulaHooks } from \"../../GabbyQueryProtocol\";\nconst { useJunctionProperties } = PredicateFormulaHooks;\n\ntype Props = {\n  rootPredicateId: string;\n};\n\nexport function PredicateFormulaViewer({ rootPredicateId }: Props): JSX.Element {\n  const { getChildrenIds, isBranchNode } = useJunctionProperties(rootPredicateId);\n  const childrenIds = getChildrenIds();\n\n  const SingleNode = () => {\n    return <MuxView predicateId={rootPredicateId} numberOfChildren={0} childIndex={0} />;\n  };\n\n  const BranchingNode = () => {\n    return (\n      <MuxView\n        predicateId={rootPredicateId}\n        numberOfChildren={childrenIds.length}\n        childIndex={0}\n      />\n    );\n  };\n  return (\n    <>\n      <Box sx={{ flexGrow: 1 }}>\n        <Grid container spacing={3} data-predicate-tree=\"root\">\n          {isBranchNode ? <BranchingNode /> : <SingleNode />}\n        </Grid>\n      </Box>\n    </>\n  );\n}\n","import {\n  PredicateFormulaEditorFactory,\n  TPredicateProperties,\n  TPredicatePropertiesArrayValue,\n} from \"gabby-query-protocol-lib\";\nimport {\n  PredicateFormulaContext,\n  PredicateFormulaHooks,\n  GABBY_EXAMPLE_JSON_BLUE_SKIES,\n} from \"../GabbyQueryProtocol\";\n\nimport { PageContentWrapper, useApplicationUtilities } from \"../Application\";\nimport { customStyles } from \"../Application/custom-styles\";\n\nimport { opLabelsI18N } from \"../GabbyQueryProtocol\";\nimport { PredicateFormulaViewer } from \"../GabbyComponents/PredicateFormulaViewer\";\nimport { Paper, Stack, Typography } from \"@mui/material\";\nimport { TSupportedLanguages } from \"../Application/i18n/type\";\nconst { usePredicateTreeUtilities } = PredicateFormulaHooks;\n\nconst subjectDictionaryJson =\n  GABBY_EXAMPLE_JSON_BLUE_SKIES.LIB.predicateSubjectsDictionaryJson;\nconst predicateFormula = GABBY_EXAMPLE_JSON_BLUE_SKIES.LIB.predicateTreeJson;\n\nconst predicateFormulaEditor = PredicateFormulaEditorFactory.fromJson({\n  subjectDictionaryJson,\n  predicateTreeJson: predicateFormula,\n});\n\nconst validator = (\n  predicateProperties: TPredicateProperties | TPredicatePropertiesArrayValue\n) => {\n  return { hasError: false, errorMessages: [] };\n};\n\nexport const PredicateTreeDemoPageRaw = (): JSX.Element => {\n  const { getPredicateTreeAsJson } = usePredicateTreeUtilities();\n  return (\n    <PageContentWrapper>\n      <div style={{ margin: \"20px\" }}>\n        <Stack direction=\"row\">\n          <Stack\n            direction=\"column\"\n            alignItems=\"start\"\n            spacing={3}\n            sx={{ p: \"10px\", width: \"100%\" }}\n          >\n            <Paper sx={{ width: \"100%\" }}>\n              <PredicateFormulaViewer rootPredicateId={predicateFormulaEditor.rootNodeId} />\n            </Paper>\n\n            <Paper sx={{ p: \"10px\" }} elevation={3}>\n              <Typography color={customStyles.longText}>\n                <section>\n                  <h3>Gabby Query Protocol (GQP)</h3>\n                  <h3 style={{ marginBottom: \"5px\" }}>TL;DR</h3>\n                  <p style={{ marginTop: \"5px\" }}>\n                    Abstracts away the technology specific attributes to create generic queries\n                    that can be implemented across several different query engines, MySQL,\n                    MongoDB, Postgres, Javascript Filter function, etc. Given the generic\n                    nature of an GQP expression they are easily express using JSON,\n                    Swagger/OAP, graphing diagrams etc.{\" \"}\n                  </p>\n                </section>\n                <section style={{ marginTop: \"25px\" }}>\n                  <h3 style={{ marginBottom: \"5px\" }}>Explained</h3>\n                  <p style={{ marginTop: \"5px\" }}>\n                    Many everyday phenomenon can be expressed using Directed Rooted Tree\n                    Graphs*. Some examples include: determining permission validity, GraphQL\n                    No/SQL statements, file system structures, etc.\n                  </p>\n                  <p>\n                    Usually these expressions are system dependent and flexibility only comes\n                    at the cost of security.\n                  </p>\n                  <p>\n                    The purpose of Gabby Query Protocol (GQP) is to serve as a pattern to allow\n                    system secure system agnostic communication of these expressions.\n                  </p>\n                  <p>\n                    The GQP focuses on expressing query languages but can be easily\n                    extend/extroplated to be applied to other similar patterns. At the core GQP\n                    utilizes a a Predicate Tree model to share instructions on how to build\n                    query expressions. Each system has its own implementation with a common\n                    language (protocol). This layer of abstraction allow ease of validation,\n                    flexibility to change underlying technologies without breaking depend\n                    systems.\n                  </p>\n                  <p>\n                    <ul>\n                      Benefits include:\n                      <li>\n                        Freedom to change underlying systems without breaking client code\n                      </li>\n                      <li>Simplified validation (improved security)</li>\n                      <li> Flexibility to allow clients to build their own queries</li>\n                    </ul>\n                  </p>\n                  <p>\n                    Predicate Tree. Basically its a Directed Tree Graph with a few constraints:\n                    <ul>\n                      <li>No single Child</li>\n                      <li>No Orphan Child (Except maybe Root) </li>\n                      <li> No Circular References (because its a tree)</li>\n                      <li> All children have one and only one parent</li>\n                      <li>All children have link to their parent </li>\n                      <li>\n                        No parent has a link to their children (characteristic of a single link\n                        list)\n                      </li>\n                    </ul>\n                  </p>\n                  <p>\n                    Each system implements GQP depending on their resources and requirements.\n                  </p>\n                  <p>\n                    *Directed Rooted Tree Graphs. Also known as: Directed Rooted Acyclic Graph\n                    or Arborescence\n                  </p>\n                </section>\n              </Typography>\n            </Paper>\n          </Stack>\n          <Paper sx={{ p: \"10px\", direction: \"ltr\" }}>\n            Live Demo:\n            <code>\n              <pre>{JSON.stringify(getPredicateTreeAsJson(), null, 2)}</pre>\n            </code>\n          </Paper>\n        </Stack>\n      </div>\n    </PageContentWrapper>\n  );\n};\nconst getOperatorLabels = (languageCode: TSupportedLanguages) => {\n  // dealing with two 'supported languages'\n  switch (languageCode) {\n    case \"ar\":\n    case \"ar_ma\":\n      return opLabelsI18N.AR;\n    case \"en\":\n    case \"en_gb\":\n    case \"en_us\":\n      return opLabelsI18N.EN;\n    case \"es\":\n    case \"es_es\":\n    case \"es_mx\":\n    case \"es_us\":\n      return opLabelsI18N.ES;\n    case \"th\":\n    case \"th_th\":\n      return opLabelsI18N.TH;\n\n    // to be explicit about missing opLabels, leave these as cases\n    case \"ru\":\n    case \"ru_ru\":\n    case \"de\":\n    case \"de_de\":\n      return opLabelsI18N.EN;\n\n    default:\n      return opLabelsI18N.EN;\n  }\n};\n\nexport const PredicateTreeDemoPage = (): JSX.Element => {\n  const { getCurrentLocale } = useApplicationUtilities();\n  const locale = getCurrentLocale();\n  // because languageCode may/not be in the form of language_region (en_gb, es_mx)\n  const opLabels = getOperatorLabels(locale.languageCode as TSupportedLanguages);\n\n  return (\n    <PredicateFormulaContext.Provider\n      predicateFormulaEditor={predicateFormulaEditor}\n      operatorLabels={opLabels}\n    >\n      <PredicateTreeDemoPageRaw />\n    </PredicateFormulaContext.Provider>\n  );\n};\n","import { NavListMain } from \"./NavListMain\";\nimport { NavListSecondary } from \"./NavListSecondary\";\nimport Router from \"./Router\";\nexport default Router;\nexport { NavListMain, NavListSecondary };\n","import * as React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { AppContextProviders } from \"../Application/AppContextProviders\";\n\nimport {\n  ApplicationFeaturesPage,\n  BlankPage,\n  HomePage,\n  ProjectionDemoPage,\n  PredicateTreeDemoPage,\n} from \"../Pages\";\n\nimport { HOME_DIR } from \"./common\";\n\nconst Router = (): JSX.Element => {\n  return (\n    <AppContextProviders>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path={`${HOME_DIR}`} component={HomePage} />\n          <Route path={`${HOME_DIR}predicate-demo`} component={PredicateTreeDemoPage} />\n          <Route path={`${HOME_DIR}projection-demo`} component={ProjectionDemoPage} />\n          {/* <Route path={`${homeDir}gabby-components`} component={GabbyComponentsPage} /> */}\n\n          <Route path={`${HOME_DIR}blank-page`} component={BlankPage} />\n          <Route\n            path={`${HOME_DIR}application-features`}\n            component={ApplicationFeaturesPage}\n          />\n\n          {/* Not Found */}\n          {/* <Route component={() => <Redirect to=\"/\" />} /> */}\n        </Switch>\n      </BrowserRouter>\n    </AppContextProviders>\n  );\n};\nexport default Router;\n","import Router from \"./Router\";\nexport default function App() {\n  return <Router />;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}